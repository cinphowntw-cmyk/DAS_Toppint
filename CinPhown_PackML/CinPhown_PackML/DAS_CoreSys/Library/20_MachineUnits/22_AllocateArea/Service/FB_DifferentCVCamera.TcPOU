<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_DifferentCVCamera" Id="{f4ab733a-15a9-490a-bf47-b810290f7ccc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DifferentCVCamera EXTENDS FB_ActionBasic
VAR_INPUT
    xExecute    : BOOL;
    xAbort      : BOOL;
	xReset		: BOOL;
    Cylinder 	: REFERENCE TO UNI_CylinderList;
    TimeOut  	: LREAL := 600; // Unit : s
	Input		: ST_InputTable;
	OutPut		: ST_OutputTable;
	Motor		: REFERENCE TO UNI_MotorList;
	BoxCameraDone :BOOL;
END_VAR	
VAR_OUTPUT
    xAborted : BOOL;
    iErrorID : INT;
    ErrorMsg : STRING;
	UseBoxCamera	:BOOL;
END_VAR
VAR
    StateBehaviour   : CBML.ETrigATo;
    CurrentPosition : ST_PositionTable;
	uiCyclicStep    : UINT := 0;
	TON_DelaySensor	:TON;
	TON_TimeOut		:TON;
	TON_ArriviedTimeOut :TON ;
	TON_CameraTimeOut	:TON;
	TON_ConveyorTimeOut	:TON;
	Reset_Rtrig 	:R_TRIG;
	fbExecuteEdgeDetect :FB_EdgeDetect;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[THIS^.IBehaviourModel := StateBehaviour;
StateBehaviour(xExecute := xExecute,
              xAbort := xAbort OR fbExecuteEdgeDetect.xFallingEdge,
              udiTimeOut := LREAL_TO_UDINT( TimeOut*1000000),
              xDone => xDone,
              xBusy => xBusy,
              xError => xError,
              xAborted => xAborted);
//Error Mes
iErrorID := StateBehaviour._model.iErrorID;
ErrorMsg := M_GetErrorMsg(xErrorID := iErrorID);  

//Make sure that C# turns off execute to shut down the service
fbExecuteEdgeDetect(xInput :=xExecute);

//Reset 
Reset_Rtrig(CLK:= xReset);
IF Reset_Rtrig.Q THEN
	StateBehaviour.ResetModel(xCommit:=xReset);
END_IF

//Action
A00_BaseUnits();]]></ST>
    </Implementation>
    <Folder Name="Action" Id="{50b7549f-3c45-4ccf-a4a7-1cdf3c96151f}" />
    <Action Name="A00_BaseUnits" Id="{ecb63a04-5545-4c1d-8290-f4ae59068027}">
      <Implementation>
        <ST><![CDATA[TON_DelaySensor(PT:= T#1S);
TON_TimeOut(PT := T#20S);
TON_ArriviedTimeOut(PT:= T#60S);
TON_CameraTimeOut(PT :=T#250S);
TON_ConveyorTimeOut(PT :=T#60S);]]></ST>
      </Implementation>
    </Action>
    <Method Name="CleanupAction" Id="{84d205e3-84a9-4e6e-91e2-34f7af845f9a}" FolderPath="Action\">
      <Declaration><![CDATA[METHOD CleanupAction
VAR_INPUT
    xAbortProposed : BOOL;
    iErrorIDProposed: INT;
END_VAR
VAR_OUTPUT
    xComplete : BOOL := TRUE;
    xAbort: BOOL := xAbortProposed;
 	iErrorID : INT := iErrorIDProposed;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[xComplete :=FALSE;
TON_DelaySensor.IN :=FALSE;
TON_TimeOut.IN := FALSE;
TON_ArriviedTimeOut.IN :=FALSE;
TON_CameraTimeOut.IN :=FALSE;
TON_ConveyorTimeOut.IN :=FALSE;

UseBoxCamera	:= FALSE;
BoxCameraDone	:= FALSE;

Cylinder.List.fbDifferentSizeCV_Block1.M_Retract();
Motor.List.TransmitDifferentSideCV.M_MotorStop();

IF Cylinder.List.fbDifferentSizeCV_Block1.InRearPosition AND 
	Motor.List.TransmitDifferentSideCV.InStopped THEN
	    xComplete := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicAction" Id="{dd093b31-2fe3-4187-9bd9-74b44ab660f6}" FolderPath="Action\">
      <Declaration><![CDATA[METHOD CyclicAction
VAR_INPUT
    itfTimingController : CBML.ITimingController;
END_VAR
VAR_OUTPUT
    xComplete : BOOL := TRUE;
    iErrorID : INT := 0;
END_VAR
VAR_INST
	bMoveConveyorForward	 : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[xComplete := FALSE;
IF bMoveConveyorForward THEN
	IF NOT Motor.List.TransmitDifferentSideCV.InBackWard THEN
		Motor.List.TransmitDifferentSideCV.M_MoveForward();
	END_IF
END_IF
CASE uiCyclicStep OF
    0:	//keep for use
	bMoveConveyorForward:=FALSE;
		uiCyclicStep :=1000;
		
	1000:	// block first box 
		TON_TimeOut.IN:=TRUE;
		//Cylinder.List.fbDifferentSizeCV_Press1.M_Retract();
		Cylinder.List.fbDifferentSizeCV_Block1.M_Extend();
		Cylinder.List.fbTransmitCV_CamaraHoriz.M_Extend();
		IF Cylinder.List.fbDifferentSizeCV_Block1.InFrontPosition AND 
			Cylinder.List.fbTransmitCV_CamaraHoriz.InFrontPosition (*AND
			Cylinder.List.fbDifferentSizeCV_Press1.InRearPosition*)  THEN
			TON_TimeOut.IN:=FALSE;
			uiCyclicStep :=1050;
		END_IF
		IF TON_TimeOut.Q THEN
			iErrorID := 7;
		END_IF
//	1025:	//check box on sensor
//		IF Input.bDifferentSizeCV_BoxDetect2_Sensor THEN
//			Motor.List.TransmitDifferentSideCV.M_MoveBackward();
//			uiCyclicStep :=1030;
//		ELSE
//			uiCyclicStep :=1050;
//		END_IF
//	1030:		//check box leave sensor
//		IF NOT Input.bDifferentSizeCV_BoxDetect2_Sensor	THEN
//			bMoveConveyorForward:=FALSE;
//			Motor.List.TransmitDifferentSideCV.M_MotorStop();
//			uiCyclicStep :=1040;
//		END_IF
//	1040:		//Check motor stop
//		IF Motor.List.TransmitDifferentSideCV.InStopped THEN
//			uiCyclicStep := 1050;
//		END_IF
		
	1050:	//motor moveforward
		TON_ConveyorTimeOut.IN:=TRUE;
		bMoveConveyorForward:=TRUE;
		Cylinder.List.fbDifferentSizeCV_Press1.M_Retract();
		//Motor.List.TransmitDifferentSideCV.M_MoveForward();
		IF 	Motor.List.TransmitDifferentSideCV.InForWard AND 
			Cylinder.List.fbDifferentSizeCV_Press1.InRearPosition	THEN
			TON_ConveyorTimeOut.IN:= FALSE;
			uiCyclicStep :=1100;
		END_IF
		IF TON_ConveyorTimeOut.Q THEN
			iErrorID := 7;
		END_IF
	1100:	//check first box arrive block
		TON_ArriviedTimeOut.IN:=TRUE;
		TON_DelaySensor.IN:=Input.bDifferentSizeCV_BoxDetect2_Sensor;
		IF TON_DelaySensor.Q THEN
			TON_DelaySensor.IN :=FALSE;
			TON_ArriviedTimeOut.IN :=FALSE;
			Cylinder.List.fbDifferentSizeCV_Press1.M_Extend();
			bMoveConveyorForward:=FALSE	;
			Motor.List.TransmitDifferentSideCV.M_MotorStop();
			uiCyclicStep :=1200;
		END_IF
		IF TON_ArriviedTimeOut.Q THEN
			iErrorID := 8;
		END_IF
		
	1200:	//send use camera & hold sencond box
		TON_ConveyorTimeOut.IN:=TRUE;	
		IF Cylinder.List.fbDifferentSizeCV_Press1.InFrontPosition AND
			Motor.List.TransmitDifferentSideCV.InStopped THEN
			TON_ConveyorTimeOut.IN:= FALSE;
			UseBoxCamera :=TRUE;			//send request
			uiCyclicStep :=1300;
		END_IF
		IF TON_ConveyorTimeOut.Q THEN
			iErrorID := 9 ;
		END_IF
		
	1300:	//Check C# send camera done
		TON_CameraTimeOut.IN:=TRUE;
		IF BoxCameraDone THEN
			TON_CameraTimeOut.IN :=FALSE;
			Cylinder.List.fbDifferentSizeCV_Block1.M_Retract();
			bMoveConveyorForward:=TRUE;
			//Motor.List.TransmitDifferentSideCV.M_MoveForward();
			uiCyclicStep :=1400;
		END_IF
		IF TON_CameraTimeOut.Q THEN 
			iErrorID :=10;
			//xAbort:=TRUE;				//abort resume C# checkBoxCameraDone FeedBack
		END_IF
		
	1400:	//First Box cross detect1 sensor
		TON_TimeOut.IN :=TRUE;
		IF Input.bDifferentSizeCV_BoxDetect1_Sensor THEN
			TON_TimeOut.IN :=FALSE;
			uiCyclicStep :=1500;
		END_IF
		IF TON_TimeOut.Q THEN
			iErrorID :=11;
		END_IF
		
	1500:	//cross sensor stop motor
		TON_DelaySensor.IN:=TRUE;
		IF NOT Input.bDifferentSizeCV_BoxDetect1_Sensor THEN
			TON_DelaySensor.IN:=FALSE;
			bMoveConveyorForward:=FALSE;
			Motor.List.TransmitDifferentSideCV.M_MotorStop();
			uiCyclicStep :=1600;
		END_IF
		IF TON_DelaySensor.Q THEN
			TON_DelaySensor.IN:=FALSE;
			bMoveConveyorForward:=FALSE;
			Motor.List.TransmitDifferentSideCV.M_MotorStop();
			uiCyclicStep :=1600;
		END_IF
	
	1600:	// wait motor stop 
		IF Motor.List.TransmitDifferentSideCV.InStopped THEN
			//Cylinder.List.fbDifferentSizeCV_Press1.M_Retract();
//			uiCyclicStep:=1700;
				xComplete :=TRUE;
		END_IF
	1700:	//make sure sencond box still 
//		IF Cylinder.List.fbDifferentSizeCV_Press1.InRearPosition THEN
//			xComplete :=TRUE;
//		END_IF
			
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExitAction" Id="{249c6dab-8479-4fb7-ad51-11e60e594e10}" FolderPath="Action\">
      <Declaration><![CDATA[METHOD ExitAction
VAR_INPUT
    xAfterCleanup : BOOL;
    xInCopyCode : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_GetErrorMsg" Id="{07171412-48bc-4271-a493-d60c93b6db04}">
      <Declaration><![CDATA[METHOD M_GetErrorMsg : T_MaxString
VAR_INPUT
	xErrorID: INT;
END_VAR

VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE xErrorID OF
	0:
		M_GetErrorMsg := 'No Error';
	1:
		M_GetErrorMsg := 'Action time out';
	2:
		M_GetErrorMsg := 'Position Data invalid';
///
	3:
		M_GetErrorMsg := 'Block1 cylinder not ready';
	4:
		M_GetErrorMsg := 'Press1 cylinder not ready';
	5:
		M_GetErrorMsg := 'CamaraHoriz cylinder not ready';
	6:
		M_GetErrorMsg := 'DifferentCV not ready ';
	7:	
		M_GetErrorMsg :=' Cylinder timeout';
	8:
		M_GetErrorMsg :='photo area have not box timeout';
	9:
		M_GetErrorMsg :='motor & cylinder timeout';
	10:
		M_GetErrorMsg :='C# BoxCameraDone timeout';
	11:
		M_GetErrorMsg :='Box cross sensor not detact timeout';
		
	20:
		M_GetErrorMsg :='Differnet conveyor full box infront';
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetAction" Id="{bbc4d767-cb94-4960-954c-a81bc8ad836f}" FolderPath="Action\">
      <Declaration><![CDATA[METHOD ResetAction
VAR_OUTPUT
    xComplete : BOOL := TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//IF xAbort THEN 
//	CASE uiCyclicStep OF 
//		1400:
//			uiCyclicStep :=1400;	
	
//	END_CASE
//END_IF
xComplete:= FALSE;
TON_DelaySensor.IN :=FALSE;
TON_TimeOut.IN := FALSE;
TON_ArriviedTimeOut.IN :=FALSE;
TON_CameraTimeOut.IN :=FALSE;
TON_ConveyorTimeOut.IN :=FALSE;
xComplete := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="StartAction" Id="{d5f673ab-d024-4521-94fc-f22c207174d7}" FolderPath="Action\">
      <Declaration><![CDATA[METHOD StartAction
VAR_OUTPUT
    xComplete : BOOL := TRUE;
	iErrorID : INT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[xComplete :=FALSE;
TON_DelaySensor.IN :=FALSE;
TON_TimeOut.IN := FALSE;
TON_ArriviedTimeOut.IN :=FALSE;
TON_CameraTimeOut.IN :=FALSE;
TON_ConveyorTimeOut.IN :=FALSE;
uiCyclicStep :=0;
UseBoxCamera	:= FALSE;
BoxCameraDone	:= FALSE;

IF Input.bDifferentSizeCV_BoxDetect1_Sensor THEN
	iErrorID :=20;
END_IF

IF Cylinder.List.fbDifferentSizeCV_Block1.InRearPosition AND 
//	Cylinder.List.fbDifferentSizeCV_Press1.InRearPosition AND 		//Holding press make sure box cross behind
	//Cylinder.List.fbTransmitCV_CamaraHoriz.InRearPosition AND 
	Motor.List.TransmitDifferentSideCV.InStopped THEN
	    xComplete := TRUE;
END_IF


IF  Cylinder.List.fbDifferentSizeCV_Block1.xError  THEN
	iErrorID := 3; // Cylinder not ready
END_IF
IF  Cylinder.List.fbDifferentSizeCV_Press1.xError THEN
	iErrorID := 4; // Cylinder not ready
END_IF
IF  Cylinder.List.fbTransmitCV_CamaraHoriz.xError THEN
	iErrorID := 5;	//Cylinder not ready
END_IF
IF  Motor.List.TransmitDifferentSideCV.xError THEN
	iErrorID := 6;	//Conveyor not ready
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_DifferentCVCamera">
      <LineId Id="26" Count="6" />
      <LineId Id="9" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="85" Count="2" />
      <LineId Id="84" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="116" Count="0" />
    </LineIds>
    <LineIds Name="FB_DifferentCVCamera.A00_BaseUnits">
      <LineId Id="1" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="4" Count="1" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_DifferentCVCamera.CleanupAction">
      <LineId Id="70" Count="0" />
      <LineId Id="21" Count="2" />
      <LineId Id="50" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="24" Count="3" />
      <LineId Id="30" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_DifferentCVCamera.CyclicAction">
      <LineId Id="140" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="435" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="402" Count="1" />
      <LineId Id="87" Count="1" />
      <LineId Id="401" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="289" Count="2" />
      <LineId Id="389" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="296" Count="1" />
      <LineId Id="295" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="300" Count="1" />
      <LineId Id="303" Count="0" />
      <LineId Id="306" Count="1" />
      <LineId Id="302" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="308" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="310" Count="0" />
      <LineId Id="309" Count="0" />
      <LineId Id="311" Count="3" />
      <LineId Id="304" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="424" Count="0" />
      <LineId Id="283" Count="4" />
      <LineId Id="275" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="162" Count="2" />
      <LineId Id="239" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="409" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="240" Count="2" />
      <LineId Id="189" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="245" Count="2" />
      <LineId Id="188" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="249" Count="1" />
      <LineId Id="252" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="348" Count="2" />
      <LineId Id="366" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="367" Count="2" />
      <LineId Id="354" Count="3" />
      <LineId Id="370" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="358" Count="2" />
      <LineId Id="372" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="373" Count="0" />
      <LineId Id="371" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="361" Count="4" />
      <LineId Id="390" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="216" Count="3" />
      <LineId Id="386" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="32" Count="0" />
    </LineIds>
    <LineIds Name="FB_DifferentCVCamera.ExitAction">
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_DifferentCVCamera.M_GetErrorMsg">
      <LineId Id="5" Count="1" />
      <LineId Id="12" Count="4" />
      <LineId Id="43" Count="0" />
      <LineId Id="17" Count="3" />
      <LineId Id="28" Count="2" />
      <LineId Id="33" Count="0" />
      <LineId Id="51" Count="1" />
      <LineId Id="60" Count="3" />
      <LineId Id="71" Count="3" />
      <LineId Id="82" Count="2" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_DifferentCVCamera.ResetAction">
      <LineId Id="6" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="32" Count="0" />
    </LineIds>
    <LineIds Name="FB_DifferentCVCamera.StartAction">
      <LineId Id="151" Count="0" />
      <LineId Id="139" Count="2" />
      <LineId Id="113" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="128" Count="2" />
      <LineId Id="121" Count="5" />
      <LineId Id="66" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="68" Count="1" />
      <LineId Id="71" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="104" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>