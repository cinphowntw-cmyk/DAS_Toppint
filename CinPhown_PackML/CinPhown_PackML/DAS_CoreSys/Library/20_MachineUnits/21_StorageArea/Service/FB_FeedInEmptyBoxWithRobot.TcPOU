<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_FeedInEmptyBoxWithRobot" Id="{e5d2eb51-b386-4a4c-a22c-3b912fc6afe4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_FeedInEmptyBoxWithRobot EXTENDS FB_ObjectBase_V2 IMPLEMENTS IBasicElement
VAR_INPUT
    // Below are the components being controlled.
    Robot           : REFERENCE TO FB_FanucRobot_Basic; // Fanuc Robot
    PullOutConveyor : REFERENCE TO FB_PullOutConveyorAction; // Allocated area pull out conveyor
    DiffSizeCV  : REFERENCE TO FB_Motor; // Allocated area feed in conveyor(diff and same size conveyor)
	SameSizeCV : REFERENCE TO FB_Motor;
    WareHouse       : REFERENCE TO FB_WareHouse; // Storage area warehouse A and warehouse B conveyor and sensor
    //SameSizeFullSensor : REFERENCE TO BOOL; 				 // Because the same size sensor implement FB_ConveyorSameSize, so use reference to connect it
    Info  : ST_FeedInEmptyBox_Info; // Setting the feedin emptybox action's parameter
    Input : REFERENCE TO ST_InputTable;
    Stop  : BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
    tonPlaceSensorDelay    : TON;
    tonFeedInConveyorDelay : TON;
    tonTimeOut             : TON;
    tonFeedBoxTimeout      : TON;
    strStatus              : STRING;
    _UniqueErrorCode       : STRING;
    _Abort                 : BOOL;
    uiResumeStep           : DINT;
    PreviousStrStatus      : STRING;
    PreviousErrorCode      : STRING;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^.A10_StateControl();
tonPlaceSensorDelay(PT:=T#1S);
tonFeedInConveyorDelay(PT:=T#500MS);]]></ST>
    </Implementation>
    <Folder Name="Method" Id="{7e7dc273-f7ce-48ef-8834-90b69af38a99}" />
    <Folder Name="State" Id="{a2a3c9b6-8034-46f0-bb89-af0cf7b120dc}" />
    <Action Name="A00_BasicUnits" Id="{aeba9ae8-897f-47b9-a8ed-9c0452db745f}">
      <Implementation>
        <ST><![CDATA[tonTimeOut(PT:=T#60S);
tonFeedBoxTimeout(PT:=T#15s);
]]></ST>
      </Implementation>
    </Action>
    <Method Name="M_CheckCommand" Id="{fc59ef26-a7de-4411-b4ab-15c2a924c02d}" FolderPath="Method\">
      <Declaration><![CDATA[METHOD M_CheckCommand : BOOL
VAR_INPUT
END_VAR

VAR_INST
	CheckBehavior : BOOL; // True : Behavior is correct
	CheckWareHouseSetting : BOOL; // True : WareHouse setting is correct
	CheckPullOutConveyorSetting : BOOL; // True : PullOut Conveyor setting is correct
	CheckPickUpArea : BOOL; // True : PickUp Area is correct
	CheckPlaceArea : BOOL; // True : Place Area is correct
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Memory clear
CheckBehavior := FALSE;
// Check command is correct
IF info.ClampA_Setting.Behavior = E_ClampWork.Work OR info.ClampB_Setting.Behavior = E_ClampWork.Work THEN
	CheckBehavior := TRUE;
ELSE
	CheckBehavior := FALSE;
END_IF


M_CheckCommand := CheckBehavior;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_CheckUnitsNotBusy" Id="{7ae49b47-1463-45bb-8dbb-6cdd8abb84b1}" FolderPath="Method\">
      <Declaration><![CDATA[METHOD M_CheckUnitsNotBusy : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_CheckUnitsNotBusy := true; // need add units check ]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_CheckUnitsReady" Id="{0c0eb91a-b8b5-4155-ba84-3324c43d73af}" FolderPath="Method\">
      <Declaration><![CDATA[METHOD M_CheckUnitsReady : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_CheckUnitsReady := NOT (Robot.Error (*OR PullOutConveyor.Error OR FeedInConveyor.bError OR WareHouse.bError*));]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ReloadBox" Id="{17be1eea-bd30-437b-b064-97eb7ae3f916}" FolderPath="Method\">
      <Declaration><![CDATA[METHOD M_ReloadBox
VAR_INPUT
	Info : ST_FeedInEmptyBox_Info;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF info.PickUpArea    = E_FeedInEmptyBox_PickUpArea.PullOutConveyorA THEN
    uiExecutingStep   := 1000;
ELSIF info.PickUpArea = E_FeedInEmptyBox_PickUpArea.PullOutConveyorB THEN
    uiExecutingStep   := 2000;
ELSIF info.PickUpArea = E_FeedInEmptyBox_PickUpArea.WareHouseA THEN
    //WareHouse.
ELSIF info.PickUpArea = E_FeedInEmptyBox_PickUpArea.WareHouseB THEN
    uiExecutingStep   := 4000;
ELSE
    _Error := TRUE;
    Status := 'PickUp area value is out of range';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ReloadPulloutConveyorBox" Id="{3c059356-ab0e-4d8c-ac7c-9661d07cbd04}" FolderPath="Method\">
      <Declaration><![CDATA[METHOD M_ReloadPulloutConveyorBox : BOOL
VAR_INPUT
	Execute : BOOL;
	SlideSelect : E_PullOutConveyorPosition;
END_VAR
VAR_INST
	uiReloadPulloutConveyorBoxStep : UDINT;
	fbExecute_Rtrig : R_TRIG;
	fbExecute_Ftrig : F_TRIG;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbExecute_Rtrig(CLK := Execute);
fbExecute_Ftrig(CLK := Execute);
IF fbExecute_Rtrig.Q THEN
	uiReloadPulloutConveyorBoxStep := 100;
ELSIF fbExecute_Ftrig.Q THEN
	uiReloadPulloutConveyorBoxStep := 99000;
END_IF
CASE uiReloadPulloutConveyorBoxStep OF
	0 : 
		// Wait command
	99000:
//		PullOutConveyor.FixCylinderA1.M_MoveBackward('');
//		PullOutConveyor.FixCylinderA2.M_MoveBackward('');
//		PullOutConveyor.FixCylinderB1.M_MoveBackward('');
//		PullOutConveyor.FixCylinderB2.M_MoveBackward('');
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SelectActionMode" Id="{696acde7-8424-4763-ac36-e3e86e187466}" FolderPath="Method\">
      <Declaration><![CDATA[METHOD M_SelectActionMode : E_FeedInAction
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF info.ClampA_Setting.Behavior = E_ClampWork.Work AND info.ClampB_Setting.Behavior <> E_ClampWork.Work THEN
	IF info.ClampA_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.WareHouseA THEN
		M_SelectActionMode := E_FeedInAction.ClampA_WareHouseA;
	ELSIF info.ClampA_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.WareHouseB THEN
		M_SelectActionMode := E_FeedInAction.ClampA_WareHouseB;
	ELSIF info.ClampA_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.PullOutConveyor THEN
		M_SelectActionMode := E_FeedInAction.ClampA_PullOutConveyor;
	END_IF
ELSIF info.ClampA_Setting.Behavior <> E_ClampWork.Work AND info.ClampB_Setting.Behavior = E_ClampWork.Work THEN
	IF info.ClampB_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.WareHouseA THEN
		M_SelectActionMode := E_FeedInAction.ClampB_WareHouseA;
	ELSIF info.ClampB_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.WareHouseB THEN
		M_SelectActionMode := E_FeedInAction.ClampB_WareHouseB;
	ELSIF info.ClampB_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.PullOutConveyor THEN
		M_SelectActionMode := E_FeedInAction.ClampB_PullOutConveyor;
	END_IF
ELSIF info.ClampA_Setting.Behavior = E_ClampWork.Work AND info.ClampB_Setting.Behavior = E_ClampWork.Work THEN
	IF info.ClampA_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.PullOutConveyor THEN
		IF  info.ClampB_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.WareHouseA THEN
			M_SelectActionMode := E_FeedInAction.A_PullOut_B_WareHouseA;
		ELSIF info.ClampB_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.WareHouseB THEN
			M_SelectActionMode := E_FeedInAction.A_PullOut_B_WareHouseB;
		ELSIF info.ClampB_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.PullOutConveyor THEN
			M_SelectActionMode := E_FeedInAction.A_PullOut_B_PullOut;
		END_IF
	ELSIF info.ClampA_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.WareHouseA THEN
		IF info.ClampB_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.WareHouseA THEN
			M_SelectActionMode := E_FeedInAction.A_WareHouseA_B_WareHouseA;
		ELSIF info.ClampB_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.WareHouseB THEN
			M_SelectActionMode := E_FeedInAction.A_WareHouseA_B_WareHouseB;
		ELSIF info.ClampB_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.PullOutConveyor THEN
			M_SelectActionMode := E_FeedInAction.A_WareHouseA_B_PullOut;
		END_IF
	ELSIF info.ClampA_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.WareHouseB THEN
		IF info.ClampB_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.WareHouseA THEN
			M_SelectActionMode := E_FeedInAction.A_WareHouseB_B_WareHouseA;
		ELSIF info.ClampB_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.WareHouseB THEN
			M_SelectActionMode := E_FeedInAction.A_WareHouseB_B_WareHouseB;
		ELSIF info.ClampB_Setting.PickUpArea = E_FeedInEmptyBox_PickUpArea.PullOutConveyor THEN
			M_SelectActionMode := E_FeedInAction.A_WareHouseB_B_PullOut;
		END_IF
	END_IF
END_IF















]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_STATE_ABORTED" Id="{b6a0a42e-f4c9-4cfa-a6e4-937341429efe}" FolderPath="State\">
      <Declaration><![CDATA[METHOD  M_STATE_ABORTED
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Busy    := FALSE;
Aborted := TRUE;
Status := strStatus ;
UniqueErrorCode := _UniqueErrorCode;
IF NOT Execute THEN
    eState := STATE_RESETTING;
END_IF

IF Execute AND Reset THEN
	uiExecutingStep :=uiResumeStep;
	PreviousStrStatus := strStatus;
	PreviousErrorCode := _UniqueErrorCode;
	eState :=STATE_EXECUTING;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_STATE_ABORTING" Id="{39625bf3-d53e-47c5-8030-081238325539}" FolderPath="State\">
      <Declaration><![CDATA[METHOD  M_STATE_ABORTING
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_AbortCompleted := TRUE;
_Abort :=FALSE;
tonTimeOut.IN:=FALSE;
//DAS.fbStorageArea.M_ResetSlideA_FeedIn();
IF strStatus = PreviousStrStatus THEN
	_UniqueErrorCode :=PreviousErrorCode;
END_IF
IF _AbortCompleted THEN
    eState := STATE_Aborted;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_STATE_DONE" Id="{03196fbe-8828-48df-b116-bffbcbcb6e8a}" FolderPath="State\">
      <Declaration><![CDATA[METHOD  M_STATE_DONE
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Busy := FALSE;
Done := TRUE;
IF NOT Execute THEN
    eState := STATE_RESETTING;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_STATE_DORMANT" Id="{5d1ac787-c914-4e12-b0ca-9889781484d3}" FolderPath="State\">
      <Declaration><![CDATA[METHOD  M_STATE_DORMANT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Clear FB output
Busy            := FALSE;
Done            := FALSE;
Aborted         := FALSE;
Error           :=  FALSE;
ErrorID         := 0;
Status          := '';
_ResetCompleted := FALSE;
_Error          := FALSE;
_Executed       := FALSE;
uiExecutingStep := 0;
uiResettingStep := 0;
uiResumeStep:=0;
tonPlaceSensorDelay.IN :=FALSE;
tonFeedInConveyorDelay.IN :=FALSE;
tonTimeOut.IN :=FALSE;
_UniqueErrorCode :='0';
PreviousStrStatus			 :='';
PreviousErrorCode			 :='';
//DAS.fbStorageArea.M_InactivePulloutConveyorInternCtrl();
// Wait Execute command
IF Execute THEN
    eState := STATE_EXECUTING;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_STATE_ERROR" Id="{7f755014-01a7-475c-97c8-b408ce0d91af}" FolderPath="State\">
      <Declaration><![CDATA[METHOD  M_STATE_ERROR
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Robot.Bzone_AllowWork:=FALSE;
IF NOT Execute THEN
    eState := STATE_RESETTING;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_STATE_EXECUTING" Id="{5cdb3998-0a52-4f32-a8f2-68f22ec2dbef}" FolderPath="State\">
      <Declaration><![CDATA[METHOD M_STATE_EXECUTING
VAR_INPUT
END_VAR
VAR_INST
    ClampA_WareHouseCoordinates : ST_WareHouseCoordinates;
    ClampB_WareHouseCoordinates : ST_WareHouseCoordinates;
    uiPickUpBothStep            : UINT;
    uiPlaceBothStep             : UINT;
    BoxReady_1st                : BOOL;
    BoxReady_2nd                : BOOL;
    SlideClear_1st              : BOOL;
    SlideClear_2nd              : BOOL;
    TargetWarehouse             : E_WareHouse;
    DiffSizeSlide_Clear         : BOOL;
    SameSizeSlide_clear         : BOOL;
    ActionMode                  : E_FeedInAction;
END_VAR
VAR

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Set status busy
Busy := TRUE;
Robot.Bzone_AllowWork:=Robot._DI12.BzoneInWork;
//Auto mode , just allow robot
IF THIS^.Stop THEN // Pending the timeout when Stop signal occur
	tonTimeout.IN :=FALSE;
END_IF
CASE uiExecutingStep OF
    0:
        // Clear variable
        ActionMode       := E_FeedInAction.Undefined;
        BoxReady_1st     := FALSE;
        BoxReady_2nd     := FALSE;
        uiPickUpBothStep := 0;
        uiPlaceBothStep  := 0;

        // Check command
        IF M_CheckCommand() THEN
            uiExecutingStep := 10;
        END_IF
    10: // Start process, check units first
        IF M_CheckUnitsReady() THEN
            uiExecutingStep := 20;
        END_IF
    20: // Check units not busy state
        IF M_CheckUnitsNotBusy() THEN
            uiExecutingStep := 1000;
        END_IF
    1000:
        // Select action mode
        ActionMode      := M_SelectActionMode();
        uiExecutingStep := 1100;
    1100:
        // according action mode jump step
        CASE ActionMode OF
            E_FeedInAction.ClampA_WareHouseA:
                uiExecutingStep := 10000; // Go to start only ClampA pickup from WareHouseA
            E_FeedInAction.ClampA_WareHouseB:
                uiExecutingStep := 11000; // Go to Start only ClampA pickup from WareHouseB
            E_FeedInAction.ClampA_PullOutConveyor:
                uiExecutingStep := 12000; // Go to Start only ClampA pickup form PulloutConveyor
            E_FeedInAction.ClampB_WareHouseA:
                uiExecutingStep := 20000; // Go to Start only ClampB pickup from WareHouseA
            E_FeedInAction.ClampB_WareHouseB:
                uiExecutingStep := 21000; // Go to Start only ClampB pickup from WareHouseB
            E_FeedInAction.ClampB_PullOutConveyor:
                uiExecutingStep := 22000; // Go to Start only ClampB pickup from PulloutConveyor
            E_FeedInAction.A_WareHouseA_B_WareHouseA:
                uiExecutingStep := 30000; // Go to Start ClampA pickup from WarehouseA, ClampB pickup from WarehouseA
            E_FeedInAction.A_WareHouseA_B_WareHouseB:
                uiExecutingStep := 31000; // Go to Start ClampA pickup from WarehouseA, ClmapB pickup from WarehouseB
            E_FeedInAction.A_WareHouseA_B_PullOut:
                uiExecutingStep := 32000; // Go to Start ClampA pickup from WarehouseA, ClampB pickup from PulloutConveyor
            E_FeedInAction.A_WareHouseB_B_WareHouseA:
                uiExecutingStep := 33000; // Go to Start ClampA pickup from WarehouseB, ClampB pickup from WarehouseA
            E_FeedInAction.A_WareHouseB_B_WareHouseB:
                uiExecutingStep := 34000; // Go to Start ClampA pickup from WarehouseB, CLampB pickup from WarehouseB
            E_FeedInAction.A_WareHouseB_B_PullOut:
                uiExecutingStep := 35000; // Go to Start ClampA pickup from WarehouseB, ClampB pickup from PulloutConveyor
            E_FeedInAction.A_PullOut_B_WareHouseA:
                uiExecutingStep := 36000; // Go to Start ClampA pickup from PulloutConveyor, ClampB pickup from WarehouseA
            E_FeedInAction.A_PullOut_B_WareHouseB:
                uiExecutingStep := 37000; // Go to Start ClampA pickup from PulloutConveyor, ClampB pickup from WarehouseB
            E_FeedInAction.A_PullOut_B_PullOut:
                uiExecutingStep := 38000; // Go to Start ClampBoth pickup from PulloutConveyor
        END_CASE
    10000: // Only clampA pickup box from WareHouseA
        IF NOT Robot._DI1.Done THEN
            ClampA_WareHouseCoordinates := info.ClampA_Setting.WareHouseSetting;
            WareHouse.M_StartReloadBox(WareHouseSelect := E_WareHouse.WareHouseA, WarehouseCoordinates := ClampA_WareHouseCoordinates);

            IF WareHouse.bReloadBox_Completed THEN
                BoxReady_1st := TRUE;
            END_IF

            Robot.M_StartWareHousePickUpBox_ClampA(WareHouseSelect := E_WareHouse.WareHouseA,
                                                   Info            := ClampA_WareHouseCoordinates,
                                                   BoxReady_1st    := BoxReady_1st);
        ELSE
            IF Robot.M_ResetWareHousePickUpBox_ClampA() THEN
                // Clear command and go to place box
				tonTimeOut.IN:=FALSE;
                uiExecutingStep := 60000; // only place clampA
            END_IF
        END_IF
		tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF
		
    11000: // Only ClampA pickup box from WareHouseB
        IF NOT Robot._di1.Done THEN
            ClampA_WareHouseCoordinates := info.ClampA_Setting.WareHouseSetting;
            WareHouse.M_StartReloadBox(WareHouseSelect := E_WareHouse.WareHouseB, WarehouseCoordinates := ClampA_WareHouseCoordinates);

            IF WareHouse.bReloadBox_Completed THEN
                BoxReady_1st := TRUE;
            END_IF

            Robot.M_StartWareHousePickUpBox_ClampA(WareHouseSelect := E_WareHouse.WareHouseB,
                                                   Info            := ClampA_WareHouseCoordinates,
                                                   BoxReady_1st    := BoxReady_1st);
        ELSE
            IF Robot.M_ResetWareHousePickUpBox_ClampA() THEN
                // Clear command and go to place box
				tonTimeOut.IN:=FALSE;
                uiExecutingStep := 60000; // only place clampA
            END_IF
        END_IF

		tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF
		
    12000: // Only ClampA pickup box from pullout conveyor
        IF NOT Robot._di1.Done THEN
            DAS_CoreSys.MachineControl.fbStorageArea.M_ActivePulloutConveyorInternCtrl();

            IF Info.ClampA_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I3_Slide THEN
                DAS_CoreSys.MachineControl.fbStorageArea.M_StartSlideB_FeedIn();
            ELSIF Info.ClampA_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I4_Slide THEN
                DAS_CoreSys.MachineControl.fbStorageArea.M_StartSlideA_FeedIn();
            ELSE
                Status := 'Not define PulloutConveyor Slide';
                _Error := TRUE;
            END_IF

            Robot.M_StartPullOutConveyorPickUpBox_ClampA(ClampA_Address := Info.ClampA_Setting.PullOutConveyorSetting,
                                                         BoxReady       := DAS_CoreSys.MachineControl.fballocatearea.fbPulloutCV.Done);
        ELSE
            IF Robot.M_ResetPullOutConveyorPickUpBox_ClampA() THEN
                DAS_CoreSys.MachineControl.fbStorageArea.M_ResetSlideA_FeedIn();
				tonTimeOut.IN:=FALSE;
                uiExecutingStep := 60000; // only place clampA
            END_IF
        END_IF;
			tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Abort :=TRUE;
			uiResumeStep:=12000;
			strStatus :='Pick Box timeout';
		END_IF
		
    20000: // Only clampB pickup box from WareHouseA
        IF NOT Robot._di1.Done THEN
            ClampB_WareHouseCoordinates := info.ClampB_Setting.WareHouseSetting;
            WareHouse.M_StartReloadBox(WareHouseSelect := E_WareHouse.WareHouseA, WarehouseCoordinates := ClampB_WareHouseCoordinates);

            IF WareHouse.bReloadBox_Completed THEN
                BoxReady_2nd := TRUE;
            END_IF

            Robot.M_StartWareHousePickUpBox_ClampB(WareHouseSelect := E_WareHouse.WareHouseA,
                                                   Info            := ClampB_WareHouseCoordinates,
                                                   BoxReady_2nd    := BoxReady_2nd);
        ELSE
            IF Robot.M_ResetWareHousePickUpBox_ClampB() THEN
                // Clear command and go to place box
				tonTimeOut.IN:=FALSE;
                uiExecutingStep := 70000; // only place clampA
            END_IF
        END_IF
			tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF
    21000: // Only ClampB pickup box from WareHouseB
        IF NOT Robot._di1.Done THEN
            ClampB_WareHouseCoordinates := info.ClampB_Setting.WareHouseSetting;
            WareHouse.M_StartReloadBox(WareHouseSelect := E_WareHouse.WareHouseB, WarehouseCoordinates := ClampB_WareHouseCoordinates);

            IF WareHouse.bReloadBox_Completed THEN
                BoxReady_2nd := TRUE;
            END_IF

            Robot.M_StartWareHousePickUpBox_ClampB(WareHouseSelect := E_WareHouse.WareHouseB,
                                                   Info            := ClampB_WareHouseCoordinates,
                                                   BoxReady_2nd    := BoxReady_2nd);
        ELSE
            IF Robot.M_ResetWareHousePickUpBox_ClampB() THEN
                // Clear command and go to place box
				tonTimeOut.IN:=FALSE;
                uiExecutingStep := 70000; // only place clampA
            END_IF
        END_IF
				tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF

    22000: // Only ClampB pickup box from PullOut conveyor
        IF NOT Robot._di1.Done THEN
            DAS_CoreSys.MachineControl.fbStorageArea.M_ActivePulloutConveyorInternCtrl();

            IF Info.ClampB_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I3_Slide THEN
                DAS_CoreSys.MachineControl.fbStorageArea.M_StartSlideB_FeedIn();
            ELSIF Info.ClampB_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I4_Slide THEN
                DAS_CoreSys.MachineControl.fbStorageArea.M_StartSlideA_FeedIn();
            ELSE
                Status := 'Not define PulloutConveyor Slide';
                _Error := TRUE;
            END_IF

            Robot.M_StartPullOutConveyorPickUpBox_ClampB(ClampB_Address := Info.ClampB_Setting.PullOutConveyorSetting,
                                                         BoxReady       := DAS_CoreSys.MachineControl.fballocatearea.fbPulloutCV.Done);
        ELSE
            IF Robot.M_ResetPullOutConveyorPickUpBox_ClampB() THEN
                DAS_CoreSys.MachineControl.fbStorageArea.M_ResetSlideA_FeedIn();
				tonTimeOut.IN:=FALSE;
                uiExecutingStep := 70000; // only place clampA
            END_IF
        END_IF;
			tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			uiResumeStep:=22000;
			_Abort :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF
		
    30000: // ClampA pickup from WarehouseA, ClampB pickup from WarehouseA
        ClampA_WareHouseCoordinates := info.ClampA_Setting.WareHouseSetting;
        ClampB_WareHouseCoordinates := info.ClampB_Setting.WareHouseSetting;

        CASE uiPickUpBothStep OF
            0: // ClampA target slide move the box to front side
                WareHouse.M_StartReloadBox(WareHouseSelect := E_WareHouse.WareHouseA, WarehouseCoordinates := ClampA_WareHouseCoordinates);

                IF WareHouse.bReloadBox_Completed THEN
                    BoxReady_1st     := TRUE;
                    uiPickUpBothStep := 10;
                END_IF

            10: // wait Robot Allow continue
                IF Robot._DI1.Notification AND
                    NOT
                    WareHouse._stWarehouseList.ASide_Layers[ClampA_WareHouseCoordinates.Layer].stStatus.bSlides[ClampA_WareHouseCoordinates.Slide]
                    THEN
                    WareHouse.M_ResetReloadBox();

                    IF NOT WareHouse.bReloadBox_Completed THEN
                        uiPickUpBothStep := 20;
                    END_IF

                END_IF
            20: // ClampB target slide move the box to front slide
                WareHouse.M_StartReloadBox(WareHouseSelect := E_WareHouse.WareHouseA, WarehouseCoordinates := ClampB_WareHouseCoordinates);

                IF WareHouse.bReloadBox_Completed THEN
                    BoxReady_2nd     := TRUE;
                    uiPickUpBothStep := 99;
                END_IF
            99:
        // wait reset
        END_CASE

        Robot.M_StartWareHousePickUpBox_ClampBoth(WareHouseSelect := E_WareHouse.WareHouseA,
                                                  ClampA_Info     := ClampA_WareHouseCoordinates,
                                                  ClampB_Info     := ClampB_WareHouseCoordinates,
                                                  BoxReady_1st    := BoxReady_1st,
                                                  BoxReady_2nd    := BoxReady_2nd);

        IF Robot._DI1.Done THEN
			tonTimeOut.IN:=FALSE;
            uiExecutingStep := 80000; // go to place step
        END_IF
			tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF
		
    31000: // ClampA pickup from WarehouseA, ClampB pickup from WarehouseB
        IF NOT Robot._DI1.Done THEN
            ClampA_WareHouseCoordinates := info.ClampA_Setting.WareHouseSetting;
            WareHouse.M_StartReloadBox(WareHouseSelect := E_WareHouse.WareHouseA, WarehouseCoordinates := ClampA_WareHouseCoordinates);

            IF WareHouse.bReloadBox_Completed THEN
                BoxReady_1st := TRUE;
            END_IF

            Robot.M_StartWareHousePickUpBox_ClampA(WareHouseSelect := E_WareHouse.WareHouseA,
                                                   Info            := ClampA_WareHouseCoordinates,
                                                   BoxReady_1st    := BoxReady_1st);
        ELSE
			tonTimeOut.IN:=FALSE;
			uiExecutingStep := 31080;
		END_IF
			tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF
		
	31080:
		Robot.M_ResetAllCommand(); // Clear command and go to place box
		IF NOT Robot._di1.Done THEN
			uiExecutingStep := 31100;// ClampA pickup finished, ClampB pickup start
		END_IF
		
    31100:
        IF NOT Robot._di1.Done THEN
            ClampB_WareHouseCoordinates := info.ClampB_Setting.WareHouseSetting;
            WareHouse.M_StartReloadBox(WareHouseSelect := E_WareHouse.WareHouseB, WarehouseCoordinates := ClampB_WareHouseCoordinates);

            IF WareHouse.bReloadBox_Completed THEN
                BoxReady_2nd := TRUE;
            END_IF

            Robot.M_StartWareHousePickUpBox_ClampB(WareHouseSelect := E_WareHouse.WareHouseB,
                                                   Info            := ClampB_WareHouseCoordinates,
                                                   BoxReady_2nd    := BoxReady_2nd);
        ELSE
			tonTimeOut.IN:=FALSE;
			uiExecutingStep := 31180;
		END_IF
			tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF
		
	31180:
		Robot.M_ResetAllCommand(); // Clear command and go to place box
		IF NOT Robot._di1.Done THEN
			uiExecutingStep := 80000;// ClampA pickup finished, ClampB pickup start
		END_IF
    32000: // ClampA pickup from WarehouseA, ClampB pickup from PulloutConveyor
        IF NOT Robot._DI1.Done THEN
            ClampA_WareHouseCoordinates := info.ClampA_Setting.WareHouseSetting;
            WareHouse.M_StartReloadBox(WareHouseSelect := E_WareHouse.WareHouseA, WarehouseCoordinates := ClampA_WareHouseCoordinates);

            IF WareHouse.bReloadBox_Completed THEN
                BoxReady_1st := TRUE;
            END_IF

            Robot.M_StartWareHousePickUpBox_ClampA(WareHouseSelect := E_WareHouse.WareHouseA,
                                                   Info            := ClampA_WareHouseCoordinates,
                                                   BoxReady_1st    := BoxReady_1st);
        ELSE
			tonTimeOut.IN:=FALSE;
			uiExecutingStep := 32080; // ClampA pickup finished, ClampB start	
        END_IF
			tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF
	32080:
		Robot.M_ResetAllCommand();
		// Clear command and go to place box
		IF NOT Robot._di1.Done THEN
			uiExecutingStep := 32100;// ClampA pickup finished, ClampB start
		END_IF
    32100:
        IF NOT Robot._di1.Done THEN
        DAS_CoreSys.MachineControl.fballocatearea.M_GetPulloutAccess(ControlAccess := E_RoundBeltControlAccess.FanucRobot);

            IF Info.ClampB_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I3_Slide THEN
                        DAS_CoreSys.MachineControl.fballocatearea
                            .M_StartStoragePulloutAction(CommandType := E_PullOutConveyorCommandType.SlideB_FeedIn_Ext,
                                                         CV_BackwardTIme := T#0S,
                                                         CV_ForwardTime := T#0S);
            ELSIF Info.ClampB_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I4_Slide THEN
                        DAS_CoreSys.MachineControl.fballocatearea
                            .M_StartStoragePulloutAction(CommandType := E_PullOutConveyorCommandType.SlideA_FeedIn_Ext,
                                                         CV_BackwardTIme := T#0S,
                                                         CV_ForwardTime := T#0S);
            ELSE
                Status := 'Not define PulloutConveyor Slide';
                _Error := TRUE;
            END_IF

            Robot.M_StartPullOutConveyorPickUpBox_ClampB(ClampB_Address := Info.ClampB_Setting.PullOutConveyorSetting,
                                                         BoxReady       := DAS_CoreSys.MachineControl.fballocatearea.fbPulloutCV.Done);
        ELSE
			tonTimeOut.IN:=FALSE;
			uiExecutingStep := 32180;
		END_IF
			tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF
	32180:
		robot.M_ResetAllCommand();
		IF NOT Robot._DI1.Done THEN
			uiExecutingStep := 80000;
		END_IF
    33000: // ClampA Pickup from WarehouseB, ClampB pickup from WarehouseA
        IF NOT Robot._di1.Done THEN
            ClampA_WareHouseCoordinates := info.ClampA_Setting.WareHouseSetting;
            WareHouse.M_StartReloadBox(WareHouseSelect := E_WareHouse.WareHouseB, WarehouseCoordinates := ClampA_WareHouseCoordinates);

            IF WareHouse.bReloadBox_Completed THEN
                BoxReady_1st := TRUE;
            END_IF

            Robot.M_StartWareHousePickUpBox_ClampA(WareHouseSelect := E_WareHouse.WareHouseB,
                                                   Info            := ClampA_WareHouseCoordinates,
                                                   BoxReady_1st    := BoxReady_1st);
        ELSE
			tonTimeOut.IN:=FALSE;
			uiExecutingStep := 33080;
		END_IF
				tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF
	33080:
		Robot.M_ResetAllCommand(); // Clear command and go to place box
		IF NOT Robot._DI1.Done THEN
                uiExecutingStep := 33100; // only place clampA
        END_IF
    33100:
        IF NOT Robot._di1.Done THEN
            ClampB_WareHouseCoordinates := info.ClampB_Setting.WareHouseSetting;
            WareHouse.M_StartReloadBox(WareHouseSelect := E_WareHouse.WareHouseA, WarehouseCoordinates := ClampB_WareHouseCoordinates);

            IF WareHouse.bReloadBox_Completed THEN
                BoxReady_2nd := TRUE;
            END_IF

            Robot.M_StartWareHousePickUpBox_ClampB(WareHouseSelect := E_WareHouse.WareHouseA,
                                                   Info            := ClampB_WareHouseCoordinates,
                                                   BoxReady_2nd    := BoxReady_2nd);
        ELSE
			Robot.M_ResetAllCommand(); // Clear command and go to place box
			IF NOT Robot._DI1.Done THEN
				tonTimeOut.IN:=FALSE;
				uiExecutingStep := 80000; // only place clampA
			END_IF
        END_IF
		tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Place Box timeout';
		END_IF
		
    34000: // ClampA pickup from WarehouseB, ClampB pickup from WarehouseB
        ClampA_WareHouseCoordinates := info.ClampA_Setting.WareHouseSetting;
        ClampB_WareHouseCoordinates := info.ClampB_Setting.WareHouseSetting;

        CASE uiPickUpBothStep OF
            0: // ClampA target slide move the box to front side
                WareHouse.M_StartReloadBox(WareHouseSelect := E_WareHouse.WareHouseB, WarehouseCoordinates := ClampA_WareHouseCoordinates);

                IF WareHouse.bReloadBox_Completed THEN
                    BoxReady_1st     := TRUE;
                    uiPickUpBothStep := 10;
                END_IF

            10: // wait Robot Allow continue
                IF Robot._DI1.Notification AND
                    NOT
                    WareHouse._stWarehouseList.BSide_Layers[ClampA_WareHouseCoordinates.Layer].stStatus.bSlides[ClampA_WareHouseCoordinates.Slide]
                    THEN
                    WareHouse.M_ResetReloadBox();

                    IF NOT WareHouse.bReloadBox_Completed THEN
                        uiPickUpBothStep := 20;
                    END_IF

                END_IF
            20: // ClampB target slide move the box to front slide
                WareHouse.M_StartReloadBox(WareHouseSelect := E_WareHouse.WareHouseB, WarehouseCoordinates := ClampB_WareHouseCoordinates);

                IF WareHouse.bReloadBox_Completed THEN
                    BoxReady_2nd     := TRUE;
                    uiPickUpBothStep := 99;
                END_IF
            99:
        // wait reset
        END_CASE

        Robot.M_StartWareHousePickUpBox_ClampBoth(WareHouseSelect := E_WareHouse.WareHouseB,
                                                  ClampA_Info     := ClampA_WareHouseCoordinates,
                                                  ClampB_Info     := ClampB_WareHouseCoordinates,
                                                  BoxReady_1st    := BoxReady_1st,
                                                  BoxReady_2nd    := BoxReady_2nd);

        IF Robot._DI1.Done THEN
			tonTimeOut.IN:=FALSE;
            uiExecutingStep := 80000; // go to place step
        END_IF
		
			tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF
		
    35000: // ClampA pickup from WarehouseB, ClampB pickup from PulloutConveyor
        IF NOT Robot._di1.Done THEN
        DAS_CoreSys.MachineControl.fballocatearea.M_GetPulloutAccess(ControlAccess := E_RoundBeltControlAccess.FanucRobot);

            IF Info.ClampA_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I3_Slide THEN
                        DAS_CoreSys.MachineControl.fballocatearea
                            .M_StartStoragePulloutAction(CommandType := E_PullOutConveyorCommandType.SlideB_FeedIn_Ext,
                                                         CV_BackwardTIme := T#0S,
                                                         CV_ForwardTime := T#0S);
            ELSIF Info.ClampA_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I4_Slide THEN
                        DAS_CoreSys.MachineControl.fballocatearea
                            .M_StartStoragePulloutAction(CommandType := E_PullOutConveyorCommandType.SlideA_FeedIn_Ext,
                                                         CV_BackwardTIme := T#0S,
                                                         CV_ForwardTime := T#0S);
            ELSE
                Status := 'Not define PulloutConveyor Slide';
                _Error := TRUE;
            END_IF

            Robot.M_StartPullOutConveyorPickUpBox_ClampA(ClampA_Address := Info.ClampA_Setting.PullOutConveyorSetting,
                                                         BoxReady       := DAS_CoreSys.MachineControl.fballocatearea.fbPulloutCV.Done);
        ELSE
            IF Robot.M_ResetPullOutConveyorPickUpBox_ClampA() THEN
            DAS_CoreSys.MachineControl.fballocatearea.M_StopStoragePulloutAction();
				tonTimeOut.IN:=FALSE;
                uiExecutingStep := 35100; // only place clampA
            END_IF
        END_IF;
			tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF
		
    35100:
        IF NOT Robot._di1.Done THEN
        DAS_CoreSys.MachineControl.fballocatearea.M_GetPulloutAccess(ControlAccess := E_RoundBeltControlAccess.FanucRobot);

            IF Info.ClampB_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I3_Slide THEN
                        DAS_CoreSys.MachineControl.fballocatearea
                            .M_StartStoragePulloutAction(CommandType := E_PullOutConveyorCommandType.SlideB_FeedIn_Ext,
                                                         CV_BackwardTIme := T#0S,
                                                         CV_ForwardTime := T#0S);
            ELSIF Info.ClampB_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I4_Slide THEN
                        DAS_CoreSys.MachineControl.fballocatearea
                            .M_StartStoragePulloutAction(CommandType := E_PullOutConveyorCommandType.SlideA_FeedIn_Ext,
                                                         CV_BackwardTIme := T#0S,
                                                         CV_ForwardTime := T#0S);
            ELSE
                Status := 'Not define PulloutConveyor Slide';
                _Error := TRUE;
            END_IF

            Robot.M_StartPullOutConveyorPickUpBox_ClampB(ClampB_Address := Info.ClampB_Setting.PullOutConveyorSetting,
                                                         BoxReady       := DAS_CoreSys.MachineControl.fballocatearea.fbPulloutCV.Done);
        ELSE
            IF Robot.M_ResetPullOutConveyorPickUpBox_ClampB() THEN
            DAS_CoreSys.MachineControl.fballocatearea.M_StopStoragePulloutAction();
				tonTimeOut.IN:=FALSE;
                uiExecutingStep := 80000; // only place clampA
            END_IF
        END_IF;
				tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF
		
    36000: // ClampA pickup from PulloutConveyor, ClampB pickup from WarehouseA
        IF NOT Robot._di1.Done THEN
        DAS_CoreSys.MachineControl.fballocatearea.M_GetPulloutAccess(ControlAccess := E_RoundBeltControlAccess.FanucRobot);

            IF Info.ClampA_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I3_Slide THEN
                        DAS_CoreSys.MachineControl.fballocatearea
                            .M_StartStoragePulloutAction(CommandType := E_PullOutConveyorCommandType.SlideB_FeedIn_Ext,
                                                         CV_BackwardTIme := T#0S,
                                                         CV_ForwardTime := T#0S);
            ELSIF Info.ClampA_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I4_Slide THEN
                        DAS_CoreSys.MachineControl.fballocatearea
                            .M_StartStoragePulloutAction(CommandType := E_PullOutConveyorCommandType.SlideA_FeedIn_Ext,
                                                         CV_BackwardTIme := T#0S,
                                                         CV_ForwardTime := T#0S);
            ELSE
                Status := 'Not define PulloutConveyor Slide';
                _Error := TRUE;
            END_IF

            Robot.M_StartPullOutConveyorPickUpBox_ClampA(ClampA_Address := Info.ClampA_Setting.PullOutConveyorSetting,
                                                         BoxReady       := DAS_CoreSys.MachineControl.fballocatearea.fbPulloutCV.Done);
        ELSE
			tonTimeOut.IN:=FALSE;
			uiExecutingStep := 36080;
		END_IF
				tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF
		
	36080:
		Robot.M_ResetAllCommand();
        DAS_CoreSys.MachineControl.fballocatearea.M_StopStoragePulloutAction();
		IF NOT Robot._di1.Done THEN
			uiExecutingStep := 36100; // only place clampA
		END_IF
    36100:
        IF NOT Robot._di1.Done THEN
            ClampB_WareHouseCoordinates := info.ClampB_Setting.WareHouseSetting;
            WareHouse.M_StartReloadBox(WareHouseSelect := E_WareHouse.WareHouseA, WarehouseCoordinates := ClampB_WareHouseCoordinates);

            IF WareHouse.bReloadBox_Completed THEN
                BoxReady_2nd := TRUE;
            END_IF

            Robot.M_StartWareHousePickUpBox_ClampB(WareHouseSelect := E_WareHouse.WareHouseA,
                                                   Info            := ClampB_WareHouseCoordinates,
                                                   BoxReady_2nd    := BoxReady_2nd);
        ELSE
			tonTimeOut.IN:=FALSE;
			uiExecutingStep := 36200;
		END_IF
				tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF
		
	36200:
		Robot.M_ResetAllCommand(); // Clear command and go to place box
		IF NOT Robot._DI1.Done THEN
			uiExecutingStep := 80000; //  place clampA and clampB
		END_IF 
    37000: // ClampA pickup from PulloutConveyor, ClampB pickup from WarehouseB
        IF NOT Robot._di1.Done THEN
        DAS_CoreSys.MachineControl.fballocatearea.M_GetPulloutAccess(ControlAccess := E_RoundBeltControlAccess.FanucRobot);

            IF Info.ClampA_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I3_Slide THEN
                        DAS_CoreSys.MachineControl.fballocatearea
                            .M_StartStoragePulloutAction(CommandType := E_PullOutConveyorCommandType.SlideB_FeedIn_Ext,
                                                         CV_BackwardTIme := T#0S,
                                                         CV_ForwardTime := T#0S);
            ELSIF Info.ClampA_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I4_Slide THEN
                        DAS_CoreSys.MachineControl.fballocatearea
                            .M_StartStoragePulloutAction(CommandType := E_PullOutConveyorCommandType.SlideA_FeedIn_Ext,
                                                         CV_BackwardTIme := T#0S,
                                                         CV_ForwardTime := T#0S);
            ELSE
                Status := 'Not define PulloutConveyor Slide';
                _Error := TRUE;
            END_IF

            Robot.M_StartPullOutConveyorPickUpBox_ClampA(ClampA_Address := Info.ClampA_Setting.PullOutConveyorSetting,
                                                         BoxReady       := DAS_CoreSys.MachineControl.fballocatearea.fbPulloutCV.Done);
        ELSE
			tonTimeOut.IN:=FALSE;
			uiExecutingStep := 37080;
		END_IF
					tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF
		
		
	37080:
		Robot.M_ResetAllCommand();
		IF NOT Robot._di1.Done THEN
			// Clear Pullout conveyor reload command
            DAS_CoreSys.MachineControl.fballocatearea.M_StopStoragePulloutAction();
			uiExecutingStep := 37100;
		END_IF
    37100:
        IF NOT Robot._di1.Done THEN
            ClampB_WareHouseCoordinates := info.ClampB_Setting.WareHouseSetting;
            WareHouse.M_StartReloadBox(WareHouseSelect := E_WareHouse.WareHouseB, WarehouseCoordinates := ClampB_WareHouseCoordinates);

            IF WareHouse.bReloadBox_Completed THEN
                BoxReady_2nd := TRUE;
            END_IF

            Robot.M_StartWareHousePickUpBox_ClampB(WareHouseSelect := E_WareHouse.WareHouseB,
                                                   Info            := ClampB_WareHouseCoordinates,
                                                   BoxReady_2nd    := BoxReady_2nd);
        ELSE
			tonTimeOut.IN:=FALSE;
			uiExecutingStep := 37180;
		END_IF
		tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Error :=TRUE;
			strStatus :='Pick Box timeout';
		END_IF
	37180:
		Robot.M_ResetAllCommand(); // Clear command and go to place box
		IF NOT Robot._di1.Done THEN
			uiExecutingStep := 80000; // only place clampA
		END_IF
    38000: // ClampBoth pickup from PulloutConveyor
        DAS_CoreSys.MachineControl.fballocatearea.M_GetPulloutAccess(ControlAccess := E_RoundBeltControlAccess.FanucRobot);

        CASE uiPickUpBothStep OF
            0: // ClampA target slide move the box to front side
                IF Info.ClampA_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I3_Slide THEN
                        DAS_CoreSys.MachineControl.fballocatearea
                            .M_StartStoragePulloutAction(CommandType := E_PullOutConveyorCommandType.SlideB_FeedIn_Ext,
                                                         CV_BackwardTIme := T#0S,
                                                         CV_ForwardTime := T#0S);
                ELSIF Info.ClampA_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I4_Slide THEN
                        DAS_CoreSys.MachineControl.fballocatearea
                            .M_StartStoragePulloutAction(CommandType := E_PullOutConveyorCommandType.SlideA_FeedIn_Ext,
                                                         CV_BackwardTIme := T#0S,
                                                         CV_ForwardTime := T#0S);
                ELSE
                    Status := 'Not define PulloutConveyor Slide';
                    _Error := TRUE;
                END_IF

                IF DAS_CoreSys.MachineControl.fballocatearea.fbpulloutcv.Done THEN
                    BoxReady_1st     := TRUE;
                    uiPickUpBothStep := 10;
                END_IF

            10: // wait Robot Allow continue
                IF Robot._DI1.Notification THEN
            		DAS_CoreSys.MachineControl.fballocatearea.M_StopStoragePulloutAction();

                    IF NOT DAS_CoreSys.MachineControl.fballocatearea.fbpulloutcv.Done THEN
                        uiPickUpBothStep := 20;
                    END_IF

                END_IF
            20: // ClampB target slide move the box to front slide
                IF Info.ClampB_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I3_Slide THEN
                        DAS_CoreSys.MachineControl.fballocatearea
                            .M_StartStoragePulloutAction(CommandType := E_PullOutConveyorCommandType.SlideB_FeedIn_Ext,
                                                         CV_BackwardTIme := T#0S,
                                                         CV_ForwardTime := T#0S);
                ELSIF Info.ClampB_Setting.PullOutConveyorSetting = E_PullOutConveyorAddress.I4_Slide THEN
                        DAS_CoreSys.MachineControl.fballocatearea
                            .M_StartStoragePulloutAction(CommandType := E_PullOutConveyorCommandType.SlideA_FeedIn_Ext,
                                                         CV_BackwardTIme := T#0S,
                                                         CV_ForwardTime := T#0S);
                ELSE
                    Status := 'Not define PulloutConveyor Slide';
                    _Error := TRUE;
                END_IF

                IF DAS_CoreSys.MachineControl.fballocatearea.fbpulloutcv.Done THEN
                    BoxReady_2nd     := TRUE;
                    uiPickUpBothStep := 99;
                END_IF
            99:
        // wait reset
        END_CASE

        Robot.M_StartPullOutConveyorPickUpBox_ClampBoth(ClampA_Address := Info.ClampA_Setting.PullOutConveyorSetting,
                                                        ClampB_Address := Info.ClampB_Setting.PullOutConveyorSetting,
                                                        BoxReady_1     := BoxReady_1st,
                                                        BoxReady_2     := BoxReady_2nd);

        IF Robot._DI1.Done THEN
			tonTimeOut.IN:=FALSE;
            uiExecutingStep := 80000; // go to place step
        END_IF
		
		tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Abort :=TRUE;	
			uiResumeStep:=38000;		
			strStatus :='Pick Box timeout';
		END_IF
    60000: // Only ClampA place box
        // Clear command
        WareHouse.M_ResetReloadBox();
        Robot.M_ResetAllCommand();

        // Check robot RSR1 not working
        IF NOT Robot._DI1.Done AND NOT (Robot._DI1.AbsMoveA OR Robot._DI1.AbsMoveB OR Robot._DI1.WarehouseA OR Robot._DI1.WarehouseB) THEN
            uiExecutingStep := 61000;
        END_IF
    61000: // Only ClampA place box Start
        IF NOT Robot._DI1.Done THEN
			IF NOT DiffSizeCV.InBackWard AND SameSizeCV.InBackWard THEN
				CASE Info.ClampA_Setting.PlaceArea OF
					E_FeedInEmptyBox_PlaceArea.DiffSizeConveyor:
					
            			DiffSizeCV.M_MoveForward();
					E_FeedInEmptyBox_PlaceArea.SameSizeConveyor:
						SameSizeCV.M_MoveForward();
				END_CASE

            	IF Input.bDifferentSizeCV_BoxDetect7_Sensor THEN
                	DiffSizeSlide_Clear := FALSE;
            	ELSE
                	DiffSizeSlide_Clear := TRUE;
            	END_IF

            	IF Input.bSameSizeCV_BoxNearStorageSensor THEN
                	SameSizeSlide_clear := FALSE;
            	ELSE
                	SameSizeSlide_clear := TRUE;
            	END_IF
			ELSE
					DiffSizeSlide_Clear := FALSE;
					SameSizeSlide_clear := FALSE;	
			END_IF
			
            Robot.M_StartMoveBoxToFeedInConveyor_ClampA(ConveyorSlideSelect := Info.ClampA_Setting.PlaceArea,
                                                        DiffSizeSlideClear  := DiffSizeSlide_Clear,
                                                        SameSizeSlideClear  := SameSizeSlide_clear);
        ELSE
			tonTimeOut.IN:=FALSE;
            uiExecutingStep := 99000; // Go to process end
        END_IF
		tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Abort :=TRUE;		
			uiResumeStep:=61000;	
			strStatus :='Place Box timeout';
		END_IF
    70000: // Only ClampB place box
        // Clear command
        WareHouse.M_ResetReloadBox();
        Robot.M_ResetAllCommand();

        // Check robot RSR1 not working
        IF NOT Robot._DI1.Done AND NOT (Robot._DI1.AbsMoveA OR Robot._DI1.AbsMoveB OR Robot._DI1.WarehouseA OR Robot._DI1.WarehouseB) THEN
            uiExecutingStep := 71000;
        END_IF
    71000:
        IF NOT Robot._DI1.Done THEN
			IF NOT DiffSizeCV.InBackWard AND SameSizeCV.InBackWard THEN
				CASE Info.ClampA_Setting.PlaceArea OF
					E_FeedInEmptyBox_PlaceArea.DiffSizeConveyor:
					
            			DiffSizeCV.M_MoveForward();
					E_FeedInEmptyBox_PlaceArea.SameSizeConveyor:
						SameSizeCV.M_MoveForward();
				END_CASE

    	        IF input.bDifferentSizeCV_BoxDetect7_Sensor THEN
        	        DiffSizeSlide_Clear := FALSE;
            	ELSE
                	DiffSizeSlide_Clear := TRUE;
            	END_IF

            	IF Input.bSameSizeCV_BoxNearStorageSensor THEN
                	SameSizeSlide_clear := FALSE;
            	ELSE
            	    SameSizeSlide_clear := TRUE;
          	  END_IF
			ELSE
					DiffSizeSlide_Clear := FALSE;
					SameSizeSlide_clear := FALSE;	
			END_IF
            Robot.M_StartMoveBoxToFeedInConveyor_ClampB(ConveyorSlideSelect := Info.ClampB_Setting.PlaceArea,
                                                        DiffSizeSlideClear  := DiffSizeSlide_Clear,
                                                        SameSizeSlideClear  := SameSizeSlide_clear);
        ELSE
			tonTimeOut.IN:=FALSE;
            uiExecutingStep := 99000; // Go to process end
        END_IF
		tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Abort :=TRUE;		
			uiResumeStep:=71000;	
			strStatus :='Place Box timeout';
		END_IF
    80000: // Both Clamp place box
        WareHouse.M_ResetReloadBox(); // Clear Warehouse reload command
        Robot.M_ResetAllCommand(); // Clear Fanuc Robot command
        IF NOT Robot._DI1.Done THEN
            uiExecutingStep := 81000;
        END_IF;
    81000:
			
        CASE uiPlaceBothStep OF
			
            0:                
                SlideClear_1st  := FALSE;
                SlideClear_2nd  := FALSE;
			IF NOT DiffSizeCV.InBackWard AND NOT SameSizeCV.InBackWard THEN
				CASE Info.ClampA_Setting.PlaceArea OF
					E_FeedInEmptyBox_PlaceArea.DiffSizeConveyor:
            			DiffSizeCV.M_MoveForward();
						uiPlaceBothStep := 10;
					E_FeedInEmptyBox_PlaceArea.SameSizeConveyor:
						SameSizeCV.M_MoveForward();
						uiPlaceBothStep := 10;
				END_CASE
			END_IF
            10:
                // ClampA place box
				
				CASE Info.ClampA_Setting.PlaceArea OF
					E_FeedInEmptyBox_PlaceArea.DiffSizeConveyor:
						IF NOT DiffSizeCV.InStopped  THEN
							DiffSizeCV.M_MoveForward();
						END_IF
						//uiPlaceBothStep := 10;
					E_FeedInEmptyBox_PlaceArea.SameSizeConveyor:
						IF  NOT SameSizeCV.InStopped  THEN
							SameSizeCV.M_MoveForward();
						END_IF
						//uiPlaceBothStep := 10;
				END_CASE

				
				IF	NOT DiffSizeCV.InStopped OR  NOT SameSizeCV.InStopped THEN
                	IF info.ClampA_Setting.PlaceArea = E_FeedInEmptyBox_PlaceArea.DiffSizeConveyor THEN
                    	IF Input.bDifferentSizeCV_BoxDetect7_Sensor THEN
                        	SlideClear_1st := FALSE;
                    	ELSE
                        	SlideClear_1st := TRUE;
                    	END_IF

                	ELSIF info.ClampA_Setting.PlaceArea = E_FeedInEmptyBox_PlaceArea.SameSizeConveyor THEN
                    	IF Input.bSameSizeCV_BoxNearStorageSensor THEN
                        	SlideClear_1st := FALSE;
                    	ELSE
                        	SlideClear_1st := TRUE;
                    	END_IF
                	END_IF
					IF SlideClear_1st AND NOT Robot._di1.ClampA_Sensor THEN
                		uiPlaceBothStep := 20;
					END_IF
				ELSE
					SlideClear_1st := FALSE;
				END_IF
            20:
				SlideClear_2nd := FALSE;
				tonPlaceSensorDelay.IN :=FALSE;
				IF NOT DiffSizeCV.InStopped THEN
					DiffSizeCV.M_MoveForward();
				END_IF
				IF NOT SameSizeCV.InStopped THEN
					SameSizeCV.M_MoveForward();
				END_IF
                IF ((info.ClampA_Setting.PlaceArea = E_FeedInEmptyBox_PlaceArea.DiffSizeConveyor) AND NOT Input.bDifferentSizeCV_BoxDetect7_Sensor) THEN
					 uiPlaceBothStep := 30;
                ELSIF ((info.ClampA_Setting.PlaceArea = E_FeedInEmptyBox_PlaceArea.SameSizeConveyor) AND NOT Input.bSameSizeCV_BoxDetect6_Sensor) THEN
                     uiPlaceBothStep := 30;
                END_IF
            30:
                // ClampB place box
				CASE Info.ClampB_Setting.PlaceArea OF
					E_FeedInEmptyBox_PlaceArea.DiffSizeConveyor:
						IF   DiffSizeCV.InStopped  THEN
							DiffSizeCV.M_MoveForward();
						END_IF
						//uiPlaceBothStep := 10;
					E_FeedInEmptyBox_PlaceArea.SameSizeConveyor:
						IF   SameSizeCV.InStopped  THEN
							SameSizeCV.M_MoveForward();
						END_IF
						//uiPlaceBothStep := 10;
				END_CASE
				IF	 NOT DiffSizeCV.InStopped OR NOT SameSizeCV.InStopped THEN
               		 IF info.ClampB_Setting.PlaceArea = E_FeedInEmptyBox_PlaceArea.DiffSizeConveyor THEN
                 	   IF Input.bDifferentSizeCV_BoxDetect7_Sensor THEN
						
                    	    SlideClear_2nd := FALSE;
                   		 ELSE                        
							tonPlaceSensorDelay.IN :=TRUE	;
								IF tonPlaceSensorDelay.Q THEN
									SlideClear_2nd := TRUE;
								END_IF
                   		 END_IF
					
               		 ELSIF info.ClampB_Setting.PlaceArea = E_FeedInEmptyBox_PlaceArea.SameSizeConveyor THEN
                 	   IF Input.bSameSizeCV_BoxNearStorageSensor THEN
                 	       SlideClear_2nd := FALSE;
                 	   ELSE
                        
							tonPlaceSensorDelay.IN :=TRUE	;
								IF tonPlaceSensorDelay.Q THEN
							SlideClear_2nd := TRUE;
								END_IF
                  		 END_IF
               			 END_IF
				END_IF
				
				IF SlideClear_2nd THEN
                	uiPlaceBothStep := 99;
					tonPlaceSensorDelay.IN :=FALSE;
				END_IF
			
            99:
        // wait reset
        END_CASE

        IF NOT Robot._DI1.Done THEN
            Robot.M_StartMoveBoxToFeedInConveyor_ClampBoth(ClampA_Address := info.ClampA_Setting.PlaceArea,
                                                           ClampB_Address := info.ClampB_Setting.PlaceArea,
                                                           SlideClear_1st := SlideClear_1st,
                                                           SlideClear_2nd := SlideClear_2nd);
        ELSE
			tonTimeOut.IN:=FALSE;
            uiExecutingStep := 99000;
        END_IF
		tonTimeOut.IN :=TRUE;		
		IF tonTimeOut.Q THEN
			tonTimeOut.IN:=FALSE;
			_Abort :=TRUE;	
			uiResumeStep:=81000;		
			strStatus :='Place Box timeout';
		END_IF
    99000: // process done
        // Stop FeedIn conveyor
		tonFeedInConveyorDelay.IN :=TRUE;		//Delay FeedInConveyor stop 500MS Edit by Min
		IF tonFeedInConveyorDelay.Q THEN
			DAS_CoreSys.MachineControl.fballocatearea.M_ReleasePulloutAccess(ControlAccess := E_RoundBeltControlAccess.FanucRobot);
			DiffSizeCV.M_MotorStop();
			SameSizeCV.M_MotorStop();
			tonFeedInConveyorDelay.IN :=FALSE;
			Status    := 'Process completed';
				IF DiffSizeCV.InStopped AND SameSizeCV.InStopped THEN
				 _Executed := TRUE;
				END_IF
		END_IF
END_CASE

IF _Executed THEN
    eState := STATE_DONE;
ELSIF NOT Execute THEN
    eState := STATE_RESETTING;
ELSIF Abort OR _Abort THEN
	//FUN_UniqueErrorCodeGenerator(iErrorID := ErrorID,UinqueErrorCode=>_UniqueErrorCode);
	eState := STATE_ABORTING;
ELSIF _Error THEN
	//FUN_UniqueErrorCodeGenerator(iErrorID := ErrorID,UinqueErrorCode=>_UniqueErrorCode);
	eState := STATE_ERROR;
	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_STATE_RESETTING" Id="{20c4f29b-b434-49c1-93c5-e406f0318f78}" FolderPath="State\">
      <Declaration><![CDATA[METHOD  M_STATE_RESETTING
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _Executed THEN Done :=TRUE ; END_IF
CASE uiResettingStep OF
	0:
		//DAS.fbStorageArea.M_InactivePulloutConveyorInternCtrl();
		Robot.M_ResetAllCommand();
		Robot.Bzone_AllowWork:=FALSE;
		DiffSizeCV.M_MotorStop();
		SameSizeCV.M_MotorStop();
		 DAS_CoreSys.MachineControl.fballocatearea.M_ReleasePulloutAccess(ControlAccess := E_RoundBeltControlAccess.FanucRobot);
		 DAS_CoreSys.MachineControl.fballocatearea.M_StopStoragePulloutAction();
		WareHouse.M_ResetFeedInBox();
		WareHouse.M_ResetReloadBox();
		uiResettingStep := 100;
	100:
		_ResetCompleted := TRUE;
END_CASE
IF _ResetCompleted THEN
    eState := STATE_DORMANT;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_FeedInEmptyBoxWithRobot">
      <LineId Id="9" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="42" Count="0" />
    </LineIds>
    <LineIds Name="FB_FeedInEmptyBoxWithRobot.A00_BasicUnits">
      <LineId Id="1" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
    </LineIds>
    <LineIds Name="FB_FeedInEmptyBoxWithRobot.M_CheckCommand">
      <LineId Id="30" Count="1" />
      <LineId Id="24" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="36" Count="0" />
    </LineIds>
    <LineIds Name="FB_FeedInEmptyBoxWithRobot.M_CheckUnitsNotBusy">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_FeedInEmptyBoxWithRobot.M_CheckUnitsReady">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_FeedInEmptyBoxWithRobot.M_ReloadBox">
      <LineId Id="18" Count="10" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_FeedInEmptyBoxWithRobot.M_ReloadPulloutConveyorBox">
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="2" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="24" Count="4" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_FeedInEmptyBoxWithRobot.M_SelectActionMode">
      <LineId Id="5" Count="1" />
      <LineId Id="10" Count="4" />
      <LineId Id="9" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="19" Count="3" />
      <LineId Id="18" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="30" Count="3" />
      <LineId Id="29" Count="0" />
      <LineId Id="34" Count="2" />
      <LineId Id="54" Count="3" />
      <LineId Id="37" Count="0" />
      <LineId Id="58" Count="2" />
      <LineId Id="62" Count="3" />
      <LineId Id="61" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="39" Count="14" />
      <LineId Id="38" Count="0" />
    </LineIds>
    <LineIds Name="FB_FeedInEmptyBoxWithRobot.M_STATE_ABORTED">
      <LineId Id="6" Count="2" />
      <LineId Id="24" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_FeedInEmptyBoxWithRobot.M_STATE_ABORTING">
      <LineId Id="6" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_FeedInEmptyBoxWithRobot.M_STATE_DONE">
      <LineId Id="6" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_FeedInEmptyBoxWithRobot.M_STATE_DORMANT">
      <LineId Id="6" Count="10" />
      <LineId Id="23" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="17" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_FeedInEmptyBoxWithRobot.M_STATE_ERROR">
      <LineId Id="11" Count="0" />
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_FeedInEmptyBoxWithRobot.M_STATE_EXECUTING">
      <LineId Id="9597" Count="368" />
      <LineId Id="10668" Count="0" />
      <LineId Id="9967" Count="1" />
      <LineId Id="10664" Count="3" />
      <LineId Id="9970" Count="0" />
      <LineId Id="10669" Count="3" />
      <LineId Id="9972" Count="130" />
      <LineId Id="10673" Count="0" />
      <LineId Id="10104" Count="1" />
      <LineId Id="10674" Count="3" />
      <LineId Id="10107" Count="0" />
      <LineId Id="10678" Count="3" />
      <LineId Id="10109" Count="8" />
      <LineId Id="10682" Count="0" />
      <LineId Id="10119" Count="12" />
      <LineId Id="10687" Count="0" />
      <LineId Id="10133" Count="1" />
      <LineId Id="10683" Count="3" />
      <LineId Id="10136" Count="0" />
      <LineId Id="10688" Count="3" />
      <LineId Id="10138" Count="8" />
      <LineId Id="10692" Count="0" />
      <LineId Id="10148" Count="12" />
      <LineId Id="10693" Count="0" />
      <LineId Id="10162" Count="1" />
      <LineId Id="10694" Count="3" />
      <LineId Id="10165" Count="0" />
      <LineId Id="10698" Count="3" />
      <LineId Id="10167" Count="19" />
      <LineId Id="10702" Count="0" />
      <LineId Id="10188" Count="32" />
      <LineId Id="10703" Count="0" />
      <LineId Id="10222" Count="1" />
      <LineId Id="10704" Count="3" />
      <LineId Id="10225" Count="0" />
      <LineId Id="10708" Count="3" />
      <LineId Id="10227" Count="22" />
      <LineId Id="10712" Count="0" />
      <LineId Id="10251" Count="29" />
      <LineId Id="10713" Count="0" />
      <LineId Id="10282" Count="3" />
      <LineId Id="10714" Count="3" />
      <LineId Id="10287" Count="0" />
      <LineId Id="10718" Count="3" />
      <LineId Id="10289" Count="11" />
      <LineId Id="10724" Count="0" />
      <LineId Id="10302" Count="7" />
      <LineId Id="10725" Count="3" />
      <LineId Id="10311" Count="0" />
      <LineId Id="10729" Count="3" />
      <LineId Id="10313" Count="41" />
      <LineId Id="10586" Count="0" />
      <LineId Id="10588" Count="1" />
      <LineId Id="10355" Count="0" />
      <LineId Id="10590" Count="1" />
      <LineId Id="10587" Count="0" />
      <LineId Id="10356" Count="41" />
      <LineId Id="10592" Count="7" />
      <LineId Id="10400" Count="42" />
      <LineId Id="10601" Count="2" />
      <LineId Id="10605" Count="0" />
      <LineId Id="10609" Count="0" />
      <LineId Id="10606" Count="1" />
      <LineId Id="10610" Count="0" />
      <LineId Id="10608" Count="0" />
      <LineId Id="10600" Count="0" />
      <LineId Id="10447" Count="1" />
      <LineId Id="10622" Count="0" />
      <LineId Id="10624" Count="1" />
      <LineId Id="10635" Count="2" />
      <LineId Id="10627" Count="1" />
      <LineId Id="10638" Count="2" />
      <LineId Id="10630" Count="1" />
      <LineId Id="10623" Count="0" />
      <LineId Id="10452" Count="27" />
      <LineId Id="10641" Count="2" />
      <LineId Id="10480" Count="6" />
      <LineId Id="10651" Count="11" />
      <LineId Id="10491" Count="55" />
      <LineId Id="10663" Count="0" />
      <LineId Id="10547" Count="19" />
      <LineId Id="1683" Count="0" />
    </LineIds>
    <LineIds Name="FB_FeedInEmptyBoxWithRobot.M_STATE_RESETTING">
      <LineId Id="26" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="43" Count="3" />
      <LineId Id="38" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="13" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>