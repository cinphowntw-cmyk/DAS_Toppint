<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_MachineControl" Id="{e3b1bb4d-882f-4a96-a73d-3761a8a6d18d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MachineControl EXTENDS FB_ModeBase_V2 IMPLEMENTS I_UnitState
VAR_INPUT
    INPUT            : REFERENCE TO ST_InputTable;
    OUTPUT           : REFERENCE TO ST_OutputTable;
    EnableSimulation : BOOL       := FALSE	;
    DataDirect       : E_DataFrom := E_DataFrom.Remote;
END_VAR
VAR_OUTPUT
    Error               : BOOL;
    ErrorID             : DINT;
    ErrMsg              : T_MaxString;
    CylinderStatus      : ST_CylinderStatus;
    MotorStatus         : ST_MotorStatus;
    StorageRobot_EStop  : BOOL;
    ShippingRobot_EStop : BOOL;
    MachineHomed        : BOOL;
    // Machine OpPannel 
    Machine_Estop : BOOL;
    Machine_Start : BOOL;
    Machine_Stop  : BOOL;
    Machine_Reset : BOOL;
END_VAR
VAR
    // C# HMI handshake
    fbHmiHandShakeController : FB_HmiHandShake;

    // internal Output
    InternalOutput : ST_OutputTable;

    // Componets setup parameter
    CurrentData : ST_SetupPara;

    // Current Manual Command
    AllocateManualCommand   : ST_Manual_Allocated;
    StorageManualCommand    : ST_Manual_Storage;
    ShippingManualCommand   : ST_Manual_Shipping;
    AllocateHalfAutoCommand : REFERENCE TO ST_HalfAuto_Allocated;
    // Area controller
    fbAllocateArea : FB_AllocateAreaWithRoundbelt;
    fbStorageArea  : FB_StorageArea;
    fbShippingArea : FB_ShippingArea;

    // Service controller
    TableMove : FB_TableMove;
	fbMachineHoming : FB_MachineHoming;
    // Componets
    Cylinder           : UNI_CylinderList;
    Motor              : UNI_MotorList;
    FanucRobot         : UNI_FanucRobotList;
    CylinderManualCtrl : ARRAY[1..53] OF FB_CylinderManualCtrl;
	MotorManualCtrl    : ARRAY[1..26] OF 	FB_MotorManualCtrl;
    // Wheelhouse Sensor
    WheelhouseSensor : UNI_HMI_WheelHouseInput;

    bCheckMotorWork   : BOOL;
    Service_Handshake : ST_HMI_Handshake; // To read legacy HMI data
    StorageService    : ST_StorageService;
    AllocateService   : ST_AllocateService;
    ShippingService   : ST_ShippingService;
	
    Allocate_EStop			: BOOL;
    Storage_EStop  			: BOOL;
	Allocate_EStopEdgeDetect : FB_EdgeDetect;
    Storage_EstopEdgeDetect  : FB_EdgeDetect;
	
	bStorage_AirPressure 	: BOOL;
	// ErrorHandler
	fbErrorHandler 		:FB_ErrorHandler;
	ErrorTableInitDone 	: BOOL;
	E_StopEdgeDetect	: FB_EdgeDetect;
	StartEdgeDetect 	: FB_EdgeDetect;
	ResetEdgeDetect 	: FB_EdgeDetect;
	StopEdgeDetect 		: FB_EdgeDetect;
	bSafetyDoorOpen 	: BOOL;
	fbBlink_05 			: BLINK;
	bStopMem 			: BOOL;
    fb_AllocateSignalTower : FB_SignalTower;
    fb_StorageSignalTower  : FB_SignalTower;
	_RedLamp 			: BOOL;
	_YellowLamp			: BOOL;
	_GreenLamp 			: BOOL;
	_Buzz 				: BOOL;
	bTest2 				: BOOL;
	
	//Btn ctrl
	tofResetDelay	:TOF;
	tofStopDelay	:TOF;
	tofStartDelay	:TOF;
	
	tonDelayErrorHandle : TON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Implement PackML State Machine
SUPER^();
tonDelayErrorHandle(IN:=TRUE, PT:=T#5S); // Delay 5s after PLC run then check error
A00_BaseUnits();
A01_Cylinder();
A02_Motor();
A03_FanucRobot();
A04_OpPannel();
A05_Light();
IF tonDelayErrorHandle.Q THEN
	A10_ErrorHandler();
END_IF

IF NOT EnableSimulation THEN
    OUTPUT := InternalOutput;
ELSE
    M_ClearOutput();
END_IF

WheelhouseSensor.arWheelHouseInput := ComModbusRTU.arr485sensor;

IF DataDirect = E_DataFrom.Local THEN
    CurrentData := GVL_Machine.LocalData;
ELSIF DataDirect = E_DataFrom.Remote THEN
    CurrentData := GVL_Machine.RemoteData;
    AllocateManualCommand := GVL_HMI.Allocated.Manual;
    StorageManualCommand := GVL_HMI.Storage.Manual;
    ShippingManualCOmmand := GVL_HMI.Shipping.Manual;
    AllocateHalfAutoCommand REF= GVL_HMI.Allocated.HalfAuto;
END_IF
gvl_ads.MachineState := FUN_MachineState(
	Error:= xError, 
	Estop:= FALSE, 
	Stop:= Machine_Stop, 
	Reset:= Machine_Reset OR tofResetDelay.Q , 
	Start:= Machine_Start,
	eMachineState :=  gvl_ads.MachineState,
	HomeBusy:= fbMachineHoming.xBusy, 
	Homed:= MachineHomed, 
	MachineMode:= eModeCurrent);]]></ST>
    </Implementation>
    <Folder Name="Privite" Id="{d682bfe9-5092-4ebc-ab4e-f307c30573aa}">
      <Folder Name="Auto" Id="{78745a11-46b7-4748-8552-0bd2d3b5d4a6}" />
      <Folder Name="HalfAuto" Id="{99264d16-3d80-4746-9baf-d0c3138ca219}" />
      <Folder Name="HMI_Handshake" Id="{bf445d25-6f86-4a62-a9d1-6ae38a86fa4a}" />
      <Folder Name="Manual" Id="{25c13a10-8a56-4119-be12-75ef3638d999}" />
    </Folder>
    <Folder Name="Service" Id="{97187d91-1374-40f7-a3bd-68a8e6324174}" />
    <Folder Name="States" Id="{6cde1021-8eff-4f8d-b6d5-827659856462}" />
    <Action Name="A00_BaseUnits" Id="{c7c8760f-56d1-4aff-9f21-aabead4ce11d}">
      <Implementation>
        <ST><![CDATA[fbStorageArea(eModeCommand :=,
              eStateCommand :=,
			  FanucRobot := FanucRobot.List.StorageRobot,
              PackTag := GVL_Machine.PackTags[UnitNo.Storage],
			  Service := StorageService,
			  WheelhouseSensor :=WheelhouseSensor,
			  Motor := Motor,
			  Input := INPUT,
			  Output := InternalOutput,
			  Reset := Machine_Reset,
			  Stop := Machine_Stop,
			  bStopMem:=bStopMem,
			  Cylinder:= Cylinder,
			  CurrentData :=CurrentData,
              eModeCurrent => GVL_Machine.PackTags[UnitNo.Storage].Status.UnitModeCurrent,
              eStateCurrent => GVL_Machine.PackTags[UnitNo.Storage].Status.StateCurrent);

fbAllocateArea(eModeCommand :=,
               eStateCommand :=,
			   INPUT :=INPUT,
			   OUTPUT :=InternalOutput,
			   Cylinder := Cylinder,
			   Motor := Motor,
			   Reset := Machine_Reset,
			   Stop := Machine_Stop,
			   bStopMem:=bStopMem,
			   CurrentData := CurrentData,
               PackTag := GVL_Machine.PackTags[UnitNo.Allocate],
			   service := AllocateService,
               eModeCurrent => GVL_Machine.PackTags[UnitNo.Allocate].Status.UnitModeCurrent,
               eStateCurrent => GVL_Machine.PackTags[UnitNo.Allocate].Status.StateCurrent);

fbShippingArea(eModeCommand :=,
               eStateCommand :=,
			   FanucRobot:= FanucRobot.List.ShippingRobot,
			   INPUT :=INPUT,
			   Motor := Motor,
			   Reset := Machine_Reset,
			   Stop := Machine_Stop,
			   bStopMem:=bStopMem,
               PackTag := GVL_Machine.PackTags[UnitNo.Shipping],
			   Service := ShippingService,
               eModeCurrent => GVL_Machine.PackTags[UnitNo.Shipping].Status.UnitModeCurrent,
               eStateCurrent => GVL_Machine.PackTags[UnitNo.Shipping].Status.StateCurrent);

fbHmiHandShakeController(xEnable := TRUE,CylinderStatus := CylinderStatus,MotorStatus:=MotorStatus,FanucRobot := FanucRobot);

fbMachineHoming(
	xDone=> , 
	xBusy=> , 
	xError=> , 
	xExecute:= , 
	xAbort:= , 
	AllocateHome:= fbAllocateArea.fbAllocateHome, 
	StorageHome:= fbStorageArea.fbStorageHoming, 
	ShippingHome:= fbShippingArea.fbShippingHoming, 
	AllocateHomed:= fbAllocateArea.Homed, 
	StorageHomed:= fbStorageArea.Homed, 
	ShippingHomed:= fbShippingArea.Homed, 
	Homed:= MachineHomed, 
	TimeOut:= , 
	xAborted=> , 
	iErrorID=> , 
	ErrorMsg=> );
	
fbErrorHandler(
	xDone=> , 
	xBusy=> , 
	xError=> , 
	AlarmList:= PackTag.Admin.Alarm,
	AlarmHistory := PackTag.Admin.AlarmHistory, 
	HMI_AlarmMonitorList:= GVL_ADS.AlarmAllocation, 
	MaxRecords:= 1000, 
	ResetAllAlarms:= ,
	Reset := Machine_Reset OR tofResetDelay.Q , 
	EnableLogging:= , 
	ActiveAlarmCount=> , 
	TotalRecords=> , 
	SystemStatus=> );
	
fbBlink_05(ENABLE:= TRUE, TIMELOW:= T#0.25S, TIMEHIGH:= T#0.25S, OUT=> );
Allocate_EStopEdgeDetect(xInput := INPUT.bAllocate_EStopPb);
Storage_EstopEdgeDetect(xInput := INPUT.bStorage_EstopPb);]]></ST>
      </Implementation>
    </Action>
    <Action Name="A01_Cylinder" Id="{03239220-aa5d-45c0-a759-6c4a9a88feea}">
      <Implementation>
        <ST><![CDATA[cylinder.List.fbUpCV_FeedInPress1(xDone =>,
                                  xBusy =>,
                                  xError =>CylinderStatus.UpCV_FeedInPress1.Error,
                                  xEnable :=,
                                  FrontSensor :=,
                                  RearSensor :=,
                                  SetupPara := CurrentData.Cylinders.UpCV_FeedInPress1,
                                  CurrentCylinderType =>,
                                  InFrontPosition => CylinderStatus.UpCV_FeedInPress1.InFrontPosition,
                                  InRearPosition =>CylinderStatus.UpCV_FeedInPress1.InRearPosition,
                                  ExtendOutput => InternalOutput.bUpCV_FeedInPress1_Valve,
                                  RetractOutput =>);

cylinder.List.fbUpCV_FeedInPress2(xDone =>,
                                  xBusy =>,
                                  xError =>CylinderStatus.UpCV_FeedInPress2.Error,
                                  xEnable :=,
                                  FrontSensor :=,
                                  RearSensor :=,
                                  SetupPara := CurrentData.Cylinders.UpCV_FeedInPress2,
                                  CurrentCylinderType =>,
                                  InFrontPosition =>CylinderStatus.UpCV_FeedInPress2.InFrontPosition,
                                  InRearPosition =>CylinderStatus.UpCV_FeedInPress2.InRearPosition,
                                  ExtendOutput => InternalOutput.bUpCV_FeedInPress2_Valve,
                                  RetractOutput =>);

cylinder.List.fbUpCV_DiameterPress(xDone =>,
                                   xBusy =>,
                                   xError =>CylinderStatus.UpCV_DiameterPress.Error,
                                   xEnable :=,
                                   FrontSensor :=,
                                   RearSensor :=,
                                   SetupPara := CurrentData.Cylinders.UpCV_DiameterPress,
                                   CurrentCylinderType =>,
                                   InFrontPosition =>CylinderStatus.UpCV_DiameterPress.InFrontPosition,
                                   InRearPosition =>CylinderStatus.UpCV_DiameterPress.InRearPosition,
                                   ExtendOutput => InternalOutput.bUpCV_DiameterPress_Valve,
                                   RetractOutput =>);

cylinder.List.fbUpCV_CamaraPress1(xDone =>,
                                  xBusy =>,
                                  xError =>CylinderStatus.UpCV_CamaraPress1.Error,
                                  xEnable :=,
                                  FrontSensor :=,
                                  RearSensor :=,
                                  SetupPara := CurrentData.Cylinders.UpCV_CamaraPress1,
                                  CurrentCylinderType =>,
                                  InFrontPosition =>CylinderStatus.UpCV_CamaraPress1.InFrontPosition,
                                  InRearPosition =>CylinderStatus.UpCV_CamaraPress1.InRearPosition,
                                  ExtendOutput => InternalOutput.bUpCV_CamaraPress1_Valve,
                                  RetractOutput =>);

cylinder.List.fbUpCV_CamaraPress2(xDone =>,
                                  xBusy =>,
                                  xError =>CylinderStatus.UpCV_CamaraPress2.Error,
                                  xEnable :=,
                                  FrontSensor :=,
                                  RearSensor :=,
                                  SetupPara := CurrentData.Cylinders.UpCV_CamaraPress2,
                                  CurrentCylinderType =>,
                                  InFrontPosition =>CylinderStatus.UpCV_CamaraPress2.InFrontPosition,
                                  InRearPosition =>CylinderStatus.UpCV_CamaraPress2.InRearPosition,
                                  ExtendOutput => InternalOutput.bUpCV_CamaraPress2_Valve,
                                  RetractOutput =>);

cylinder.List.fbUpCV_CamaraPress3(xDone =>,
                                  xBusy =>,
                                  xError =>CylinderStatus.UpCV_CamaraPress3.Error,
                                  xEnable :=,
                                  FrontSensor :=,
                                  RearSensor :=,
                                  SetupPara := CurrentData.Cylinders.UpCV_CamaraPress3,
                                  CurrentCylinderType =>,
                                  InFrontPosition =>CylinderStatus.UpCV_CamaraPress3.InFrontPosition,
                                  InRearPosition =>CylinderStatus.UpCV_CamaraPress3.InRearPosition,
                                  ExtendOutput => InternalOutput.bUpCV_CamaraPress3_Valve,
                                  RetractOutput =>);

cylinder.List.fbUpCV_CamaraPress4(xDone =>, 
                                  xBusy =>,
                                  xError =>CylinderStatus.UpCV_CamaraPress4.Error,
                                  xEnable :=,
                                  FrontSensor :=,
                                  RearSensor :=,
                                  SetupPara := CurrentData.Cylinders.UpCV_CamaraPress4,
                                  CurrentCylinderType =>,
                                  InFrontPosition =>CylinderStatus.UpCV_CamaraPress4.InFrontPosition,
                                  InRearPosition =>CylinderStatus.UpCV_CamaraPress4.InRearPosition,
                                  ExtendOutput => InternalOutput.bUpCV_CamaraPress4_Valve,
                                  RetractOutput =>);

cylinder.List.fbUpCV_Block1(xDone =>,
                            xBusy =>,
                            xError =>CylinderStatus.UpCV_Block1.Error,
                            xEnable :=,
                            FrontSensor :=,
                            RearSensor := INPUT.bUpCV_Block1_RearSensor,
                            SetupPara := CurrentData.Cylinders.UpCV_Block1,
                            CurrentCylinderType =>,
                            InFrontPosition =>CylinderStatus.UpCV_Block1.InFrontPosition,
                            InRearPosition =>CylinderStatus.UpCV_Block1.InRearPosition,
                            ExtendOutput => InternalOutput.bUpCV_Block1_Up_Valve,
                            RetractOutput => InternalOutput.bUpCV_Block1_Down_Valve);
cylinder.List.fbUpCV_Block1.IsDoubleValve := TRUE;

cylinder.List.fbUpCV_Block2(xDone =>,
                            xBusy =>,
                            xError =>CylinderStatus.UpCV_Block2.Error,
                            xEnable :=,
                            FrontSensor :=,
                            RearSensor := INPUT.bUpCV_Block2_RearSensor,
                            SetupPara := CurrentData.Cylinders.UpCV_Block2,
                            CurrentCylinderType =>,
                            InFrontPosition =>CylinderStatus.UpCV_Block2.InFrontPosition,
                            InRearPosition =>CylinderStatus.UpCV_Block2.InRearPosition,
                            ExtendOutput => InternalOutput.bUpCV_Block2_Up_Valve,
                            RetractOutput => InternalOutput.bUpCV_Block2_Down_Valve);
cylinder.List.fbUpCV_Block2.IsDoubleValve := TRUE;

cylinder.List.fbUpCV_Block3(xDone =>,
                            xBusy =>,
                            xError =>CylinderStatus.UpCV_Block3.Error,
                            xEnable :=,
                            FrontSensor :=,
                            RearSensor := INPUT.bUpCV_Block3_RearSensor,
                            SetupPara := CurrentData.Cylinders.UpCV_Block3,
                            CurrentCylinderType =>,
                            InFrontPosition =>CylinderStatus.UpCV_Block3.InFrontPosition,
                            InRearPosition =>CylinderStatus.UpCV_Block3.InRearPosition,
                            ExtendOutput => InternalOutput.bUpCV_Block3_Up_Valve,
                            RetractOutput => InternalOutput.bUpCV_Block3_Down_Valve);
cylinder.List.fbUpCV_Block3.IsDoubleValve := TRUE;

cylinder.List.fbUpCV_DiameterHoriz(xDone =>,
                                   xBusy =>,
                                   xError =>CylinderStatus.UpCV_DiameterHoriz.Error,
                                   xEnable :=,
                                   FrontSensor := INPUT.bUpCV_DiameterHoriz_FrontSensor,
                                   RearSensor := INPUT.bUpCV_DiameterHoriz_RearSensor,
                                   SetupPara := CurrentData.Cylinders.UpCV_DiameterHoriz,
                                   CurrentCylinderType =>,
                                   InFrontPosition =>CylinderStatus.UpCV_DiameterHoriz.InFrontPosition,
                                   InRearPosition =>CylinderStatus.UpCV_DiameterHoriz.InRearPosition,
                                   ExtendOutput => InternalOutput.bUpCV_DiameterHoriz_Extend_Valve,
                                   RetractOutput => InternalOutput.bUpCV_DiameterHoriz_Retract_Valve);
cylinder.List.fbUpCV_DiameterHoriz.IsDoubleValve := TRUE;

cylinder.List.fbUpCV_DiameterVert(xDone =>,
                                  xBusy =>,
                                  xError =>CylinderStatus.UpCV_DiameterVert.Error,
                                  xEnable :=,
                                  FrontSensor := INPUT.bUpCV_DiameterVert_FrontSensor,
                                  RearSensor := INPUT.bUpCV_DiameterVert_RearSensor,
                                  SetupPara := CurrentData.Cylinders.UpCV_DiameterVert,
                                  CurrentCylinderType =>,
                                  InFrontPosition =>CylinderStatus.UpCV_DiameterVert.InFrontPosition,
                                  InRearPosition =>CylinderStatus.UpCV_DiameterVert.InRearPosition,
                                  ExtendOutput => InternalOutput.bUpCV_DiameterVert_Valve,
                                  RetractOutput =>);

cylinder.List.fbUpCV_DiameterClamp(xDone =>,
                                   xBusy =>,
                                   xError =>CylinderStatus.UpCV_DiameterClamp.Error,
                                   xEnable :=,
                                   FrontSensor :=,
                                   RearSensor :=,
                                   SetupPara := CurrentData.Cylinders.UpCV_DiameterClamp,
                                   CurrentCylinderType =>,
                                   InFrontPosition =>CylinderStatus.UpCV_DiameterClamp.InFrontPosition,
                                   InRearPosition =>CylinderStatus.UpCV_DiameterClamp.InRearPosition,
                                   ExtendOutput => InternalOutput.bUpCV_DiameterClamp_Close_Valve,
                                   RetractOutput => InternalOutput.bUpCV_DiameterClamp_Open_Valve);
cylinder.List.fbUpCV_DiameterClamp.IsDoubleValve := TRUE;

cylinder.List.fbStackPush(xDone =>,
                          xBusy =>,
                          xError =>CylinderStatus.StackPush.Error,
                          xEnable :=,
                          FrontSensor := INPUT.bStackPush_Pusher_FrontSensor,
                          RearSensor := INPUT.bStackPush_Pusher_RearSensor,
                          SetupPara := CurrentData.Cylinders.StackPush,
                          CurrentCylinderType =>,
                          InFrontPosition =>CylinderStatus.StackPush.InFrontPosition,
                          InRearPosition =>CylinderStatus.StackPush.InRearPosition,
                          ExtendOutput => InternalOutput.bStackPush_Valve,
                          RetractOutput =>);

cylinder.List.fbPullOutCV_AsidePress1(xDone =>,
                                      xBusy =>,
                                      xError =>CylinderStatus.PullOutCV_AsidePress1.Error,
                                      xEnable :=,
                                      FrontSensor :=,
                                      RearSensor :=,
                                      SetupPara := CurrentData.Cylinders.PullOutCV_AsidePress1,
                                      CurrentCylinderType =>,
                                      InFrontPosition =>CylinderStatus.PullOutCV_AsidePress1.InFrontPosition,
                                      InRearPosition =>CylinderStatus.PullOutCV_AsidePress1.InRearPosition,
                                      ExtendOutput => InternalOutput.bPullOutCV_AsidePress1_Valve,
                                      RetractOutput =>);

cylinder.List.fbPullOutCV_AsidePress2(xDone =>,
                                      xBusy =>,
                                      xError =>CylinderStatus.PullOutCV_AsidePress2.Error,
                                      xEnable :=,
                                      FrontSensor :=,
                                      RearSensor :=,
                                      SetupPara := CurrentData.Cylinders.PullOutCV_AsidePress2,
                                      CurrentCylinderType =>,
                                      InFrontPosition =>CylinderStatus.PullOutCV_AsidePress2.InFrontPosition,
                                      InRearPosition =>CylinderStatus.PullOutCV_AsidePress2.InRearPosition,
                                      ExtendOutput => InternalOutput.bPullOutCV_AsidePress2_Valve,
                                      RetractOutput =>);

cylinder.List.fbPullOutCV_AsideBlock(xDone =>,
                                     xBusy =>,
                                     xError =>CylinderStatus.PullOutCV_AsideBlock.Error,
                                     xEnable :=,
                                     FrontSensor :=,
                                     RearSensor := INPUT.bPullOutCV_AsideBlock_RearSensor,
                                     SetupPara := CurrentData.Cylinders.PullOutCV_AsideBlock,
                                     CurrentCylinderType =>,
                                     InFrontPosition =>CylinderStatus.PullOutCV_AsideBlock.InFrontPosition,
                                     InRearPosition =>CylinderStatus.PullOutCV_AsideBlock.InRearPosition,
                                     ExtendOutput => InternalOutput.bPullOutCV_AsideBlock_Valve,
                                     RetractOutput =>);

cylinder.List.fbPullOutCV_BsidePress1(xDone =>,
                                      xBusy =>,
                                      xError =>CylinderStatus.PullOutCV_BsidePress1.Error,
                                      xEnable :=,
                                      FrontSensor :=,
                                      RearSensor :=,
                                      SetupPara := CurrentData.Cylinders.PullOutCV_BsidePress1,
                                      CurrentCylinderType =>,
                                      InFrontPosition =>CylinderStatus.PullOutCV_BsidePress1.InFrontPosition,
                                      InRearPosition =>CylinderStatus.PullOutCV_BsidePress1.InRearPosition,
                                      ExtendOutput => InternalOutput.bPullOutCV_BsidePress1_Valve,
                                      RetractOutput =>);

cylinder.List.fbPullOutCV_BsidePress2(xDone =>,
                                      xBusy =>,
                                      xError =>CylinderStatus.PullOutCV_BsidePress2.Error,
                                      xEnable :=,
                                      FrontSensor :=,
                                      RearSensor :=,
                                      SetupPara := CurrentData.Cylinders.PullOutCV_BsidePress2,
                                      CurrentCylinderType =>,
                                      InFrontPosition =>CylinderStatus.PullOutCV_BsidePress2.InFrontPosition,
                                      InRearPosition =>CylinderStatus.PullOutCV_BsidePress2.InRearPosition,
                                      ExtendOutput => InternalOutput.bPullOutCV_BsidePress2_Valve,
                                      RetractOutput =>);

cylinder.List.fbPullOutCV_BsideBlock(xDone =>,
                                     xBusy =>,
                                     xError =>CylinderStatus.PullOutCV_BsideBlock.Error,
                                     xEnable :=,
                                     FrontSensor :=,
                                     RearSensor := INPUT.bPullOutCV_BsideBlock_RearSensor,
                                     SetupPara := CurrentData.Cylinders.PullOutCV_BsideBlock,
                                     CurrentCylinderType =>,
                                     InFrontPosition =>CylinderStatus.PullOutCV_BsideBlock.InFrontPosition,
                                     InRearPosition =>CylinderStatus.PullOutCV_BsideBlock.InRearPosition,
                                     ExtendOutput => InternalOutput.bPullOutCV_BsideBlock_Valve,
                                     RetractOutput =>);

cylinder.List.fbLowCV_Press1(xDone =>,
                             xBusy =>,
                             xError =>CylinderStatus.LowCV_Press1.Error,
                             xEnable :=,
                             FrontSensor :=,
                             RearSensor :=,
                             SetupPara := CurrentData.Cylinders.LowCV_Press1,
                             CurrentCylinderType =>,
                             InFrontPosition =>CylinderStatus.LowCV_Press1.InFrontPosition,
                             InRearPosition =>CylinderStatus.LowCV_Press1.InRearPosition,
                             ExtendOutput => InternalOutput.bLowCV_Press1_Valve,
                             RetractOutput =>);

cylinder.List.fbLowCV_Press2(xDone =>,
                             xBusy =>,
                             xError =>CylinderStatus.LowCV_Press2.Error,
                             xEnable :=,
                             FrontSensor :=,
                             RearSensor :=,
                             SetupPara := CurrentData.Cylinders.LowCV_Press2,
                             CurrentCylinderType =>,
                             InFrontPosition =>CylinderStatus.LowCV_Press2.InFrontPosition,
                             InRearPosition =>CylinderStatus.LowCV_Press2.InRearPosition,
                             ExtendOutput => InternalOutput.bLowCV_Press2_Valve,
                             RetractOutput =>);

cylinder.List.fbLowCV_Press3(xDone =>,
                             xBusy =>,
                             xError =>CylinderStatus.LowCV_Press3.Error,
                             xEnable :=,
                             FrontSensor :=,
                             RearSensor :=,
                             SetupPara := CurrentData.Cylinders.LowCV_Press3,
                             CurrentCylinderType =>,
                             InFrontPosition =>CylinderStatus.LowCV_Press3.InFrontPosition,
                             InRearPosition =>CylinderStatus.LowCV_Press3.InRearPosition,
                             ExtendOutput => InternalOutput.bLowCV_Press3_Valve,
                             RetractOutput =>);

cylinder.List.fbLowCV_Press4(xDone =>,
                             xBusy =>,
                             xError =>CylinderStatus.LowCV_Press4.Error,
                             xEnable :=,
                             FrontSensor :=,
                             RearSensor :=,
                             SetupPara := CurrentData.Cylinders.LowCV_Press4,
                             CurrentCylinderType =>,
                             InFrontPosition =>CylinderStatus.LowCV_Press4.InFrontPosition,
                             InRearPosition =>CylinderStatus.LowCV_Press4.InRearPosition,
                             ExtendOutput => InternalOutput.bLowCV_Press4_Valve,
                             RetractOutput =>);

cylinder.List.fbLowCV_Block1(xDone =>,
                             xBusy =>,
                             xError =>CylinderStatus.LowCV_Block1.Error,
                             xEnable :=,
                             FrontSensor :=,
                             RearSensor := INPUT.bLowCV_Block1_RearSensor,
                             SetupPara := CurrentData.Cylinders.LowCV_Block1,
                             CurrentCylinderType =>,
                             InFrontPosition =>CylinderStatus.LowCV_Block1.InFrontPosition,
                             InRearPosition =>CylinderStatus.LowCV_Block1.InRearPosition,
                             ExtendOutput => InternalOutput.bLowCV_Block1_Down_Valve,
                             RetractOutput => InternalOutput.bLowCV_Block1_Up_Valve);
cylinder.List.fbLowCV_Block1.IsDoubleValve := TRUE;

cylinder.List.fbLowCV_Block2(xDone =>,
                             xBusy =>,
                             xError =>CylinderStatus.LowCV_Block2.Error,
                             xEnable :=,
                             FrontSensor :=,
                             RearSensor := INPUT.bLowCV_Block2_RearSensor,
                             SetupPara := CurrentData.Cylinders.LowCV_Block2,
                             CurrentCylinderType =>,
                             InFrontPosition =>CylinderStatus.LowCV_Block2.InFrontPosition,
                             InRearPosition =>CylinderStatus.LowCV_Block2.InRearPosition,
                             ExtendOutput => InternalOutput.bLowCV_Block2_Down_Valve,
                             RetractOutput => InternalOutput.bLowCV_Block2_Up_Valve);
cylinder.List.fbLowCV_Block2.IsDoubleValve := TRUE;

cylinder.List.fbAllocateRobot_LeftVert1(xDone =>,
                                        xBusy =>,
                                        xError =>CylinderStatus.AllocateRobot_LeftVert1.Error,
                                        xEnable :=,
                                        FrontSensor := INPUT.bAllocateRobot_LeftVert1_LowSensor,
                                        RearSensor := INPUT.bAllocateRobot_LeftVert1_HighSensor,
                                        SetupPara := CurrentData.Cylinders.AllocateRobot_LeftVert1,
                                        CurrentCylinderType =>,
                                        InFrontPosition =>CylinderStatus.AllocateRobot_LeftVert1.InFrontPosition,
                                        InRearPosition =>CylinderStatus.AllocateRobot_LeftVert1.InRearPosition,
                                        ExtendOutput => InternalOutput.bAllocateRobot_LeftVert1_Valve,
                                        RetractOutput =>);

cylinder.List.fbAllocateRobot_LeftVert2(xDone =>,
                                        xBusy =>,
                                        xError =>CylinderStatus.AllocateRobot_LeftVert2.Error,
                                        xEnable :=,
                                        FrontSensor := input.bAllocateRobot_LeftVert2_LowSensor,
                                        RearSensor := input.bAllocateRobot_LeftVert2_HighSensor,
                                        SetupPara := CurrentData.Cylinders.AllocateRobot_LeftVert2,
                                        CurrentCylinderType =>,
                                        InFrontPosition =>CylinderStatus.AllocateRobot_LeftVert2.InFrontPosition,
                                        InRearPosition =>CylinderStatus.AllocateRobot_LeftVert2.InRearPosition,
                                        ExtendOutput => InternalOutput.bAllocateRobot_LeftVert2_Valve,
                                        RetractOutput =>);

cylinder.List.fbAllocateRobot_RightVert1(xDone =>,
                                         xBusy =>,
                                         xError =>CylinderStatus.AllocateRobot_RightVert1.Error,
                                         xEnable :=,
                                         FrontSensor := input.bAllocateRobot_RightVert1_LowSensor,
                                         RearSensor := input.bAllocateRobot_RightVert1_HighSensor,
                                         SetupPara := CurrentData.Cylinders.AllocateRobot_RightVert1,
                                         CurrentCylinderType =>,
                                         InFrontPosition =>CylinderStatus.AllocateRobot_RightVert1.InFrontPosition,
                                         InRearPosition =>CylinderStatus.AllocateRobot_RightVert1.InRearPosition,
                                         ExtendOutput => InternalOutput.bAllocateRobot_RightVert1_Valve,
                                         RetractOutput =>);

cylinder.List.fbAllocateRobot_RightVert2(xDone =>,
                                         xBusy =>,
                                         xError =>CylinderStatus.AllocateRobot_RightVert2.Error,
                                         xEnable :=,
                                         FrontSensor := input.bAllocateRobot_RightVert2_LowSensor,
                                         RearSensor := input.bAllocateRobot_RightVert2_HighSensor,
                                         SetupPara := CurrentData.Cylinders.AllocateRobot_RightVert2,
                                         CurrentCylinderType =>,
                                         InFrontPosition =>CylinderStatus.AllocateRobot_RightVert2.InFrontPosition,
                                         InRearPosition =>CylinderStatus.AllocateRobot_RightVert2.InRearPosition,
                                         ExtendOutput => InternalOutput.bAllocateRobot_RightVert2_Valve,
                                         RetractOutput =>);

cylinder.List.fbAllocateRobot_LeftClamp1(xDone =>,
                                         xBusy =>,
                                         xError =>CylinderStatus.AllocateRobot_LeftClamp1.Error,
                                         xEnable :=,
                                         FrontSensor :=,
                                         RearSensor :=,
                                         SetupPara := CurrentData.Cylinders.AllocateRobot_LeftClamp1,
                                         CurrentCylinderType =>,
                                         InFrontPosition =>CylinderStatus.AllocateRobot_LeftClamp1.InFrontPosition,
                                         InRearPosition =>CylinderStatus.AllocateRobot_LeftClamp1.InRearPosition,
                                         ExtendOutput => InternalOutput.bAllocateRobot_LeftClamp1_Close_Valve,
                                         RetractOutput => InternalOutput.bAllocateRobot_LeftClamp1_Open_Valve);
cylinder.List.fbAllocateRobot_LeftClamp1.IsDoubleValve := TRUE;

cylinder.List.fbAllocateRobot_LeftClamp2(xDone =>,
                                         xBusy =>,
                                         xError =>CylinderStatus.AllocateRobot_LeftClamp2.Error,
                                         xEnable :=,
                                         FrontSensor :=,
                                         RearSensor :=,
                                         SetupPara := CurrentData.Cylinders.AllocateRobot_LeftClamp2,
                                         CurrentCylinderType =>,
                                         InFrontPosition =>CylinderStatus.AllocateRobot_LeftClamp2.InFrontPosition,
                                         InRearPosition =>CylinderStatus.AllocateRobot_LeftClamp2.InRearPosition,
                                         ExtendOutput => InternalOutput.bAllocateRobot_LeftClamp2_Close_Valve,
                                         RetractOutput => InternalOutput.bAllocateRobot_LeftClamp2_Open_Valve);
cylinder.List.fbAllocateRobot_LeftClamp2.IsDoubleValve := TRUE;

cylinder.List.fbAllocateRobot_RightClamp1(xDone =>,
                                          xBusy =>,
                                          xError =>CylinderStatus.AllocateRobot_RightClamp1.Error,
                                          xEnable :=,
                                          FrontSensor :=,
                                          RearSensor :=,
                                          SetupPara := CurrentData.Cylinders.AllocateRobot_RightClamp1,
                                          CurrentCylinderType =>,
                                          InFrontPosition =>CylinderStatus.AllocateRobot_RightClamp1.InFrontPosition,
                                          InRearPosition =>CylinderStatus.AllocateRobot_RightClamp1.InRearPosition,
                                          ExtendOutput => InternalOutput.bAllocateRobot_RightClamp1_Close_Valve,
                                          RetractOutput => InternalOutput.bAllocateRobot_RightClamp1_Open_Valve);
cylinder.List.fbAllocateRobot_RightClamp1.IsDoubleValve := TRUE;

cylinder.List.fbAllocateRobot_RightClamp2(xDone =>,
                                          xBusy =>,
                                          xError =>CylinderStatus.AllocateRobot_RightClamp2.Error,
                                          xEnable :=,
                                          FrontSensor :=,
                                          RearSensor :=,
                                          SetupPara := CurrentData.Cylinders.AllocateRobot_RightClamp2,
                                          CurrentCylinderType =>,
                                          InFrontPosition =>CylinderStatus.AllocateRobot_RightClamp2.InFrontPosition,
                                          InRearPosition =>CylinderStatus.AllocateRobot_RightClamp2.InRearPosition,
                                          ExtendOutput => InternalOutput.bAllocateRobot_RightClamp2_Close_Valve,
                                          RetractOutput => InternalOutput.bAllocateRobot_RightClamp2_Open_Valve);
cylinder.List.fbAllocateRobot_RightClamp2.IsDoubleValve := TRUE;

cylinder.List.fbRoundBelt_WorkZone_Press(xDone =>,
                                         xBusy =>,
                                         xError =>CylinderStatus.RoundBelt_WorkZone_Press.Error,
                                         xEnable :=,
                                         FrontSensor :=,
                                         RearSensor := input.bRoundBelt_WorkZonePress_RearSensor,
                                         SetupPara := CurrentData.Cylinders.RoundBelt_WorkZone_Press,
                                         CurrentCylinderType =>,
                                         InFrontPosition =>CylinderStatus.RoundBelt_WorkZone_Press.InFrontPosition,
                                         InRearPosition =>CylinderStatus.RoundBelt_WorkZone_Press.InRearPosition,
                                         ExtendOutput => InternalOutput.bRoundBelt_WorkZone_Press_Valve,
                                         RetractOutput =>);

cylinder.List.fbRoundBelt_WorkZone_Plug(xDone =>,
                                        xBusy =>,
                                        xError =>CylinderStatus.RoundBelt_WorkZone_Plug.Error,
                                        xEnable :=,
                                        FrontSensor := input.bRoundBelt_WorkZonePlug_frontSensor,
                                        RearSensor := INPUT.bRoundBelt_WorkZonePlug_RearSensor,
                                        SetupPara := CurrentData.Cylinders.RoundBelt_WorkZone_Plug,
                                        CurrentCylinderType =>,
                                        InFrontPosition =>CylinderStatus.RoundBelt_WorkZone_Plug.InFrontPosition,
                                        InRearPosition =>CylinderStatus.RoundBelt_WorkZone_Plug.InRearPosition,
                                        ExtendOutput => InternalOutput.bRoundBelt_WorkZone_Plug_Valve,
                                        RetractOutput =>);

cylinder.List.fbRoundBelt_ChargeZone_Plug(xDone =>,
                                          xBusy =>,
                                          xError =>CylinderStatus.RoundBelt_ChargeZone_Plug.Error,
                                          xEnable :=,
                                          FrontSensor := INPUT.bRoundBelt_ChangeZonePlug_FrontSensor,
                                          RearSensor := input.bRoundBelt_ChangeZonePlug_RearSensor,
                                          SetupPara := CurrentData.Cylinders.RoundBelt_ChargeZone_Plug,
                                          CurrentCylinderType =>,
                                          InFrontPosition =>CylinderStatus.RoundBelt_ChargeZone_Plug.InFrontPosition,
                                          InRearPosition =>CylinderStatus.RoundBelt_ChargeZone_Plug.InRearPosition,
                                          ExtendOutput => InternalOutput.bRoundBelt_ChargeZone_Plug_Valve,
                                          RetractOutput =>);

cylinder.List.fbRoundBelt_TransmitCVZone_Plug(xDone =>,
                                              xBusy =>,
                                              xError =>CylinderStatus.RoundBelt_TransmitCVZone_Plug.Error,
                                              xEnable :=,
                                              FrontSensor := input.bRoundBelt_TransmitCVZonePlug_FrontSensor,
                                              RearSensor := INPUT.bRoundBelt_TransmitCVZonePlug_RearSensor,
                                              SetupPara := CurrentData.Cylinders.RoundBelt_TransmitCVZone_Plug,
                                              CurrentCylinderType =>,
                                              InFrontPosition =>CylinderStatus.RoundBelt_TransmitCVZone_Plug.InFrontPosition,
                                              InRearPosition =>CylinderStatus.RoundBelt_TransmitCVZone_Plug.InRearPosition,
                                              ExtendOutput => InternalOutput.bRoundBelt_TransmitCVZone_Plug_Valve,
                                              RetractOutput =>);

cylinder.List.fbOutRobot_AsideVert(xDone =>,
                                   xBusy =>,
                                   xError =>CylinderStatus.OutRobot_AsideVert.Error,
                                   xEnable :=,
                                   FrontSensor := INPUT.bOutRobot_AsideVert_LowSensor,
                                   RearSensor := input.bOutRobot_AsideVert_highSensor,
                                   SetupPara := CurrentData.Cylinders.OutRobot_AsideVert,
                                   CurrentCylinderType =>,
                                   InFrontPosition =>CylinderStatus.OutRobot_AsideVert.InFrontPosition,
                                   InRearPosition =>CylinderStatus.OutRobot_AsideVert.InRearPosition,
                                   ExtendOutput => InternalOutput.bOutRobot_AsideVert_Valve,
                                   RetractOutput =>);

cylinder.List.fbOutRobot_BsideVert(xDone =>,
                                   xBusy =>,
                                   xError =>CylinderStatus.OutRobot_BsideVert.Error,
                                   xEnable :=,
                                   FrontSensor := input.bOutRobot_BsideVert_LowSensor,
                                   RearSensor := INPUT.bOutRobot_BsideVert_HighSensor,
                                   SetupPara := CurrentData.Cylinders.OutRobot_BsideVert,
                                   CurrentCylinderType =>,
                                   InFrontPosition =>CylinderStatus.OutRobot_BsideVert.InFrontPosition,
                                   InRearPosition =>CylinderStatus.OutRobot_BsideVert.InRearPosition,
                                   ExtendOutput => InternalOutput.bOutRobot_BsideVert_Valve,
                                   RetractOutput =>);

cylinder.List.fbOutRobot_AsideClamp(xDone =>,
                                    xBusy =>,
                                    xError =>CylinderStatus.OutRobot_AsideClamp.Error,
                                    xEnable :=,
                                    FrontSensor :=,
                                    RearSensor := input.bOutRobot_AsideClamp_RearSensor,
                                    SetupPara := CurrentData.Cylinders.OutRobot_AsideClamp,
                                    CurrentCylinderType =>,
                                    InFrontPosition =>CylinderStatus.OutRobot_AsideClamp.InFrontPosition,
                                    InRearPosition =>CylinderStatus.OutRobot_AsideClamp.InRearPosition,
                                    ExtendOutput => InternalOutput.bOutRobot_AsideClamp_Close_Valve,
                                    RetractOutput => InternalOutput.bOutRobot_AsideClamp_Open_Valve);
cylinder.List.fbOutRobot_AsideClamp.IsDoubleValve := TRUE;

cylinder.List.fbOutRobot_BsideClamp(xDone =>,
                                    xBusy =>,
                                    xError =>CylinderStatus.OutRobot_BsideClamp.Error,
                                    xEnable :=,
                                    FrontSensor :=,
                                    RearSensor := input.bOutRobot_BsideClamp_RearSensor,
                                    SetupPara := CurrentData.Cylinders.OutRobot_BsideClamp,
                                    CurrentCylinderType =>,
                                    InFrontPosition =>CylinderStatus.OutRobot_BsideClamp.InFrontPosition,
                                    InRearPosition =>CylinderStatus.OutRobot_BsideClamp.InRearPosition,
                                    ExtendOutput => InternalOutput.bOutRobot_BsideClamp_Close_Valve,
                                    RetractOutput => InternalOutput.bOutRobot_BsideClamp_Open_Valve);
cylinder.List.fbOutRobot_BsideClamp.IsDoubleValve := TRUE;

cylinder.List.fbTransmitCV_CamaraHoriz(xDone =>,
                                       xBusy =>,
                                       xError =>CylinderStatus.TransmitCV_CamaraHoriz.Error,
                                       xEnable :=,
                                       FrontSensor :=input.bTransmit_CamaraHorizDifferentSizeSide_Sensor,
                                       RearSensor := input.bTransmit_CamaraHorizSameSizeSide_Sensor,
                                       SetupPara := CurrentData.Cylinders.TransmitCV_CamaraHoriz,
                                       CurrentCylinderType =>,
                                       InFrontPosition =>CylinderStatus.TransmitCV_CamaraHoriz.InFrontPosition,
                                       InRearPosition =>CylinderStatus.TransmitCV_CamaraHoriz.InRearPosition,
                                       ExtendOutput => InternalOutput.bTransmitCV_CamaraHorizDifferentSide_Valve,
                                       RetractOutput => InternalOutput.bTransmitCV_CamaraHorizSameSizeSide_Valve);
cylinder.List.fbTransmitCV_CamaraHoriz.IsDoubleValve := TRUE;

cylinder.List.fbDifferentSizeCV_Press2(xDone =>,
                                       xBusy =>,
                                       xError =>CylinderStatus.DifferentSizeCV_Press2.Error,
                                       xEnable :=,
                                       FrontSensor :=,
                                       RearSensor :=,
                                       SetupPara := CurrentData.Cylinders.DifferentSizeCV_Press2,
                                       CurrentCylinderType =>,
                                       InFrontPosition =>CylinderStatus.DifferentSizeCV_Press2.InFrontPosition,
                                       InRearPosition =>CylinderStatus.DifferentSizeCV_Press2.InRearPosition,
                                       ExtendOutput => InternalOutput.bDifferentSizeCV_Press2_Valve,
                                       RetractOutput =>);

cylinder.List.fbDifferentSizeCV_Press1(xDone =>,
                                       xBusy =>,
                                       xError =>CylinderStatus.DifferentSizeCV_Press1.Error,
                                       xEnable :=,
                                       FrontSensor :=,
                                       RearSensor :=,
                                       SetupPara := CurrentData.Cylinders.DifferentSizeCV_Press1,
                                       CurrentCylinderType =>,
                                       InFrontPosition =>CylinderStatus.DifferentSizeCV_Press1.InFrontPosition,
                                       InRearPosition =>CylinderStatus.DifferentSizeCV_Press1.InRearPosition,
                                       ExtendOutput => InternalOutput.bDifferentSizeCV_Press1_Valve,
                                       RetractOutput =>);

cylinder.List.fbDifferentSizeCV_Block1(xDone =>,
                                       xBusy =>,
                                       xError =>CylinderStatus.DifferentSizeCV_Block1.Error,
                                       xEnable :=,
                                       FrontSensor :=,
                                       RearSensor := INPUT.bDifferentCV_Block_RearSensor,
                                       SetupPara := CurrentData.Cylinders.DifferentSizeCV_Block1,
                                       CurrentCylinderType =>,
                                       InFrontPosition =>CylinderStatus.DifferentSizeCV_Block1.InFrontPosition,
                                       InRearPosition =>CylinderStatus.DifferentSizeCV_Block1.InRearPosition,
                                       ExtendOutput => InternalOutput.bDifferentSizeCV_Block1_Valve,
                                       RetractOutput =>);

cylinder.List.fbSameSizeCV_Press4(xDone =>,
                                  xBusy =>,
                                  xError =>CylinderStatus.SameSizeCV_Press4.Error,
                                  xEnable :=,
                                  FrontSensor :=,
                                  RearSensor :=,
                                  SetupPara := CurrentData.Cylinders.SameSizeCV_Press4,
                                  CurrentCylinderType =>,
                                  InFrontPosition =>CylinderStatus.SameSizeCV_Press4.InFrontPosition,
                                  InRearPosition =>CylinderStatus.SameSizeCV_Press4.InRearPosition,
                                  ExtendOutput => InternalOutput.bSameSizeCV_Press4_Valve,
                                  RetractOutput =>);

cylinder.List.fbSameSizeCV_Press3(xDone =>,
                                  xBusy =>,
                                  xError =>CylinderStatus.SameSizeCV_Press3.Error,
                                  xEnable :=,
                                  FrontSensor :=,
                                  RearSensor :=,
                                  SetupPara := CurrentData.Cylinders.SameSizeCV_Press3,
                                  CurrentCylinderType =>,
                                  InFrontPosition =>CylinderStatus.SameSizeCV_Press3.InFrontPosition,
                                  InRearPosition =>CylinderStatus.SameSizeCV_Press3.InRearPosition,
                                  ExtendOutput => InternalOutput.bSameSizeCV_Press3_Valve,
                                  RetractOutput =>);

cylinder.List.fbSameSizeCV_Press2(xDone =>,
                                  xBusy =>,
                                  xError =>CylinderStatus.SameSizeCV_Press2.Error,
                                  xEnable :=,
                                  FrontSensor :=,
                                  RearSensor :=,
                                  SetupPara := CurrentData.Cylinders.SameSizeCV_Press2,
                                  CurrentCylinderType =>,
                                  InFrontPosition =>CylinderStatus.SameSizeCV_Press2.InFrontPosition,
                                  InRearPosition =>CylinderStatus.SameSizeCV_Press2.InRearPosition,
                                  ExtendOutput => InternalOutput.bSameSizeCV_Press2_Valve,
                                  RetractOutput =>);

cylinder.List.fbSameSizeCV_Press1(xDone =>,
                                  xBusy =>,
                                  xError =>CylinderStatus.SameSizeCV_Press1.Error,
                                  xEnable :=,
                                  FrontSensor :=,
                                  RearSensor :=,
                                  SetupPara := CurrentData.Cylinders.SameSizeCV_Press1,
                                  CurrentCylinderType =>,
                                  InFrontPosition =>CylinderStatus.SameSizeCV_Press1.InFrontPosition,
                                  InRearPosition =>CylinderStatus.SameSizeCV_Press1.InRearPosition,
                                  ExtendOutput => InternalOutput.bSameSizeCV_Press1_Valve,
                                  RetractOutput =>);

cylinder.List.fbSameSizeCV_Block2(xDone =>,
                                  xBusy =>,
                                  xError =>CylinderStatus.SameSizeCV_Block2.Error,
                                  xEnable :=,
                                  FrontSensor :=,
                                  RearSensor := input.bSameSizeCVBlock2_RearSensor,
                                  SetupPara := CurrentData.Cylinders.SameSizeCV_Block2,
                                  CurrentCylinderType =>,
                                  InFrontPosition =>CylinderStatus.SameSizeCV_Block2.InFrontPosition,
                                  InRearPosition =>CylinderStatus.SameSizeCV_Block2.InRearPosition,
                                  ExtendOutput => InternalOutput.bSameSizeCV_Block2_Valve,
                                  RetractOutput =>);

cylinder.List.fbSameSizeCV_Block1(xDone =>,
                                  xBusy =>,
                                  xError =>CylinderStatus.SameSizeCV_Block1.Error,
                                  xEnable :=,
                                  FrontSensor :=,
                                  RearSensor := input.bSameSizeCVBlock1_RearSensor,
                                  SetupPara := CurrentData.Cylinders.SameSizeCV_Block1,
                                  CurrentCylinderType =>,
                                  InFrontPosition =>CylinderStatus.SameSizeCV_Block1.InFrontPosition,
                                  InRearPosition =>CylinderStatus.SameSizeCV_Block1.InRearPosition,
                                  ExtendOutput => InternalOutput.bSameSizeCV_Block1_Valve,
                                  RetractOutput =>);

cylinder.List.fbTurntable_Press(xDone =>,
                                xBusy =>,
                                xError =>CylinderStatus.Turntable_Press.Error,
                                xEnable :=,
                                FrontSensor :=,
                                RearSensor := input.bTurnTable_Press_RearSensor,
                                SetupPara := CurrentData.Cylinders.Turntable_Press,
                                CurrentCylinderType =>,
                                InFrontPosition =>CylinderStatus.Turntable_Press.InFrontPosition,
                                InRearPosition =>CylinderStatus.Turntable_Press.InRearPosition,
                                ExtendOutput => InternalOutput.bTurntable_Press_Valve,
                                RetractOutput =>);
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A02_Motor" Id="{5b2083a4-a76e-49c8-96ac-9e1562db4135}">
      <Implementation>
        <ST><![CDATA[Motor.List.WareHouseCV_10(xDone =>,
                          xBusy =>,
                          xError => MotorStatus.WareHouseCV_10.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_10.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_10.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_10.InStopped,
                          ForWardOutput => InternalOutput.bWareHouseCV10_Fwd,
                          BackWardOutput => InternalOutput.bWareHouseCV10_Rev);

Motor.List.WareHouseCV_09(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_09.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_09.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_09.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_09.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV9_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV9_Rev);

Motor.List.WareHouseCV_08(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_08.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_08.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_08.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_08.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV8_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV8_Rev);

Motor.List.WareHouseCV_07(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_07.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_07.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_07.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_07.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV7_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV7_Rev);

Motor.List.WareHouseCV_06(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_06.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_06.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_06.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_06.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV6_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV6_Rev);

Motor.List.WareHouseCV_05(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_05.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_05.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_05.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_05.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV5_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV5_Rev);

Motor.List.WareHouseCV_04(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_04.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_04.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_04.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_04.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV4_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV4_Rev);

Motor.List.WareHouseCV_03(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_03.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_03.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_03.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_03.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV3_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV3_Rev);

Motor.List.WareHouseCV_02(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_02.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_02.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_02.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_02.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV2_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV2_Rev);

Motor.List.WareHouseCV_01(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_01.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_01.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_01.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_01.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV1_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV1_Rev);

Motor.List.WareHouseCV_20(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_20.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_20.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_20.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_20.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV20_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV20_Rev);

Motor.List.WareHouseCV_19(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_19.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_19.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_19.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_19.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV19_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV19_Rev);

Motor.List.WareHouseCV_18(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_18.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_18.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_18.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_18.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV18_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV18_Rev);

Motor.List.WareHouseCV_17(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_17.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_17.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_17.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_17.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV17_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV17_Rev);

Motor.List.WareHouseCV_16(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_16.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_16.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_16.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_16.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV16_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV16_Rev);

Motor.List.WareHouseCV_15(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_15.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_15.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_15.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_15.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV15_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV15_Rev);

Motor.List.WareHouseCV_14(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_14.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_14.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_14.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_14.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV14_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV14_Rev);

Motor.List.WareHouseCV_13(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_13.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_13.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_13.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_13.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV13_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV13_Rev);

Motor.List.WareHouseCV_12(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_12.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_12.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_12.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_12.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV12_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV12_Rev);

Motor.List.WareHouseCV_11(xDone =>,
                          xBusy =>,
                          xError =>MotorStatus.WareHouseCV_11.Error,
                          xEnable :=,
                          OverLoadSignal :=,
                          SetupPara :=,
                          InForWard =>MotorStatus.WareHouseCV_11.InForward,
                          InBackWard =>MotorStatus.WareHouseCV_11.InBackward,
                          InStopped =>MotorStatus.WareHouseCV_11.InStopped,
                          ForWardOutput =>InternalOutput.bWareHouseCV11_Fwd,
                          BackWardOutput =>InternalOutput.bWareHouseCV11_Rev);

Motor.List.UpCV(xDone =>,
                xBusy =>,
                xError =>MotorStatus.UpCV.Error,
                xEnable :=,
                OverLoadSignal :=,
                SetupPara :=,
                InForWard =>MotorStatus.UpCV.InForward,
                InBackWard =>MotorStatus.UpCV.InBackward,
                InStopped =>MotorStatus.UpCV.InStopped,
                ForWardOutput =>InternalOutput.bUpCV_Fwd,
                BackWardOutput =>InternalOutput.bUpCV_Rev);

Motor.List.LowCV(xDone =>,
                xBusy =>,
                xError =>MotorStatus.LowCV.Error,
                xEnable :=,
                OverLoadSignal :=,
                SetupPara :=,
                InForWard =>MotorStatus.LowCV.InForward,
                InBackWard =>MotorStatus.LowCV.InBackward,
                InStopped =>MotorStatus.LowCV.InStopped,
                ForWardOutput =>InternalOutput.bLowCV_Fwd,
                BackWardOutput =>InternalOutput.bLowCV_Rev);

Motor.List.PullOutCV_A(xDone =>,
						xBusy =>,
						xError =>MotorStatus.PullOutCV_A.Error,
						xEnable :=,
						OverLoadSignal :=,
						SetupPara :=,
						InForWard =>MotorStatus.PullOutCV_A.InForward,
						InBackWard =>MotorStatus.PullOutCV_A.InBackward,
						InStopped =>MotorStatus.PullOutCV_A.InStopped,
						ForWardOutput =>InternalOutput.bPullOutCV_A_Fwd,
						BackWardOutput =>InternalOutput.bPullOutCV_A_Rev);

Motor.List.PullOutCV_B(xDone =>,
						xBusy =>,
						xError =>MotorStatus.PullOutCV_B.Error,
						xEnable :=,
						OverLoadSignal :=,
						SetupPara :=,
						InForWard =>MotorStatus.PullOutCV_B.InForward,
						InBackWard =>MotorStatus.PullOutCV_B.InBackward,
						InStopped =>MotorStatus.PullOutCV_B.InStopped,
						ForWardOutput =>InternalOutput.bPullOutCV_B_Fwd,
						BackWardOutput =>InternalOutput.bPullOutCV_B_Rev);

Motor.List.TransmitSameSideCV(xDone =>,
								xBusy =>,
								xError =>MotorStatus.TransmitSameSideCV.Error,
								xEnable :=,
								OverLoadSignal :=,
								SetupPara :=,
								InForWard =>MotorStatus.TransmitSameSideCV.InForward,
								InBackWard =>MotorStatus.TransmitSameSideCV.InBackward,
								InStopped =>MotorStatus.TransmitSameSideCV.InStopped,
								ForWardOutput =>InternalOutput.bTransmitCV_SameSizeSide_Fwd,
								BackWardOutput =>InternalOutput.bTransmitCV_SameSide_Rev);

Motor.List.TransmitDifferentSideCV(xDone =>,
									xBusy =>,
									xError =>MotorStatus.TransmitDifferentSideCV.Error,
									xEnable :=,
									OverLoadSignal :=,
									SetupPara :=,
									InForWard =>MotorStatus.TransmitDifferentSideCV.InForward,
									InBackWard =>MotorStatus.TransmitDifferentSideCV.InBackward,
									InStopped =>MotorStatus.TransmitDifferentSideCV.InStopped,
									ForWardOutput =>InternalOutput.bTransmitCV_DifferentSide_Fwd,
									BackWardOutput =>InternalOutput.bTransmitCV_DifferentSide_Rev);
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A03_FanucRobot" Id="{bb200e91-8356-4c56-8d68-26872b17f60a}">
      <Implementation>
        <ST><![CDATA[FanucRobot.List.StorageRobot(
	Estop:= Machine_Estop (*OR Input.bStorage_EstopPb*), 
	OpMode:= , 
	Start:= Machine_Start , 
//	Reset:= Machine_Reset OR fbStorageArea.RobotResetCMD, 
//	Hold:= Machine_Stop, 
	Reset:= Machine_Reset OR fbStorageArea.RobotResetCMD OR tofResetDelay.Q, //Postpone reset signal to fanuc robot		
	Hold:=   NOT FanucRobot.List.StorageRobot.Error AND_THEN Machine_Stop, 		//Transport form Kinsus version to taixin
	ManualCtrl :=  GVL_HMI.Storage.Manual.FanucRobot,
	qEnable=> , 
	qFault=> ,

	E_Stop_Output=> StorageRobot_EStop, 
	Halt=> , 
	Error=> , 
	ErrorID=> );

FanucRobot.List.ShippingRobot(
	Estop:= Machine_Estop (*OR Input.bStorage_EstopPb*), 
	OpMode:= , 
	Start:= Machine_Start, 
	Reset:= Machine_Reset OR fbShippingArea.RobotResetCMD OR tofResetDelay.Q, 			//
	Hold:= NOT fanucrobot.List.ShippingRobot.Error AND_THEN Machine_Stop,
	ManualCtrl:= GVL_HMI.Shipping.Manual.FanucRobot, 
	qEnable=> , 
	qFault=> , 
	E_Stop_Output=> ShippingRobot_EStop, 
	Halt=> , 
	Error=> , 
	ErrorID=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="A04_OpPannel" Id="{bd9ff175-ff19-4976-8958-fe3c79e5468c}">
      <Implementation>
        <ST><![CDATA[// E-Stop 
Machine_Estop := (NOT INPUT.bAllocate_EStopPb OR
                 NOT INPUT.bStorage_EstopPb OR
                 StorageRobot_EStop OR
                 ShippingRobot_EStop OR
                 GVL_ADS.OpPannel_Ctrl.EStopBtnStatus OR 
				NOT INPUT.bStorage_AirPressure_Ready) AND
                 NOT EnableSimulation;

// Stop
bSafetyDoorOpen := (NOT INPUT.bSafetyDoor1 OR
                   NOT INPUT.bSafetyDoor2 OR
                   NOT INPUT.bSafetyDoor3 OR
                   NOT INPUT.bSafetyDoor4 OR		
                   NOT INPUT.bSafetyDoor5 OR
                   NOT INPUT.bSafetyDoor6 OR
                   NOT INPUT.bSafetyDoor7 OR
                   NOT INPUT.bSafetyDoor8 OR
                   not INPUT.bSafetyDoor9 OR
                   not INPUT.bSafetyDoor10 OR
                   not INPUT.bSafetyDoor11 OR
                   not INPUT.bSafetyDoor12 OR
                   not INPUT.bSafetyDoor13 OR
                   not INPUT.bSafetyDoor14 OR
                   NOT INPUT.bAllocate_Electrical_Cabinet_SafetyDoor OR
                   NOT INPUT.bShippingRobot_ElectricalCabinet_SafetyDoor) AND
				   (NOT    GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass)	;		//use Safedoor bypass

IF StopEdgeDetect.xRisingEdge THEN
    bStopMem := TRUE;
ELSIF ResetEdgeDetect.xRisingEdge THEN
    bStopMem := FALSE;
END_IF

Machine_Stop := INPUT.bAllocate_StopPb OR
                INPUT.bStorage_StopPb OR
                bSafetyDoorOpen OR
                xError OR
                GVL_ADS.OpPannel_Ctrl.StopBtnStatus;

// Reset
Machine_Reset :=
    INPUT.bAllocate_ResetPb OR INPUT.bStorage_ResetPb OR GVL_ADS.OpPannel_Ctrl.ResetBtnStatus;

// Start
Machine_Start :=
    INPUT.bAllocate_StartPb OR INPUT.bStorage_StartPb OR GVL_ADS.OpPannel_Ctrl.StartBtnStatus;

//IF xError THEN
//    InternalOutput.bAllocated_SignalTower_RedLamp := fbBlink_05.OUT;
//    InternalOutput.bStorage_SingleTower_RedLamp := fbBlink_05.OUT;
//	InternalOutput.bAllocated_StopPbLamp := fbBlink_05.OUT;
//	InternalOutput.bStorage_StopPbLamp := fbBlink_05.OUT;
//ELSIF bStopMem AND NOT xError THEN
//    InternalOutput.bAllocated_SignalTower_RedLamp := TRUE;
//    InternalOutput.bStorage_SingleTower_RedLamp := TRUE;
//	InternalOutput.bAllocated_StopPbLamp := TRUE;
//	InternalOutput.bStorage_StopPbLamp := TRUE;
//ELSE
//    InternalOutput.bAllocated_SignalTower_RedLamp := FALSE;
//    InternalOutput.bStorage_SingleTower_RedLamp := FALSE;
//	InternalOutput.bAllocated_StopPbLamp := FALSE;
//	InternalOutput.bStorage_StopPbLamp := FALSE;

//END_IF

InternalOutput.bAllocated_SignalTower_RedLamp := _RedLamp;
InternalOutput.bAllocated_SignalTower_YellowLamp := _YellowLamp;
InternalOutput.bAllocated_SignalTower_GreenLamp := _GreenLamp;
InternalOutput.bAllocated_Buzzer := _Buzz;
InternalOutput.bStorage_Buzzer := _Buzz;
InternalOutput.bStorage_SingleTower_RedLamp := _RedLamp;
InternalOutput.bStorage_SingleTower_YellowLamp := _YellowLamp;
InternalOutput.bStorage_SingleTower_GreenLamp := _GreenLamp;

InternalOutput.bAllocated_StopPbLamp := _RedLamp;
InternalOutput.bAllocated_StartPbLamp := _GreenLamp;
InternalOutput.bAllocated_ResetPbLamp := _YellowLamp;

InternalOutput.bStorage_ResetPbLamp := _YellowLamp;
InternalOutput.bStorage_StartPbLamp := _GreenLamp;
InternalOutput.bStorage_StopPbLamp := _RedLamp;

//postpone btn signal to Host
tofResetDelay.IN:=Machine_Reset;
tofStopDelay.IN :=Machine_Stop; 
tofStartDelay.IN:=Machine_Start;
tofResetDelay(PT:=T#3.2S);	
tofStopDelay(PT:=T#1S);	
tofStartDelay(PT:=T#1S);

GVL_ADS.OpPannel_Status.EStopBtnStatus := Machine_Estop;
GVL_ADS.OpPannel_Status.ResetBtnStatus := tofResetDelay.Q;
GVL_ADS.OpPannel_Status.StartBtnStatus := tofStartDelay.Q;
GVL_ADS.OpPannel_Status.StopBtnStatus  := tofStopDelay.Q;


fb_AllocateSignalTower(
	Enable:= , 
	LampRed:= _RedLamp, 
	LampYellow:= _YellowLamp, 
	LampGreen:= _GreenLamp, 
	Buzz:= _Buzz, 
	ForceCloseBuzz:= , 
	BuzzSwitchOnTime:= 5, 
	Vaild=> , 
	Error=> , 
	ErrorID=> );
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A05_Light" Id="{6a000875-27c0-4eef-9aa2-70b57063df14}">
      <Implementation>
        <ST><![CDATA[//  Light 
InternalOutput.bStorage_EleBoxLight := GVL_HMI.Setup.Light.Storage_EleBoxLight_Off;
InternalOutput.bStorage_AreaLight := GVL_HMI.Setup.Light.Storage_AreaLight_Off;
InternalOutput.bAllocated_AreaLight := GVL_HMI.Setup.Light.Allocated_AreaLight_Off;

// Upcv CameraBlow
InternalOutput.bCamara_Blow := GVL_HMI.Storage.Manual.UpCV.CameraBlow;]]></ST>
      </Implementation>
    </Action>
    <Action Name="A10_ErrorHandler" Id="{6e15a011-548e-48fd-a150-b888d730dc27}">
      <Implementation>
        <ST><![CDATA[IF NOT ErrorTableInitDone THEN
	ErrorTableInitDone := M_General_AlarmRegister();
END_IF
M_General_AlarmRegister();
//Machine_Estop := ( NOT INPUT.bAllocate_EStopPb (*OR INPUT.bStorage_EstopPb*) OR StorageRobot_EStop OR ShippingRobot_EStop)  AND NOT EnableSimulation ;
E_StopEdgeDetect(xInput := Machine_Estop);
ResetEdgeDetect(xInput:= Machine_Reset);
StopEdgeDetect(xInput:= Machine_Stop);
StartEdgeDetect(xInput:= Machine_Start);

IF Allocate_EStopEdgeDetect.xRisingEdge THEN
	Allocate_EStop := FALSE;
ELSIF Allocate_EStopEdgeDetect.xFallingEdge THEN
	Allocate_EStop := TRUE;
END_IF

IF Storage_EstopEdgeDetect.xRisingEdge THEN
	Storage_EStop := FALSE;
ELSIF Storage_EstopEdgeDetect.xFallingEdge THEN
	Storage_EStop := TRUE;
END_IF

IF fbErrorHandler.ActiveAlarmCount <> 0 THEN
    xError := TRUE;
ELSE
    xError := FALSE;
END_IF

CASE fbErrorHandler.CurrentSeverityLevel OF
	E_Severity.Level7,E_Severity.Level6:
		IF xError AND (PackTag.Status.StateCurrent <> ePMLState_Aborted) THEN
			PackTag.Command.CntrlCmd := ePMLCommand_Abort;
		END_IF
END_CASE

IF ResetEdgeDetect.xRisingEdge THEN
//////////// Axis
	IF arAxisCtrl_gb[AxisNo.Allocate_X].Admin.Axis.Status.Error THEN
		arAxisCtrl_gb[AxisNo.Allocate_X].Admin.ClearError := Machine_Reset;
	END_IF
	IF arAxisCtrl_gb[AxisNo.Allocate_Y].Admin.Axis.Status.Error THEN
		arAxisCtrl_gb[AxisNo.Allocate_Y].Admin.ClearError := Machine_Reset;
	END_IF
	IF arAxisCtrl_gb[AxisNo.OutRobot_X].Admin.Axis.Status.Error THEN
		arAxisCtrl_gb[AxisNo.OutRobot_X].Admin.ClearError := Machine_Reset;
	END_IF
	IF arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin.Axis.Status.Error THEN
		arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin.ClearError := Machine_Reset;
	END_IF
	IF arAxisCtrl_gb[AxisNo.RoundBelt].Admin.Axis.Status.Error THEN
		arAxisCtrl_gb[AxisNo.RoundBelt].Admin.ClearError := Machine_Reset;
	END_IF
	IF arAxisCtrl_gb[AxisNo.TurnTable].Admin.Axis.Status.Error THEN
		arAxisCtrl_gb[AxisNo.TurnTable].Admin.ClearError := Machine_Reset;
	END_IF
	IF arAxisCtrl_gb[AxisNo.RackMotor].Admin.Axis.Status.Error THEN
		arAxisCtrl_gb[AxisNo.RackMotor].Admin.ClearError := Machine_Reset;
	END_IF
	
//////////// Cylinders
{region Cylinders }

	IF Cylinder.List.fbUpCV_FeedInPress1.xError THEN
		Cylinder.List.fbUpCV_FeedInPress1.M_Reset();
	END_IF
	IF Cylinder.List.fbUpCV_FeedInPress2.xError THEN
		Cylinder.List.fbUpCV_FeedInPress2.M_Reset();
	END_IF
	IF Cylinder.List.fbUpCV_DiameterPress.xError THEN
		Cylinder.List.fbUpCV_DiameterPress.M_Reset();
	END_IF
	IF Cylinder.List.fbUpCV_CamaraPress1.xError THEN
		Cylinder.List.fbUpCV_CamaraPress1.M_Reset();
	END_IF
	IF Cylinder.List.fbUpCV_CamaraPress2.xError THEN
		Cylinder.List.fbUpCV_CamaraPress2.M_Reset();
	END_IF
	IF Cylinder.List.fbUpCV_CamaraPress3.xError THEN
		Cylinder.List.fbUpCV_CamaraPress3.M_Reset();
	END_IF
	IF Cylinder.List.fbUpCV_CamaraPress4.xError THEN
		Cylinder.List.fbUpCV_CamaraPress4.M_Reset();
	END_IF
	IF Cylinder.List.fbUpCV_Block1.xError THEN
		Cylinder.List.fbUpCV_Block1.M_Reset();
	END_IF
	IF Cylinder.List.fbUpCV_Block2.xError THEN
		Cylinder.List.fbUpCV_Block2.M_Reset();
	END_IF
	IF Cylinder.List.fbUpCV_Block3.xError THEN
		Cylinder.List.fbUpCV_Block3.M_Reset();
	END_IF
	IF Cylinder.List.fbUpCV_DiameterHoriz.xError THEN
		Cylinder.List.fbUpCV_DiameterHoriz.M_Reset();
	END_IF
	IF Cylinder.List.fbUpCV_DiameterVert.xError THEN
		Cylinder.List.fbUpCV_DiameterVert.M_Reset();
	END_IF
	IF Cylinder.List.fbUpCV_DiameterClamp.xError THEN
		Cylinder.List.fbUpCV_DiameterClamp.M_Reset();
	END_IF
	IF Cylinder.List.fbStackPush.xError THEN
		Cylinder.List.fbStackPush.M_Reset();
	END_IF
	IF Cylinder.List.fbPullOutCV_AsidePress1.xError THEN
		Cylinder.List.fbPullOutCV_AsidePress1.M_Reset();
	END_IF
	IF Cylinder.List.fbPullOutCV_AsidePress2.xError THEN
		Cylinder.List.fbPullOutCV_AsidePress2.M_Reset();
	END_IF
	IF Cylinder.List.fbPullOutCV_AsideBlock.xError THEN
		Cylinder.List.fbPullOutCV_AsideBlock.M_Reset();
	END_IF
	IF Cylinder.List.fbPullOutCV_BsidePress1.xError THEN
		Cylinder.List.fbPullOutCV_BsidePress1.M_Reset();
	END_IF
	IF Cylinder.List.fbPullOutCV_BsidePress2.xError THEN
		Cylinder.List.fbPullOutCV_BsidePress2.M_Reset();
	END_IF
	IF Cylinder.List.fbPullOutCV_BsideBlock.xError THEN
		Cylinder.List.fbPullOutCV_BsideBlock.M_Reset();
	END_IF
	IF Cylinder.List.fbLowCV_Press1.xError THEN
		Cylinder.List.fbLowCV_Press1.M_Reset();
	END_IF
	IF Cylinder.List.fbLowCV_Press2.xError THEN
		Cylinder.List.fbLowCV_Press2.M_Reset();
	END_IF
	IF Cylinder.List.fbLowCV_Press3.xError THEN
		Cylinder.List.fbLowCV_Press3.M_Reset();
	END_IF
	IF Cylinder.List.fbLowCV_Press4.xError THEN
		Cylinder.List.fbLowCV_Press4.M_Reset();
	END_IF
	IF Cylinder.List.fbLowCV_Block1.xError THEN
		Cylinder.List.fbLowCV_Block1.M_Reset();
	END_IF
	IF Cylinder.List.fbLowCV_Block2.xError THEN
		Cylinder.List.fbLowCV_Block2.M_Reset();
	END_IF
	IF Cylinder.List.fbAllocateRobot_LeftVert1.xError THEN
		Cylinder.List.fbAllocateRobot_LeftVert1.M_Reset();
	END_IF
	IF Cylinder.List.fbAllocateRobot_LeftVert2.xError THEN
		Cylinder.List.fbAllocateRobot_LeftVert2.M_Reset();
	END_IF
	IF Cylinder.List.fbAllocateRobot_RightVert1.xError THEN
		Cylinder.List.fbAllocateRobot_RightVert1.M_Reset();
	END_IF
	IF Cylinder.List.fbAllocateRobot_RightVert2.xError THEN
		Cylinder.List.fbAllocateRobot_RightVert2.M_Reset();
	END_IF
	IF Cylinder.List.fbAllocateRobot_LeftClamp1.xError THEN
		Cylinder.List.fbAllocateRobot_LeftClamp1.M_Reset();
	END_IF
	IF Cylinder.List.fbAllocateRobot_LeftClamp2.xError THEN
		Cylinder.List.fbAllocateRobot_LeftClamp2.M_Reset();
	END_IF
	IF Cylinder.List.fbAllocateRobot_RightClamp1.xError THEN
		Cylinder.List.fbAllocateRobot_RightClamp1.M_Reset();
	END_IF
	IF Cylinder.List.fbAllocateRobot_RightClamp2.xError THEN
		Cylinder.List.fbAllocateRobot_RightClamp2.M_Reset();
	END_IF
	IF Cylinder.List.fbRoundBelt_WorkZone_Press.xError THEN
		Cylinder.List.fbRoundBelt_WorkZone_Press.M_Reset();
	END_IF
	IF Cylinder.List.fbRoundBelt_WorkZone_Plug.xError THEN
		Cylinder.List.fbRoundBelt_WorkZone_Plug.M_Reset();
	END_IF
	IF Cylinder.List.fbRoundBelt_ChargeZone_Plug.xError THEN
		Cylinder.List.fbRoundBelt_ChargeZone_Plug.M_Reset();
	END_IF
	IF Cylinder.List.fbRoundBelt_TransmitCVZone_Plug.xError THEN
		Cylinder.List.fbRoundBelt_TransmitCVZone_Plug.M_Reset();
	END_IF
	IF Cylinder.List.fbOutRobot_AsideVert.xError THEN
		Cylinder.List.fbOutRobot_AsideVert.M_Reset();
	END_IF
	IF Cylinder.List.fbOutRobot_BsideVert.xError THEN
		Cylinder.List.fbOutRobot_BsideVert.M_Reset();
	END_IF
	IF Cylinder.List.fbOutRobot_AsideClamp.xError THEN
		Cylinder.List.fbOutRobot_AsideClamp.M_Reset();
	END_IF
	IF Cylinder.List.fbOutRobot_BsideClamp.xError THEN
		Cylinder.List.fbOutRobot_BsideClamp.M_Reset();
	END_IF
	IF Cylinder.List.fbTransmitCV_CamaraHoriz.xError THEN
		Cylinder.List.fbTransmitCV_CamaraHoriz.M_Reset();
	END_IF
	IF Cylinder.List.fbDifferentSizeCV_Press2.xError THEN
		Cylinder.List.fbDifferentSizeCV_Press2.M_Reset();
	END_IF
	IF Cylinder.List.fbDifferentSizeCV_Press1.xError THEN
		Cylinder.List.fbDifferentSizeCV_Press1.M_Reset();
	END_IF
	IF Cylinder.List.fbDifferentSizeCV_Block1.xError THEN
		Cylinder.List.fbDifferentSizeCV_Block1.M_Reset();
	END_IF
	IF Cylinder.List.fbSameSizeCV_Press4.xError THEN
		Cylinder.List.fbSameSizeCV_Press4.M_Reset();
	END_IF
	IF Cylinder.List.fbSameSizeCV_Press3.xError THEN
		Cylinder.List.fbSameSizeCV_Press3.M_Reset();
	END_IF
	IF Cylinder.List.fbSameSizeCV_Press2.xError THEN
		Cylinder.List.fbSameSizeCV_Press2.M_Reset();
	END_IF
	IF Cylinder.List.fbSameSizeCV_Press1.xError THEN
		Cylinder.List.fbSameSizeCV_Press1.M_Reset();
	END_IF
	IF Cylinder.List.fbSameSizeCV_Block2.xError THEN
		Cylinder.List.fbSameSizeCV_Block2.M_Reset();
	END_IF
	IF Cylinder.List.fbSameSizeCV_Block1.xError THEN
		Cylinder.List.fbSameSizeCV_Block1.M_Reset();
	END_IF
	IF Cylinder.List.fbTurntable_Press.xError THEN
		Cylinder.List.fbTurntable_Press.M_Reset();
	END_IF
	{endregion}
	

//////////// Motor
{region Motor}
IF Motor.List.WareHouseCV_01.xError THEN
		Motor.List.WareHouseCV_01.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_02.xError THEN
		Motor.List.WareHouseCV_02.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_03.xError THEN
		Motor.List.WareHouseCV_03.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_04.xError THEN
		Motor.List.WareHouseCV_04.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_05.xError THEN
		Motor.List.WareHouseCV_05.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_06.xError THEN
		Motor.List.WareHouseCV_06.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_07.xError THEN
		Motor.List.WareHouseCV_07.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_08.xError THEN
		Motor.List.WareHouseCV_08.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_09.xError THEN
		Motor.List.WareHouseCV_09.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_10.xError THEN
		Motor.List.WareHouseCV_10.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_11.xError THEN
		Motor.List.WareHouseCV_11.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_12.xError THEN
		Motor.List.WareHouseCV_12.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_13.xError THEN
		Motor.List.WareHouseCV_13.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_14.xError THEN
		Motor.List.WareHouseCV_14.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_15.xError THEN
		Motor.List.WareHouseCV_15.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_16.xError THEN
		Motor.List.WareHouseCV_16.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_17.xError THEN
		Motor.List.WareHouseCV_17.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_18.xError THEN
		Motor.List.WareHouseCV_18.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_19.xError THEN
		Motor.List.WareHouseCV_19.M_Reset();
	END_IF
	IF Motor.List.WareHouseCV_20.xError THEN
		Motor.List.WareHouseCV_20.M_Reset();
	END_IF
	IF Motor.List.UpCV.xError THEN
		Motor.List.UpCV.M_Reset();
	END_IF
	IF Motor.List.LowCV.xError THEN
		Motor.List.LowCV.M_Reset();
	END_IF
	IF Motor.List.PullOutCV_A.xError THEN
		Motor.List.PullOutCV_A.M_Reset();
	END_IF
	IF Motor.List.PullOutCV_B.xError THEN
		Motor.List.PullOutCV_B.M_Reset();
	END_IF
	IF Motor.List.TransmitSameSideCV.xError THEN
		Motor.List.TransmitSameSideCV.M_Reset();
	END_IF
	IF Motor.List.TransmitDifferentSideCV.xError THEN
		Motor.List.TransmitDifferentSideCV.M_Reset();
	END_IF	 
{endregion}
	


ELSIF ResetEdgeDetect.xFallingEdge THEN
	arAxisCtrl_gb[AxisNo.Allocate_X].Admin.ClearError := Machine_Reset;
	arAxisCtrl_gb[AxisNo.Allocate_Y].Admin.ClearError := Machine_Reset;
	arAxisCtrl_gb[AxisNo.OutRobot_X].Admin.ClearError := Machine_Reset;
	arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin.ClearError := Machine_Reset;
	arAxisCtrl_gb[AxisNo.RoundBelt].Admin.ClearError := Machine_Reset;
	arAxisCtrl_gb[AxisNo.TurnTable].Admin.ClearError := Machine_Reset;
	arAxisCtrl_gb[AxisNo.RackMotor].Admin.ClearError := Machine_Reset;
END_IF

Error := xError;
ErrorID := xErrorID;
ErrMsg := xErrorMsg;]]></ST>
      </Implementation>
    </Action>
    <Method Name="M_Aborted" Id="{07590437-cdc2-4926-8c27-767ace7419e7}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Aborted
VAR
	CylinderIndex :INT;
	MotorIndex : INT;
	ServoIndex : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eModeCommand = E_UnitMode.Auto THEN
    GVL_Machine.PackTags[UnitNo.Storage].Command.UnitMode := E_UnitMode.Auto;
    GVL_Machine.PackTags[UnitNo.Allocate].Command.UnitMode := E_UnitMode.Auto;
    GVL_Machine.PackTags[UnitNo.Shipping].Command.UnitMode := E_UnitMode.Auto;
ELSIF eModeCommand = E_UnitMode.Manual THEN
    GVL_Machine.PackTags[UnitNo.Storage].Command.UnitMode := E_UnitMode.Manual;
    GVL_Machine.PackTags[UnitNo.Allocate].Command.UnitMode := E_UnitMode.Manual;
    GVL_Machine.PackTags[UnitNo.Shipping].Command.UnitMode := E_UnitMode.Manual;
END_IF

FOR ServoIndex := 1 TO 7 DO
    arAxisCtrl_gb[ServoIndex].Admin._OpMode.en := ModeAH;
END_FOR

CASE eModeCurrent OF
    E_UnitMode.Manual:
        IF GVL_Machine.PackTags[UnitNo.Allocate].Status.UnitModeCurrent = E_UnitMode.Manual AND
            GVL_Machine.PackTags[UnitNo.Allocate].Status.StateCurrent = ePMLState_Aborted AND
            GVL_Machine.PackTags[UnitNo.Storage].Status.UnitModeCurrent = E_UnitMode.Manual AND
            GVL_Machine.PackTags[UnitNo.Storage].Status.StateCurrent = ePMLState_Aborted AND
            GVL_Machine.PackTags[UnitNo.Shipping].Status.UnitModeCurrent = E_UnitMode.Manual AND
            GVL_Machine.PackTags[UnitNo.Shipping].Status.StateCurrent = ePMLState_Aborted THEN
            IF NOT Error OR Machine_Reset THEN
                M_StateComplete();
            END_IF
        END_IF
    E_UnitMode.Auto:
        IF GVL_Machine.PackTags[UnitNo.Allocate].Status.UnitModeCurrent = E_UnitMode.Auto AND
            GVL_Machine.PackTags[UnitNo.Allocate].Status.StateCurrent = ePMLState_Aborted AND
            GVL_Machine.PackTags[UnitNo.Storage].Status.UnitModeCurrent = E_UnitMode.Auto AND
            GVL_Machine.PackTags[UnitNo.Storage].Status.StateCurrent = ePMLState_Aborted AND
            GVL_Machine.PackTags[UnitNo.Shipping].Status.UnitModeCurrent = E_UnitMode.Auto AND
            GVL_Machine.PackTags[UnitNo.Shipping].Status.StateCurrent = ePMLState_Aborted THEN
            IF NOT Error OR Machine_Reset THEN
                M_StateComplete();
            END_IF
        END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Aborting" Id="{8655fba0-b509-44e8-9ec4-a94584b04c87}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Aborting
VAR
	CylinderIndex :INT;
	MotorIndex : INT;
	ServoIndex : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eModeCurrent OF
    E_UnitMode.Manual:
        GVL_Machine.PackTags[UnitNo.Allocate].Command.UnitMode := E_UnitMode.Manual;
        GVL_Machine.PackTags[UnitNo.Allocate].Command.CntrlCmd := ePMLCommand_Abort;
        GVL_Machine.PackTags[UnitNo.Storage].Command.UnitMode  := E_UnitMode.Manual;
        GVL_Machine.PackTags[UnitNo.Storage].Command.CntrlCmd  := ePMLCommand_Abort;
        GVL_Machine.PackTags[UnitNo.Shipping].Command.UnitMode := E_UnitMode.Manual;
        GVL_Machine.PackTags[UnitNo.Shipping].Command.CntrlCmd := ePMLCommand_Abort;
		FOR CylinderIndex := 1 TO 53 DO
			Cylinder.arCylinder[CylinderIndex].xEnable := FALSE;
		END_FOR
		FOR MotorIndex := 1 TO 26 DO
			Motor.arMotor[MotorIndex].xEnable := FALSE;
		END_FOR
		TableMove.xExecute := FALSE;
        IF GVL_Machine.PackTags[UnitNo.Allocate].Status.UnitModeCurrent = E_UnitMode.Manual AND
           GVL_Machine.PackTags[UnitNo.Allocate].Status.StateCurrent = ePMLState_Aborting AND
           GVL_Machine.PackTags[UnitNo.Storage].Status.UnitModeCurrent = E_UnitMode.Manual AND
           GVL_Machine.PackTags[UnitNo.Storage].Status.StateCurrent = ePMLState_Aborting AND
           GVL_Machine.PackTags[UnitNo.Shipping].Status.UnitModeCurrent = E_UnitMode.Manual AND
           GVL_Machine.PackTags[UnitNo.Shipping].Status.StateCurrent = ePMLState_Aborting AND NOT
		   TableMove.xError
            THEN
            M_StateComplete();
        END_IF
	E_UnitMode.Auto:
        GVL_Machine.PackTags[UnitNo.Allocate].Command.UnitMode := E_UnitMode.Auto;
        GVL_Machine.PackTags[UnitNo.Allocate].Command.CntrlCmd := ePMLCommand_Abort;
        GVL_Machine.PackTags[UnitNo.Storage].Command.UnitMode  := E_UnitMode.Auto;
        GVL_Machine.PackTags[UnitNo.Storage].Command.CntrlCmd  := ePMLCommand_Abort;
        GVL_Machine.PackTags[UnitNo.Shipping].Command.UnitMode := E_UnitMode.Auto;
        GVL_Machine.PackTags[UnitNo.Shipping].Command.CntrlCmd := ePMLCommand_Abort;
		FOR CylinderIndex := 1 TO 53 DO
			Cylinder.arCylinder[CylinderIndex].xEnable := FALSE;
		END_FOR
		FOR MotorIndex := 1 TO 26 DO
			Motor.arMotor[MotorIndex].xEnable := FALSE;
		END_FOR
		TableMove.xExecute := FALSE;
        IF GVL_Machine.PackTags[UnitNo.Allocate].Status.UnitModeCurrent = E_UnitMode.Auto AND
           GVL_Machine.PackTags[UnitNo.Allocate].Status.StateCurrent = ePMLState_Aborting AND
           GVL_Machine.PackTags[UnitNo.Storage].Status.UnitModeCurrent = E_UnitMode.Auto AND
           GVL_Machine.PackTags[UnitNo.Storage].Status.StateCurrent = ePMLState_Aborting AND
           GVL_Machine.PackTags[UnitNo.Shipping].Status.UnitModeCurrent = E_UnitMode.Auto AND
           GVL_Machine.PackTags[UnitNo.Shipping].Status.StateCurrent = ePMLState_Aborting AND NOT
		   TableMove.xError
            THEN
            M_StateComplete();
        END_IF
END_CASE
FOR ServoIndex:=1 TO 7 DO
	arAxisCtrl_gb[ServoIndex].Admin._OpMode.en := ModeAH;
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Auto_Axes" Id="{0e064b18-95a3-46b5-ad34-93887c3bb466}" FolderPath="Privite\Auto\">
      <Declaration><![CDATA[METHOD PRIVATE M_Auto_Axes : BOOL
VAR_INPUT
END_VAR

VAR_INST
	AllowAllocateRobotMove : BOOL;
	AllowOutRobotMove : BOOL;
	AllowRoundBeltMove : BOOL;
	AllowTurnTable		:BOOL;
	AllowRackMotor		:BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Safe check
AllowAllocateRobotMove := Cylinder.List.fbAllocateRobot_LeftVert1.InRearPosition AND
    Cylinder.List.fbAllocateRobot_LeftVert2.InRearPosition AND
    Cylinder.List.fbAllocateRobot_RightVert1.InRearPosition AND
    Cylinder.List.fbAllocateRobot_RightVert2.InRearPosition;

AllowOutRobotMove := Cylinder.List.fbOutRobot_AsideVert.InRearPosition AND Cylinder.List.fbOutRobot_BsideVert.InRearPosition;
AllowRoundBeltMove := Cylinder.List.fbRoundBelt_ChargeZone_Plug.InRearPosition AND
    Cylinder.List.fbRoundBelt_TransmitCVZone_Plug.InRearPosition AND
    Cylinder.List.fbRoundBelt_WorkZone_Plug.InRearPosition AND
    Cylinder.List.fbRoundBelt_WorkZone_Press.InRearPosition AND
    AllowAllocateRobotMove AND
    AllowOutRobotMove
	AND NOT FanucRobot.List.StorageRobot.BZoneInWork AND NOT FanucRobot.List.StorageRobot.Bzone_AllowWork;;

AllowTurnTable := Cylinder.List.fbTurntable_Press.InRearPosition;
AllowRackMotor := Cylinder.List.fbStackPush.InRearPosition;

// Axis controll
{region "AllocateRobot AxisX"}

IF AllocateManualCommand.AllocatedRobot.AxisX.JOG.MoveFWD AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_X].VelMode.Acc := CurrentData.Axes.Allocate_X.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.Allocate_X].VelMode.Dec := CurrentData.Axes.Allocate_X.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.Allocate_X].VelMode.Jerk := CurrentData.Axes.Allocate_X.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.Allocate_X].VelMode.Velocity := CurrentData.Axes.Allocate_X.Manual.JogVelocity;
    arAxisCtrl_gb[AxisNo.Allocate_X].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.AllocatedRobot.AxisX.JOG.MoveBWD AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_X].VelMode.Acc := CurrentData.Axes.Allocate_X.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.Allocate_X].VelMode.Dec := CurrentData.Axes.Allocate_X.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.Allocate_X].VelMode.Jerk := CurrentData.Axes.Allocate_X.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.Allocate_X].VelMode.Velocity := CurrentData.Axes.Allocate_X.Manual.JogVelocity * -1;
    arAxisCtrl_gb[AxisNo.Allocate_X].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.AllocatedRobot.AxisX.PTP.Enable AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_X].PosMode.Acc := CurrentData.Axes.Allocate_X.Manual.PtpAcceleration;
    arAxisCtrl_gb[AxisNo.Allocate_X].PosMode.Dec := CurrentData.Axes.Allocate_X.Manual.PtpDeceleration;
    arAxisCtrl_gb[AxisNo.Allocate_X].PosMode.Jerk := CurrentData.Axes.Allocate_X.Manual.PtpJerk;
    arAxisCtrl_gb[AxisNo.Allocate_X].PosMode.Velocity := CurrentData.Axes.Allocate_X.Manual.PtpVelocity;
    arAxisCtrl_gb[AxisNo.Allocate_X].PosMode.Position := CurrentData.Axes.Allocate_X.Manual.PtpPosition;
    arAxisCtrl_gb[AxisNo.Allocate_X].Admin._OpMode.en := ModePosAbs;
ELSIF (AllocateManualCommand.AllocatedRobot.AxisX.Homing.Execute OR  fbAllocateArea.fbAllocateHome.AxisHomingRequest)  AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_X].SetupMode.eHomingMode := E_HomingMode._17_Neg_LimitOutterRight;
    arAxisCtrl_gb[AxisNo.Allocate_X].SetupMode.FastVelo := CurrentData.Axes.Allocate_X.Homing.FastVelo;
    arAxisCtrl_gb[AxisNo.Allocate_X].SetupMode.SlowVelo := CurrentData.Axes.Allocate_X.Homing.SlowVelo;
    arAxisCtrl_gb[AxisNo.Allocate_X].SetupMode.lrOffset := CurrentData.Axes.Allocate_X.Homing.Offset;
    arAxisCtrl_gb[AxisNo.Allocate_X].SetupMode.lrSetPosition := CurrentData.Axes.Allocate_X.Homing.SetAbsolutePosition;
    arAxisCtrl_gb[AxisNo.Allocate_X].SetupMode.stPosBiasParameter.bSetPostionBias := TRUE;
    arAxisCtrl_gb[AxisNo.Allocate_X].Admin._OpMode.en := ModeHoming;
ELSIF TableMove.xBusy AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_X].Admin._OpMode.en := ModePosAbs;
ELSIF (fbAllocateArea.fb_AllocateBatchMode.Busy OR fbAllocateArea.fb_AllocateBatchMode_Reverse.Busy ) AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_X].Admin._OpMode.en := ModePosAbs;
		 
ELSE
    arAxisCtrl_gb[AxisNo.Allocate_X].Admin.StopDeceleration := 1000;
    arAxisCtrl_gb[AxisNo.Allocate_X].Admin._OpMode.en := E_AXIS_MODE.ModeAH;
		 
END_IF
{endregion}

{region "AllocateRobot AxisY"}
IF AllocateManualCommand.AllocatedRobot.AxisY.JOG.MoveFWD AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_Y].VelMode.Acc := CurrentData.Axes.Allocate_Y.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.Allocate_Y].VelMode.Dec := CurrentData.Axes.Allocate_Y.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.Allocate_Y].VelMode.Jerk := CurrentData.Axes.Allocate_Y.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.Allocate_Y].VelMode.Velocity := CurrentData.Axes.Allocate_Y.Manual.JogVelocity;
    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.AllocatedRobot.AxisY.JOG.MoveBWD AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_Y].VelMode.Acc := CurrentData.Axes.Allocate_Y.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.Allocate_Y].VelMode.Dec := CurrentData.Axes.Allocate_Y.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.Allocate_Y].VelMode.Jerk := CurrentData.Axes.Allocate_Y.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.Allocate_Y].VelMode.Velocity := CurrentData.Axes.Allocate_Y.Manual.JogVelocity * -1;
    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.AllocatedRobot.AxisY.PTP.Enable AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Acc := CurrentData.Axes.Allocate_Y.Manual.PtpAcceleration;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Dec := CurrentData.Axes.Allocate_Y.Manual.PtpDeceleration;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Jerk := CurrentData.Axes.Allocate_Y.Manual.PtpJerk;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Velocity := CurrentData.Axes.Allocate_Y.Manual.PtpVelocity;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Position := CurrentData.Axes.Allocate_Y.Manual.PtpPosition;
    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin._OpMode.en := ModePosAbs;
//ELSIF( AllocateManualCommand.AllocatedRobot.AxisY.Homing.Execute OR  fbAllocateArea.fbAllocateHome.AxisHomingRequest ) AND AllowAllocateRobotMove THEN
//    arAxisCtrl_gb[AxisNo.Allocate_Y].SetupMode.eHomingMode := E_HomingMode._36_MoveToAbsHomePoint;
//    arAxisCtrl_gb[AxisNo.Allocate_Y].SetupMode.FastVelo := CurrentData.Axes.Allocate_Y.Homing.FastVelo;
//    arAxisCtrl_gb[AxisNo.Allocate_Y].SetupMode.SlowVelo := CurrentData.Axes.Allocate_Y.Homing.SlowVelo;
//    arAxisCtrl_gb[AxisNo.Allocate_Y].SetupMode.lrOffset := CurrentData.Axes.Allocate_Y.Homing.Offset;
//    arAxisCtrl_gb[AxisNo.Allocate_Y].SetupMode.lrSetPosition := CurrentData.Axes.Allocate_Y.Homing.SetAbsolutePosition;
//    arAxisCtrl_gb[AxisNo.Allocate_Y].SetupMode.stPosBiasParameter.bSetPostionBias := FALSE;
//    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin._OpMode.en := ModeHoming;
ELSIF( AllocateManualCommand.AllocatedRobot.AxisY.Homing.Execute OR  fbAllocateArea.fbAllocateHome.AxisHomingRequest ) AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Acc := CurrentData.Axes.Allocate_Y.Homing.FastVelo.Acc;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Dec := CurrentData.Axes.Allocate_Y.Homing.FastVelo.Dec;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Jerk := CurrentData.Axes.Allocate_Y.Homing.FastVelo.Jerk;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Velocity := CurrentData.Axes.Allocate_Y.Homing.FastVelo.Velocity;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Position := CurrentData.Axes.Allocate_Y.Homing.Offset;
    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin._OpMode.en := ModePosAbs;
		 
    IF arAxisStatus_gb[AxisNo.Allocate_Y].Admin._OpModeAck = ModePosAbs AND arAxisStatus_gb[AxisNo.Allocate_Y].Admin.CmdDone THEN
        GVL_Machine.AllocatYAxisHome := TRUE;
    END_IF
ELSIF TableMove.xBusy AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin._OpMode.en := ModePosAbs;
ELSIF (fbAllocateArea.fb_AllocateBatchMode.Busy OR fbAllocateArea.fb_AllocateBatchMode_Reverse.Busy) AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin._OpMode.en := ModePosAbs;
ELSE
    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin.StopDeceleration := 1000;
    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin._OpMode.en := E_AXIS_MODE.ModeAH;
END_IF

{EndRegion}

{region "OutRobot AxisX"}
IF AllocateManualCommand.OutRobot.AxisX.JOG.MoveFWD AND AllowOutRobotMove THEN
    arAxisCtrl_gb[AxisNo.OutRobot_X].VelMode.Acc := CurrentData.Axes.OutRobot_X.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_X].VelMode.Dec := CurrentData.Axes.OutRobot_X.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_X].VelMode.Jerk := CurrentData.Axes.OutRobot_X.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.OutRobot_X].VelMode.Velocity := CurrentData.Axes.OutRobot_X.Manual.JogVelocity;
    arAxisCtrl_gb[AxisNo.OutRobot_X].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.OutRobot.AxisX.JOG.MoveBWD AND AllowOutRobotMove THEN
    arAxisCtrl_gb[AxisNo.OutRobot_X].VelMode.Acc := CurrentData.Axes.OutRobot_X.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_X].VelMode.Dec := CurrentData.Axes.OutRobot_X.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_X].VelMode.Jerk := CurrentData.Axes.OutRobot_X.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.OutRobot_X].VelMode.Velocity := CurrentData.Axes.OutRobot_X.Manual.JogVelocity * -1;
    arAxisCtrl_gb[AxisNo.OutRobot_X].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.OutRobot.AxisX.PTP.Enable AND AllowOutRobotMove THEN
    arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Acc := CurrentData.Axes.OutRobot_X.Manual.PtpAcceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Dec := CurrentData.Axes.OutRobot_X.Manual.PtpDeceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Jerk := CurrentData.Axes.OutRobot_X.Manual.PtpJerk;
    arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Velocity := CurrentData.Axes.OutRobot_X.Manual.PtpVelocity;
    arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Position := CurrentData.Axes.OutRobot_X.Manual.PtpPosition;
    arAxisCtrl_gb[AxisNo.OutRobot_X].Admin._OpMode.en := ModePosAbs;
ELSIF (AllocateManualCommand.OutRobot.AxisX.Homing.Execute OR  fbAllocateArea.fbAllocateHome.AxisHomingRequest ) AND AllowOutRobotMove THEN
    arAxisCtrl_gb[AxisNo.OutRobot_X].SetupMode.eHomingMode := E_HomingMode._28_Neg_HomeInnerRight_withLimit;
    arAxisCtrl_gb[AxisNo.OutRobot_X].SetupMode.FastVelo := CurrentData.Axes.OutRobot_X.Homing.FastVelo;
    arAxisCtrl_gb[AxisNo.OutRobot_X].SetupMode.SlowVelo := CurrentData.Axes.OutRobot_X.Homing.SlowVelo;
    arAxisCtrl_gb[AxisNo.OutRobot_X].SetupMode.lrOffset := CurrentData.Axes.OutRobot_X.Homing.Offset;
    arAxisCtrl_gb[AxisNo.OutRobot_X].SetupMode.lrSetPosition := CurrentData.Axes.OutRobot_X.Homing.SetAbsolutePosition;
    arAxisCtrl_gb[AxisNo.OutRobot_X].SetupMode.stPosBiasParameter.bSetPostionBias := TRUE;
    arAxisCtrl_gb[AxisNo.OutRobot_X].Admin._OpMode.en := ModeHoming;
ELSIF (TableMove.xBusy OR AllocateService.AutoMode_BoxMoveReverse.HandShake.Busy 
	  OR AllocateService.AutoMode_EmptyBoxMove.HandShake.Busy 
	  OR AllocateService.AutoMode_RareBoxMove.HandShake.Busy) AND AllowOutRobotMove THEN
	arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Acc := CurrentData.Axes.OutRobot_X.HalfAuto.Acceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Dec := CurrentData.Axes.OutRobot_X.HalfAuto.Deceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Jerk := CurrentData.Axes.OutRobot_X.HalfAuto.Jerk;
    arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Velocity := CurrentData.Axes.OutRobot_X.HalfAuto.Velocity;		   
    arAxisCtrl_gb[AxisNo.OutRobot_X].Admin._OpMode.en := ModePosAbs;
ELSE
    arAxisCtrl_gb[AxisNo.OutRobot_X].Admin.StopDeceleration := 1000;
    arAxisCtrl_gb[AxisNo.OutRobot_X].Admin._OpMode.en := E_AXIS_MODE.ModeAH;
END_IF

{Endregion}

{region "OutRobot AxisY"}
IF AllocateManualCommand.OutRobot.AxisY.JOG.MoveFWD AND AllowOutRobotMove THEN
    arAxisCtrl_gb[AxisNo.OutRobot_Y].VelMode.Acc := CurrentData.Axes.OutRobot_Y.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].VelMode.Dec := CurrentData.Axes.OutRobot_Y.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].VelMode.Jerk := CurrentData.Axes.OutRobot_Y.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].VelMode.Velocity := CurrentData.Axes.OutRobot_Y.Manual.JogVelocity;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.OutRobot.AxisY.JOG.MoveBWD AND AllowOutRobotMove THEN
    arAxisCtrl_gb[AxisNo.OutRobot_Y].VelMode.Acc := CurrentData.Axes.OutRobot_Y.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].VelMode.Dec := CurrentData.Axes.OutRobot_Y.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].VelMode.Jerk := CurrentData.Axes.OutRobot_Y.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].VelMode.Velocity := CurrentData.Axes.OutRobot_Y.Manual.JogVelocity * -1;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.OutRobot.AxisY.PTP.Enable AND AllowOutRobotMove THEN
    arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Acc := CurrentData.Axes.OutRobot_Y.Manual.PtpAcceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Dec := CurrentData.Axes.OutRobot_Y.Manual.PtpDeceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Jerk := CurrentData.Axes.OutRobot_Y.Manual.PtpJerk;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Velocity := CurrentData.Axes.OutRobot_Y.Manual.PtpVelocity;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Position := CurrentData.Axes.OutRobot_Y.Manual.PtpPosition;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin._OpMode.en := ModePosAbs;
ELSIF (AllocateManualCommand.OutRobot.AxisY.Homing.Execute OR  fbAllocateArea.fbAllocateHome.AxisHomingRequest) AND AllowOutRobotMove THEN
    arAxisCtrl_gb[AxisNo.OutRobot_Y].SetupMode.eHomingMode := E_HomingMode._28_Neg_HomeInnerRight_withLimit;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].SetupMode.FastVelo := CurrentData.Axes.OutRobot_Y.Homing.FastVelo;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].SetupMode.SlowVelo := CurrentData.Axes.OutRobot_Y.Homing.SlowVelo;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].SetupMode.lrOffset := CurrentData.Axes.OutRobot_Y.Homing.Offset;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].SetupMode.lrSetPosition := CurrentData.Axes.OutRobot_Y.Homing.SetAbsolutePosition;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].SetupMode.stPosBiasParameter.bSetPostionBias := TRUE;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin._OpMode.en := ModeHoming;
ELSIF (TableMove.xBusy OR AllocateService.AutoMode_BoxMoveReverse.HandShake.Busy 
	  OR AllocateService.AutoMode_EmptyBoxMove.HandShake.Busy 
	  OR AllocateService.AutoMode_RareBoxMove.HandShake.Busy)AND AllowOutRobotMove THEN
	arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Acc := CurrentData.Axes.OutRobot_Y.HalfAuto.Acceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Dec := CurrentData.Axes.OutRobot_Y.HalfAuto.Deceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Jerk := CurrentData.Axes.OutRobot_Y.HalfAuto.Jerk;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Velocity := CurrentData.Axes.OutRobot_Y.HalfAuto.Velocity;		   
    arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin._OpMode.en := ModePosAbs;
ELSE
    arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin.StopDeceleration := 1000;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin._OpMode.en := E_AXIS_MODE.ModeAH;
END_IF

{Endregion}

{region "RoundBelt Axis"}
IF AllocateManualCommand.RoundBelt.Axis.JOG.MoveFWD AND AllowRoundBeltMove THEN
    arAxisCtrl_gb[AxisNo.RoundBelt].VelMode.Acc := CurrentData.Axes.RoundBelt.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].VelMode.Dec := CurrentData.Axes.RoundBelt.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].VelMode.Jerk := CurrentData.Axes.RoundBelt.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.RoundBelt].VelMode.Velocity := CurrentData.Axes.RoundBelt.Manual.JogVelocity;
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.RoundBelt.Axis.JOG.MoveBWD AND AllowRoundBeltMove THEN
    arAxisCtrl_gb[AxisNo.RoundBelt].VelMode.Acc := CurrentData.Axes.RoundBelt.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].VelMode.Dec := CurrentData.Axes.RoundBelt.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].VelMode.Jerk := CurrentData.Axes.RoundBelt.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.RoundBelt].VelMode.Velocity := CurrentData.Axes.RoundBelt.Manual.JogVelocity * -1;
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.RoundBelt.Axis.PTP.Enable AND AllowRoundBeltMove THEN
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Acc := CurrentData.Axes.RoundBelt.Manual.PtpAcceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Dec := CurrentData.Axes.RoundBelt.Manual.PtpDeceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Jerk := CurrentData.Axes.RoundBelt.Manual.PtpJerk;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Velocity := CurrentData.Axes.RoundBelt.Manual.PtpVelocity;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Position := CurrentData.Axes.RoundBelt.Manual.PtpPosition;
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin._OpMode.en := ModePosAbs;
ELSIF (AllocateManualCommand.RoundBelt.Axis.Homing.Execute OR  fbAllocateArea.fbAllocateHome.AxisHomingRequest ) AND AllowRoundBeltMove THEN
    arAxisCtrl_gb[AxisNo.RoundBelt].SetupMode.eHomingMode := E_HomingMode._20_Pos_HomeInnerLeft;
    arAxisCtrl_gb[AxisNo.RoundBelt].SetupMode.FastVelo := CurrentData.Axes.RoundBelt.Homing.FastVelo;
    arAxisCtrl_gb[AxisNo.RoundBelt].SetupMode.SlowVelo := CurrentData.Axes.RoundBelt.Homing.SlowVelo;
    arAxisCtrl_gb[AxisNo.RoundBelt].SetupMode.lrOffset := CurrentData.Axes.RoundBelt.Homing.Offset;
    arAxisCtrl_gb[AxisNo.RoundBelt].SetupMode.lrSetPosition := CurrentData.Axes.RoundBelt.Homing.SetAbsolutePosition;
    arAxisCtrl_gb[AxisNo.RoundBelt].SetupMode.stPosBiasParameter.bSetPostionBias := TRUE;
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin._OpMode.en := ModeHoming;
ELSIF TableMove.xBusy AND AllowRoundBeltMove THEN
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin._OpMode.en := ModePosAbs;
ELSIF AllocateService.AllocateCircleMove.HandShake.Busy AND AllowRoundBeltMove THEN
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Acc := CurrentData.Axes.RoundBelt.HalfAuto.Acceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Dec := CurrentData.Axes.RoundBelt.HalfAuto.Deceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Jerk := CurrentData.Axes.RoundBelt.HalfAuto.Jerk;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Velocity := CurrentData.Axes.RoundBelt.HalfAuto.Velocity;
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin._OpMode.en := ModePosAbs;
ELSIF (AllocateService.AutoMode_AllocateBatchMode.HandShake.Busy OR 
StorageService.AutoMode_ReloadRoundBeltBoxWithRobot.Status.Busy OR 
AllocateService.AutoMode_AllocateBatchMode_Reverse.HandShake.Busy) AND 
AllowRoundBeltMove THEN
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Acc := CurrentData.Axes.RoundBelt.HalfAuto.Acceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Dec := CurrentData.Axes.RoundBelt.HalfAuto.Deceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Jerk := CurrentData.Axes.RoundBelt.HalfAuto.Jerk;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Velocity := CurrentData.Axes.RoundBelt.HalfAuto.Velocity;
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin._OpMode.en := ModePosAbs;
//AutoMode Action
ELSIF (AllocateService.AutoMode_AllocateCircleMove.HandShake.Busy OR 
fbAllocateArea.RoundBeltMoveJob_Status.Busy)AND 
AllowRoundBeltMove THEN
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Acc := CurrentData.Axes.RoundBelt.Auto.Acceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Dec := CurrentData.Axes.RoundBelt.Auto.Deceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Jerk := CurrentData.Axes.RoundBelt.Auto.Jerk;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Velocity := CurrentData.Axes.RoundBelt.Auto.Velocity;
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin._OpMode.en := ModePosAbs;
ELSE
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin.StopDeceleration := 1000;
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin._OpMode.en := E_AXIS_MODE.ModeAH;
END_IF

{endregion}

{region "TurnTable Axis"}
IF AllocateManualCommand.TurnTable.Axis.JOG.MoveFWD AND AllowTurnTable THEN
    arAxisCtrl_gb[AxisNo.TurnTable].VelMode.Acc := CurrentData.Axes.TurnTable.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].VelMode.Dec := CurrentData.Axes.TurnTable.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].VelMode.Jerk := CurrentData.Axes.TurnTable.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.TurnTable].VelMode.Velocity := CurrentData.Axes.TurnTable.Manual.JogVelocity;
    arAxisCtrl_gb[AxisNo.TurnTable].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.TurnTable.Axis.JOG.MoveBWD THEN
    arAxisCtrl_gb[AxisNo.TurnTable].VelMode.Acc := CurrentData.Axes.TurnTable.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].VelMode.Dec := CurrentData.Axes.TurnTable.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].VelMode.Jerk := CurrentData.Axes.TurnTable.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.TurnTable].VelMode.Velocity := CurrentData.Axes.TurnTable.Manual.JogVelocity * -1;
    arAxisCtrl_gb[AxisNo.TurnTable].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.TurnTable.Axis.PTP.Enable THEN
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Acc := CurrentData.Axes.TurnTable.Manual.PtpAcceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Dec := CurrentData.Axes.TurnTable.Manual.PtpDeceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Jerk := CurrentData.Axes.TurnTable.Manual.PtpJerk;
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Velocity := CurrentData.Axes.TurnTable.Manual.PtpVelocity;
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Position := CurrentData.Axes.TurnTable.Manual.PtpPosition;
    arAxisCtrl_gb[AxisNo.TurnTable].Admin._OpMode.en := ModePosAbs;
ELSIF (AllocateManualCommand.TurnTable.Axis.Homing.Execute OR  fbAllocateArea.fbAllocateHome.AxisHomingRequest) AND  AllowTurnTable THEN
    arAxisCtrl_gb[AxisNo.TurnTable].SetupMode.eHomingMode := E_HomingMode._22_Neg_HomeInnerRight;
    arAxisCtrl_gb[AxisNo.TurnTable].SetupMode.FastVelo := CurrentData.Axes.TurnTable.Homing.FastVelo;
    arAxisCtrl_gb[AxisNo.TurnTable].SetupMode.SlowVelo := CurrentData.Axes.TurnTable.Homing.SlowVelo;
    arAxisCtrl_gb[AxisNo.TurnTable].SetupMode.lrOffset := CurrentData.Axes.TurnTable.Homing.Offset;
    arAxisCtrl_gb[AxisNo.TurnTable].SetupMode.lrSetPosition := CurrentData.Axes.TurnTable.Homing.SetAbsolutePosition;
    arAxisCtrl_gb[AxisNo.TurnTable].SetupMode.stPosBiasParameter.bSetPostionBias := TRUE;
    arAxisCtrl_gb[AxisNo.TurnTable].Admin._OpMode.en := ModeHoming;
ELSIF TableMove.xBusy AND AllowTurnTable THEN
    arAxisCtrl_gb[AxisNo.TurnTable].Admin._OpMode.en := ModePosAbs;
ELSIF (AllocateService.TurnTableMove.HandShake.Busy ) AND AllowTurnTable THEN
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Acc := CurrentData.Axes.TurnTable.HalfAuto.Acceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Dec := CurrentData.Axes.TurnTable.HalfAuto.Deceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Jerk := CurrentData.Axes.TurnTable.HalfAuto.Jerk;
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Velocity := CurrentData.Axes.TurnTable.HalfAuto.Velocity;
    arAxisCtrl_gb[AxisNo.TurnTable].Admin._OpMode.en := ModePosAbs;
ELSIF AllocateService.AutoMode_TurnTableMove.HandShake.Busy AND AllowTurnTable THEN
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Acc := CurrentData.Axes.TurnTable.Auto.Acceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Dec := CurrentData.Axes.TurnTable.Auto.Deceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Jerk := CurrentData.Axes.TurnTable.Auto.Jerk;
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Velocity := CurrentData.Axes.TurnTable.Auto.Velocity;
    arAxisCtrl_gb[AxisNo.TurnTable].Admin._OpMode.en := ModePosAbs;
ELSE
    arAxisCtrl_gb[AxisNo.TurnTable].Admin.StopDeceleration := 1000;
    arAxisCtrl_gb[AxisNo.TurnTable].Admin._OpMode.en := E_AXIS_MODE.ModeAH;
END_IF

{endregion}

{region "Rack motor Axis"}
IF StorageManualCommand.RackMotor.Axis.JOG.MoveFWD AND AllowRackMotor THEN
    arAxisCtrl_gb[AxisNo.RackMotor].VelMode.Acc := CurrentData.Axes.RackMotor.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.RackMotor].VelMode.Dec := CurrentData.Axes.RackMotor.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.RackMotor].VelMode.Jerk := CurrentData.Axes.RackMotor.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.RackMotor].VelMode.Velocity := CurrentData.Axes.RackMotor.Manual.JogVelocity;
    arAxisCtrl_gb[AxisNo.RackMotor].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF StorageManualCommand.RackMotor.Axis.JOG.MoveBWD AND AllowRackMotor THEN
    arAxisCtrl_gb[AxisNo.RackMotor].VelMode.Acc := CurrentData.Axes.RackMotor.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.RackMotor].VelMode.Dec := CurrentData.Axes.RackMotor.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.RackMotor].VelMode.Jerk := CurrentData.Axes.RackMotor.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.RackMotor].VelMode.Velocity := CurrentData.Axes.RackMotor.Manual.JogVelocity * -1;
    arAxisCtrl_gb[AxisNo.RackMotor].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF StorageManualCommand.RackMotor.Axis.PTP.Enable AND AllowRackMotor THEN
    arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Acc := CurrentData.Axes.RackMotor.Manual.PtpAcceleration;
    arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Dec := CurrentData.Axes.RackMotor.Manual.PtpDeceleration;
    arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Jerk := CurrentData.Axes.RackMotor.Manual.PtpJerk;
    arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Velocity := CurrentData.Axes.RackMotor.Manual.PtpVelocity;
    arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Position := CurrentData.Axes.RackMotor.Manual.PtpPosition;
    arAxisCtrl_gb[AxisNo.RackMotor].Admin._OpMode.en := ModePosAbs;
ELSIF StorageManualCommand.RackMotor.Axis.Homing.Execute AND AllowRackMotor THEN
    arAxisCtrl_gb[AxisNo.RackMotor].SetupMode.eHomingMode := E_HomingMode._17_Neg_LimitOutterRight;
    arAxisCtrl_gb[AxisNo.RackMotor].SetupMode.FastVelo := CurrentData.Axes.RackMotor.Homing.FastVelo;
    arAxisCtrl_gb[AxisNo.RackMotor].SetupMode.SlowVelo := CurrentData.Axes.RackMotor.Homing.SlowVelo;
    arAxisCtrl_gb[AxisNo.RackMotor].SetupMode.lrOffset := CurrentData.Axes.RackMotor.Homing.Offset;
    arAxisCtrl_gb[AxisNo.RackMotor].SetupMode.lrSetPosition := CurrentData.Axes.RackMotor.Homing.SetAbsolutePosition;
    arAxisCtrl_gb[AxisNo.RackMotor].SetupMode.stPosBiasParameter.bSetPostionBias := TRUE;
    arAxisCtrl_gb[AxisNo.RackMotor].Admin._OpMode.en := ModeHoming;
ELSIF (TableMove.xBusy OR StorageService.AutoMode_AddBoxes.Status.Busy) AND AllowRackMotor THEN
    arAxisCtrl_gb[AxisNo.RackMotor].Admin._OpMode.en := ModePosAbs;
ELSIF fbStorageArea.fbBoxSupplyCtrl.Busy AND 
		fbStorageArea.fbBoxSupplyCtrl.AxisRackMotorBTNHomeRequest AND 
		AllowRackMotor THEN
	arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Acc := CurrentData.Axes.RackMotor.HalfAuto.Acceleration;
	arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Dec := CurrentData.Axes.RackMotor.HalfAuto.Deceleration;
	arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Jerk := CurrentData.Axes.RackMotor.HalfAuto.Jerk;
	arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Velocity := CurrentData.Axes.RackMotor.HalfAuto.Velocity;
	arAxisCtrl_gb[AxisNo.RackMotor].Admin._OpMode.en := ModePosAbs;
ELSE
    arAxisCtrl_gb[AxisNo.RackMotor].Admin.StopDeceleration := 1000;
    arAxisCtrl_gb[AxisNo.RackMotor].Admin._OpMode.en := E_AXIS_MODE.ModeAH;
END_IF

{endregion}
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Clearing" Id="{f7b9b0cb-7b5c-4dcd-9a94-060df5e92c19}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Clearing
VAR
	CylinderIndex : INT;
	MotorIndex : INT;
	ServoIndex : INT;
END_VAR
VAR_INST
	AllCylinderNoError : BOOL := TRUE;
	AllMotorNoError : BOOL := TRUE;
	AllServoNoError : BOOL := TRUE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Disable all cylinder 
FOR CylinderIndex := 1 TO 53 DO
    Cylinder.arCylinder[CylinderIndex].xEnable := FALSE;
END_FOR

// Disable all motor
FOR MotorIndex := 1 TO 26 DO
    Motor.arMotor[MotorIndex].xEnable := FALSE;
END_FOR

// Check cylinder no error
FOR CylinderIndex := 1 TO 53 DO
    IF Cylinder.arCylinder[CylinderIndex].xError THEN
        AllCylinderNoError := FALSE;
        EXIT;
    END_IF
END_FOR

// Check motor no error
FOR MotorIndex := 1 TO 26 DO
    IF Motor.arMotor[MotorIndex].xError THEN
        AllMotorNoError := FALSE;
        EXIT;
    END_IF
END_FOR

FOR ServoIndex := 1 TO 7 DO
	IF arAxisCtrl_gb[ServoIndex].Admin.Axis.Status.Error THEN
		arAxisCtrl_gb[ServoIndex].Admin.ClearError := TRUE;
	END_IF
END_FOR
AllServoNoError := TRUE;
FOR ServoIndex := 1 TO 7 DO
    IF arAxisCtrl_gb[ServoIndex].Admin.Axis.Status.Error THEN
        AllServoNoError := FALSE;
        EXIT;
    END_IF
END_FOR
CASE eModeCurrent OF
    E_UnitMode.Manual:
        GVL_Machine.PackTags[UnitNo.Allocate].Command.UnitMode := E_UnitMode.Manual;
        GVL_Machine.PackTags[UnitNo.Allocate].Command.CntrlCmd := ePMLCommand_Clear;
        GVL_Machine.PackTags[UnitNo.Storage].Command.UnitMode := E_UnitMode.Manual;
        GVL_Machine.PackTags[UnitNo.Storage].Command.CntrlCmd := ePMLCommand_Clear;
        GVL_Machine.PackTags[UnitNo.Shipping].Command.UnitMode := E_UnitMode.Manual;
        GVL_Machine.PackTags[UnitNo.Shipping].Command.CntrlCmd := ePMLCommand_Clear;

        IF GVL_Machine.PackTags[UnitNo.Allocate].Status.StateCurrent = ePMLState_Stopped AND
            GVL_Machine.PackTags[UnitNo.Storage].Status.StateCurrent = ePMLState_Stopped AND
            GVL_Machine.PackTags[UnitNo.Shipping].Status.StateCurrent = ePMLState_Stopped THEN
            IF AllCylinderNoError AND AllMotorNoError AND AllServoNoError THEN
                M_StateComplete();
            END_IF
        END_IF

    E_UnitMode.Auto: ;
        GVL_Machine.PackTags[UnitNo.Allocate].Command.UnitMode := E_UnitMode.Auto;
        GVL_Machine.PackTags[UnitNo.Allocate].Command.CntrlCmd := ePMLCommand_Clear;
        GVL_Machine.PackTags[UnitNo.Storage].Command.UnitMode := E_UnitMode.Auto;
        GVL_Machine.PackTags[UnitNo.Storage].Command.CntrlCmd := ePMLCommand_Clear;
        GVL_Machine.PackTags[UnitNo.Shipping].Command.UnitMode := E_UnitMode.Auto;
        GVL_Machine.PackTags[UnitNo.Shipping].Command.CntrlCmd := ePMLCommand_Clear;

        IF GVL_Machine.PackTags[UnitNo.Allocate].Status.StateCurrent = ePMLState_Stopped AND
            GVL_Machine.PackTags[UnitNo.Storage].Status.StateCurrent = ePMLState_Stopped AND
            GVL_Machine.PackTags[UnitNo.Shipping].Status.StateCurrent = ePMLState_Stopped THEN
            IF AllCylinderNoError AND AllMotorNoError AND AllServoNoError THEN
                M_StateComplete();
            END_IF
        END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ClearOutput" Id="{873f93ff-c409-4eca-ad17-a178722c91ec}" FolderPath="Privite\">
      <Declaration><![CDATA[METHOD PRIVATE M_ClearOutput : BOOL
VAR_INPUT
END_VAR
VAR
	SpaceOutput : ST_OutputTable;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[OUTPUT := SpaceOutput;
M_ClearOutput := true;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Complete" Id="{d708bc1d-909d-41c5-938c-4fa8a3d42458}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Complete
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Completing" Id="{4fc04777-9f54-4a57-badb-2e3830f1ee6b}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Completing
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{560a1df4-f108-4f5f-9158-749967ef08a7}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Execute
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//M_StateComplete();
CASE eModeCurrent OF
    E_UnitMode.Manual:
			M_Manual_Cylinder();
			M_Manual_Axes();
			M_Manual_Motor();
			M_HalfAuto_TableMove();
			IF NOT fbMachineHoming.xBusy THEN
				M_ManualAllocateHoming();
				M_ManualStorageHoming();
				M_ManualShippingHoming();
			END_IF
			M_ManualMachineHome();
			
    E_UnitMode.Auto:
			M_Auto_Axes();
  
END_CASE
//fbAllocateArea.A00_Service();
M_StroageRobotSafeCheck();
IF ErrorTableInitDone THEN
	M_General_AlarmRegister();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_General_AlarmRegister" Id="{3ef4b090-7ef0-4623-ae15-9f802c71cf11}" FolderPath="Privite\">
      <Declaration><![CDATA[METHOD M_General_AlarmRegister : BOOL
VAR_INPUT
END_VAR
VAR
END_VAR
VAR_INST
	bTest 		  : ARRAY[1..200] OF BOOL;
	SafeDoorsOpen : ARRAY[0..20] OF BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[/////  Category ==> 0 :machine Area ,1: StorageArea ,2: AllocateArea ,3: ShippingArea 

// E-Stop
RegisterAlarm(Trigger := Allocate_Estop, 								ID := 001,value := E_Severity.Level7, Message := 'Allocate Estop has trig', Category := 2);
RegisterAlarm(Trigger := Storage_EStop, 								ID := 002,value := E_Severity.Level7, Message := 'Storage Estop has trig', Category := 1);
RegisterAlarm(Trigger := FanucRobot.List.StorageRobot.E_Stop_Output,	ID := 003,value := E_Severity.Level7,Message := 'Storage robot Estop has trig',Category := 1);
RegisterAlarm(Trigger := FanucRobot.List.ShippingRobot.E_Stop_Output,	ID := 004,value := E_Severity.Level7,Message := 'Shipping robot Estop has trig',Category := 1);

//AirPressure
bStorage_AirPressure := NOT( BIT_TO_BOOL( INPUT.bStorage_AirPressure_Ready) ) OR  bTest2;
RegisterAlarm(Trigger := bStorage_AirPressure,							ID := 005,value := E_Severity.Level7,Message := 'Low AirPressure ',Category := 1);


//Homing Service
RegisterAlarm(Trigger := fbMachineHoming.xError,				ID := 11,value := E_Severity.Level4,Message := fbMachineHoming.ErrorMsg,Category := 0);
RegisterAlarm(Trigger := fbStorageArea.fbStorageHoming.xError,	ID := 12,value := E_Severity.Level4,Message := fbStorageArea.fbStorageHoming.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := fballocateArea.fballocateHome.xError,	ID := 13,value := E_Severity.Level4,Message := fballocateArea.fballocateHome.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := fbShippingArea.fbShippingHoming.xError,ID := 14,value := E_Severity.Level4,Message :=fbShippingArea.fbShippingHoming.ErrorMsg,Category := 3);
//Machine Area Service


//Storage Area Service
RegisterAlarm(Trigger := fbStorageArea.fbWarehouse.fbReloadBox.Error,				ID := 21,value := E_Severity.Level4,Message := fbStorageArea.fbWarehouse.fbReloadBox.Status,			Category := 1);
RegisterAlarm(Trigger := fbStorageArea.fbWarehouse.fbFeedInBox.Error,				ID := 22,value := E_Severity.Level4,Message := fbStorageArea.fbWarehouse.fbFeedInBox.Status,			Category := 1);
RegisterAlarm(Trigger := fbStorageArea.fbAddBoxes.Error ,							ID := 23,value := E_Severity.Level4,Message := fbStorageArea.fbAddBoxes.Status,							Category := 1);
RegisterAlarm(Trigger := fbStorageArea.fbBoxSupplyCtrl.Error ,						ID := 24,value := E_Severity.Level4,Message := fbStorageArea.fbBoxSupplyCtrl.Status,					Category := 1);
RegisterAlarm(Trigger := fbStorageArea.fbFeedInEmptyBoxWithRobot.Error ,			ID := 25,value := E_Severity.Level4,Message := fbStorageArea.fbFeedInEmptyBoxWithRobot.Status,			Category := 1);
RegisterAlarm(Trigger := fbStorageArea.fbReloadRoundBeltBoxWithRobot.Error ,		ID := 26,value := E_Severity.Level4,Message := fbStorageArea.fbReloadRoundBeltBoxWithRobot.Status,		Category := 1);
RegisterAlarm(Trigger := fbStorageArea.fbRobotAbsMove.Error ,						ID := 27,value := E_Severity.Level4,Message := fbStorageArea.fbRobotAbsMove.Status,						Category := 1);
RegisterAlarm(Trigger := fbStorageArea.fbRobotRegionMove_AllocatedConveyor.Error ,	ID := 28,value := E_Severity.Level4,Message := fbStorageArea.fbRobotRegionMove_AllocatedConveyor.Status,Category := 1);
RegisterAlarm(Trigger := fbStorageArea.fbRobotRegionMove_BufferArea.Error ,			ID := 29,value := E_Severity.Level4,Message := fbStorageArea.fbRobotRegionMove_BufferArea.Status,		Category := 1);
RegisterAlarm(Trigger := fbStorageArea.fbRobotRegionMove_FeedInConveyor.Error ,		ID := 30,value := E_Severity.Level4,Message := fbStorageArea.fbRobotRegionMove_FeedInConveyor.Status,	Category := 1);
RegisterAlarm(Trigger := fbStorageArea.fbRobotRegionMove_PullOutConveyor.Error ,	ID := 31,value := E_Severity.Level4,Message := fbStorageArea.fbRobotRegionMove_PullOutConveyor.Status,	Category := 1);
RegisterAlarm(Trigger := fbStorageArea.fbRobotRegionMove_RoundBelt.Error ,			ID := 32,value := E_Severity.Level4,Message := fbStorageArea.fbRobotRegionMove_RoundBelt.Status,		Category := 1);
RegisterAlarm(Trigger := fbStorageArea.fbUpperFeedInConveyor.Error ,				ID := 33,value := E_Severity.Level4,Message := fbStorageArea.fbUpperFeedInConveyor.Status,				Category := 1);
RegisterAlarm(Trigger := fbStorageArea.fbWareHouseWithRobotMove.Error ,				ID := 34,value := E_Severity.Level4,Message := fbStorageArea.fbWareHouseWithRobotMove.Status,			Category := 1);

//Storage Cabinet Internal Service
RegisterAlarm(Trigger := fbStorageArea.fbWarehouse.fbFeedInBox.Error, 				ID := 50,value := E_Severity.Level3,Message := fbStorageArea.fbWarehouse.fbFeedInBox.Status,			Category := 1);
RegisterAlarm(Trigger := fbStorageArea.fbWarehouse.fbReloadBox.Error, 				ID := 51,value := E_Severity.Level3,Message := fbStorageArea.fbWarehouse.fbReloadBox.Status,			Category := 1);

//Allocate Area Service
RegisterAlarm(Trigger := fbAllocateArea.fb_AllocateBatchMode.Error ,				ID := 35,value := E_Severity.Level3,Message := fbAllocateArea.fb_AllocateBatchMode.Status,			Category := 2);
RegisterAlarm(Trigger := fbAllocateArea.fb_AllocateBatchMode_Reverse.Error ,		ID := 36,value := E_Severity.Level3,Message := fbAllocateArea.fb_AllocateBatchMode_Reverse.Status,	Category := 2);
RegisterAlarm(Trigger := fbAllocateArea.fbDifferentCVCamera.xError ,				ID := 37,value := E_Severity.Level3,Message := fbAllocateArea.fbDifferentCVCamera.ErrorMsg,			Category := 2);
RegisterAlarm(Trigger := fbAllocateArea.fbOutRobot_BoxMoveReverse.Error ,			ID := 38,value := E_Severity.Level3,Message := fbAllocateArea.fbOutRobot_BoxMoveReverse.Status,		Category := 2);
RegisterAlarm(Trigger := fbAllocateArea.fbOutRobot_EmptyBoxMove.Error ,				ID := 39,value := E_Severity.Level3,Message := fbAllocateArea.fbOutRobot_EmptyBoxMove.Status,		Category := 2);
RegisterAlarm(Trigger := fbAllocateArea.fbOutRobot_RareBoxMove.Error ,				ID := 40,value := E_Severity.Level3,Message := fbAllocateArea.fbOutRobot_RareBoxMove.Status,		Category := 2);
RegisterAlarm(Trigger := fbAllocateArea.fbPulloutCV.Error ,							ID := 41,value := E_Severity.Level3,Message := fbAllocateArea.fbPulloutCV.Status,					Category := 2);
RegisterAlarm(Trigger := fbAllocateArea.RoundBeltControl.xError ,					ID := 42,value := E_Severity.Level3,Message := fbAllocateArea.RoundBeltControl.ErrorMsg,			Category := 2);
RegisterAlarm(Trigger := fbAllocateArea.fbSameSizeCVCamera.xError ,					ID := 43,value := E_Severity.Level3,Message := fbAllocateArea.fbSameSizeCVCamera.ErrorMsg,			Category := 2);
RegisterAlarm(Trigger := fbAllocateArea.TurnTableControl.xError ,					ID := 44,value := E_Severity.Level3,Message := fbAllocateArea.TurnTableControl.ErrorMsg,			Category := 2);
RegisterAlarm(Trigger := fbAllocateArea.fbOutRobot_TurnTableToRoundBelt.Error ,		ID := 45,value := E_Severity.Level3,Message := fbAllocateArea.fbOutRobot_TurnTableToRoundBelt.Status,Category := 2);
RegisterAlarm(Trigger := fbAllocateArea.fbAllocateRobotNeedlingMove.xError, id:= 49,value:= E_Severity.Level3,Message:=fbAllocateArea.fbAllocateRobotNeedlingMove.ErrorMsg,				Category :=2);

//Shipping Area Service
RegisterAlarm(Trigger := fbShippingArea.fbShippingRobot_Left.Error ,			ID := 46,value := E_Severity.Level3,Message := fbShippingArea.fbShippingRobot_Left.Status,Category := 3);
RegisterAlarm(Trigger := fbShippingArea.fbShippingRobot_Right.Error ,			ID := 47,value := E_Severity.Level3,Message := fbShippingArea.fbShippingRobot_Right.Status,Category := 3);
RegisterAlarm(Trigger := fbShippingArea.fbShippingRobot_TransmitCVEnd.Error ,	ID := 48,value := E_Severity.Level3,Message := fbShippingArea.fbShippingRobot_TransmitCVEnd.Status,Category := 3);



// Cylinder Allocate Area component
RegisterAlarm(Trigger := Cylinder.List.fbAllocateRobot_LeftClamp1.xError,		ID := 101,value := E_Severity.Level2,Message := Cylinder.List.fbAllocateRobot_LeftClamp1.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbAllocateRobot_LeftClamp2.xError,		ID := 102,value := E_Severity.Level2,Message := Cylinder.List.fbAllocateRobot_LeftClamp2.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbAllocateRobot_LeftVert1.xError,		ID := 103,value := E_Severity.Level2,Message := Cylinder.List.fbAllocateRobot_LeftVert1.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbAllocateRobot_LeftVert2.xError,		ID := 104,value := E_Severity.Level2,Message := Cylinder.List.fbAllocateRobot_LeftVert2.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbAllocateRobot_RightClamp1.xError,		ID := 105,value := E_Severity.Level2,Message := Cylinder.List.fbAllocateRobot_RightClamp1.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbAllocateRobot_RightClamp2.xError,		ID := 106,value := E_Severity.Level2,Message := Cylinder.List.fbAllocateRobot_RightClamp2.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbAllocateRobot_RightVert1.xError,		ID := 107,value := E_Severity.Level2,Message := Cylinder.List.fbAllocateRobot_RightVert1.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbAllocateRobot_RightVert2.xError,		ID := 108,value := E_Severity.Level2,Message := Cylinder.List.fbAllocateRobot_RightVert2.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbDifferentSizeCV_Block1.xError,			ID := 109,value := E_Severity.Level2,Message := Cylinder.List.fbDifferentSizeCV_Block1.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbRoundBelt_WorkZone_Press.xError,		ID := 110,value := E_Severity.Level2,Message := Cylinder.List.fbRoundBelt_WorkZone_Press.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbRoundBelt_WorkZone_Plug.xError,		ID := 111,value := E_Severity.Level2,Message := Cylinder.List.fbRoundBelt_WorkZone_Plug.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbRoundBelt_ChargeZone_Plug.xError,		ID := 112,value := E_Severity.Level2,Message := Cylinder.List.fbRoundBelt_ChargeZone_Plug.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbRoundBelt_TransmitCVZone_Plug.xError,	ID := 113,value := E_Severity.Level2,Message := Cylinder.List.fbRoundBelt_TransmitCVZone_Plug.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbOutRobot_AsideVert.xError,				ID := 114,value := E_Severity.Level2,Message := Cylinder.List.fbOutRobot_AsideVert.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbOutRobot_BsideVert.xError,				ID := 115,value := E_Severity.Level2,Message := Cylinder.List.fbOutRobot_BsideVert.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbOutRobot_AsideClamp.xError,			ID := 116,value := E_Severity.Level2,Message := Cylinder.List.fbOutRobot_AsideClamp.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbOutRobot_BsideClamp.xError,			ID := 117,value := E_Severity.Level2,Message := Cylinder.List.fbOutRobot_BsideClamp.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbTransmitCV_CamaraHoriz.xError,			ID := 118,value := E_Severity.Level2,Message := Cylinder.List.fbTransmitCV_CamaraHoriz.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbDifferentSizeCV_Press2.xError,			ID := 119,value := E_Severity.Level2,Message := Cylinder.List.fbDifferentSizeCV_Press2.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbDifferentSizeCV_Press1.xError,			ID := 120,value := E_Severity.Level2,Message := Cylinder.List.fbDifferentSizeCV_Press1.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbDifferentSizeCV_Block1.xError,			ID := 121,value := E_Severity.Level2,Message := Cylinder.List.fbDifferentSizeCV_Block1.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbSameSizeCV_Press4.xError,				ID := 122,value := E_Severity.Level2,Message := Cylinder.List.fbSameSizeCV_Press4.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbSameSizeCV_Press3.xError,				ID := 123,value := E_Severity.Level2,Message := Cylinder.List.fbSameSizeCV_Press3.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbSameSizeCV_Press2.xError,				ID := 124,value := E_Severity.Level2,Message := Cylinder.List.fbSameSizeCV_Press2.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbSameSizeCV_Press1.xError,				ID := 125,value := E_Severity.Level2,Message := Cylinder.List.fbSameSizeCV_Press1.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbSameSizeCV_Block2.xError,				ID := 126,value := E_Severity.Level2,Message := Cylinder.List.fbSameSizeCV_Block2.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbSameSizeCV_Block1.xError,				ID := 127,value := E_Severity.Level2,Message := Cylinder.List.fbSameSizeCV_Block1.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbPullOutCV_AsidePress1.xError,			ID := 128,value := E_Severity.Level2,Message := Cylinder.List.fbPullOutCV_AsidePress1.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbPullOutCV_AsidePress2.xError,			ID := 129,value := E_Severity.Level2,Message := Cylinder.List.fbPullOutCV_AsidePress2.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbPullOutCV_AsideBlock.xError,			ID := 130,value := E_Severity.Level2,Message := Cylinder.List.fbPullOutCV_AsideBlock.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbPullOutCV_BsidePress1.xError,			ID := 131,value := E_Severity.Level2,Message := Cylinder.List.fbPullOutCV_BsidePress1.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbPullOutCV_BsidePress2.xError,			ID := 132,value := E_Severity.Level2,Message := Cylinder.List.fbPullOutCV_BsidePress2.ErrorMsg,Category := 2);
RegisterAlarm(Trigger := Cylinder.List.fbPullOutCV_BsideBlock.xError,			ID := 133,value := E_Severity.Level2,Message := Cylinder.List.fbPullOutCV_BsideBlock.ErrorMsg,Category := 2);

// Cyliner Storage Area component
RegisterAlarm(Trigger := Cylinder.List.fbUpCV_FeedInPress1.xError,				ID := 134,value := E_Severity.Level2,Message := Cylinder.List.fbUpCV_FeedInPress1.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbUpCV_FeedInPress2.xError,				ID := 135,value := E_Severity.Level2,Message := Cylinder.List.fbUpCV_FeedInPress2.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbUpCV_DiameterPress.xError,				ID := 136,value := E_Severity.Level2,Message := Cylinder.List.fbUpCV_DiameterPress.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbUpCV_CamaraPress1.xError,				ID := 137,value := E_Severity.Level2,Message := Cylinder.List.fbUpCV_CamaraPress1.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbUpCV_CamaraPress2.xError,				ID := 138,value := E_Severity.Level2,Message := Cylinder.List.fbUpCV_CamaraPress2.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbUpCV_CamaraPress3.xError,				ID := 139,value := E_Severity.Level2,Message := Cylinder.List.fbUpCV_CamaraPress3.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbUpCV_CamaraPress4.xError,				ID := 140,value := E_Severity.Level2,Message := Cylinder.List.fbUpCV_CamaraPress4.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbUpCV_Block1.xError,					ID := 141,value := E_Severity.Level2,Message := Cylinder.List.fbUpCV_Block1.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbUpCV_Block2.xError,					ID := 142,value := E_Severity.Level2,Message := Cylinder.List.fbUpCV_Block2.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbUpCV_Block3.xError,					ID := 143,value := E_Severity.Level2,Message := Cylinder.List.fbUpCV_Block3.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbUpCV_DiameterHoriz.xError,				ID := 144,value := E_Severity.Level2,Message := Cylinder.List.fbUpCV_DiameterHoriz.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbUpCV_DiameterVert.xError,				ID := 145,value := E_Severity.Level2,Message := Cylinder.List.fbUpCV_DiameterVert.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbUpCV_DiameterClamp.xError,				ID := 146,value := E_Severity.Level2,Message := Cylinder.List.fbUpCV_DiameterClamp.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbStackPush.xError,						ID := 147,value := E_Severity.Level2,Message := Cylinder.List.fbStackPush.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbLowCV_Press1.xError,					ID := 148,value := E_Severity.Level2,Message := Cylinder.List.fbLowCV_Press1.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbLowCV_Press2.xError,					ID := 149,value := E_Severity.Level2,Message := Cylinder.List.fbLowCV_Press2.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbLowCV_Press3.xError,					ID := 150,value := E_Severity.Level2,Message := Cylinder.List.fbLowCV_Press3.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbLowCV_Press4.xError,					ID := 151,value := E_Severity.Level2,Message := Cylinder.List.fbLowCV_Press4.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbLowCV_Block1.xError,					ID := 152,value := E_Severity.Level2,Message := Cylinder.List.fbLowCV_Block1.ErrorMsg,Category := 1);
RegisterAlarm(Trigger := Cylinder.List.fbLowCV_Block2.xError,					ID := 153,value := E_Severity.Level2,Message := Cylinder.List.fbLowCV_Block2.ErrorMsg,Category := 1);

// Robot Error
//RegisterAlarm(Trigger := fanucrobot.List.StorageRobot.Error,					ID := 158,value := E_Severity.Level5,Message := fanucrobot.List.StorageRobot.ErrMsg,Category:=1);
//RegisterAlarm(Trigger := fanucrobot.List.ShippingRobot.Error,					ID := 159,value := E_Severity.Level5,Message := fanucrobot.List.ShippingRobot.ErrMsg,Category:=1);


// Servo Error
RegisterAlarm(Trigger := arAxisCtrl_gb[AxisNo.TurnTable].Admin.Axis.Status.Error,ID := 201,value := E_Severity.Level6,Message := 'TurnTable axis has Error',Category := 2);
RegisterAlarm(Trigger := arAxisCtrl_gb[AxisNo.RoundBelt].Admin.Axis.Status.Error,ID := 202,value := E_Severity.Level6,Message := 'Roundbelt axis has Error',Category := 2);
RegisterAlarm(Trigger := arAxisCtrl_gb[AxisNo.Allocate_X].Admin.Axis.Status.Error,ID := 203,value := E_Severity.Level6,Message := 'Allocate_X axis has Error',Category := 2);
RegisterAlarm(Trigger := arAxisCtrl_gb[AxisNo.Allocate_Y].Admin.Axis.Status.Error,ID := 204,value := E_Severity.Level6,Message := 'Allocate_Y axis has Error',Category := 2);
RegisterAlarm(Trigger := arAxisCtrl_gb[AxisNo.OutRobot_X].Admin.Axis.Status.Error,ID := 205,value := E_Severity.Level6,Message := 'OutRobot_X axis has Error',Category := 2);
RegisterAlarm(Trigger := arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin.Axis.Status.Error,ID := 206,value := E_Severity.Level6,Message := 'OutRobot_Y axis has Error',Category := 2);
RegisterAlarm(Trigger := arAxisCtrl_gb[AxisNo.RackMotor].Admin.Axis.Status.Error,ID := 207,value := E_Severity.Level6,Message := 'RackMotor axis has Error',Category := 1);

// ModbusRTU 
RegisterAlarm(Trigger := ComModbusRTU.fb_Warehouse_Modbus[0].Error,ID := 300,value := E_Severity.Level2,Message := ComModbusRTU.fb_Warehouse_Modbus[0].Status,Category := 1);
RegisterAlarm(Trigger := ComModbusRTU.fb_Warehouse_Modbus[1].Error,ID := 301,value := E_Severity.Level2,Message := ComModbusRTU.fb_Warehouse_Modbus[1].Status,Category := 1);
RegisterAlarm(Trigger := ComModbusRTU.fb_Warehouse_Modbus[2].Error,ID := 302,value := E_Severity.Level2,Message := ComModbusRTU.fb_Warehouse_Modbus[2].Status,Category := 1);
RegisterAlarm(Trigger := ComModbusRTU.fb_Warehouse_Modbus[3].Error,ID := 303,value := E_Severity.Level2,Message := ComModbusRTU.fb_Warehouse_Modbus[3].Status,Category := 1);


//Safe Door
SafeDoorsOpen[1] 	:=  NOT INPUT.bSafetyDoor1   AND NOT GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass;	 
SafeDoorsOpen[2] 	:=  NOT INPUT.bSafetyDoor2   AND NOT GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass;	 
SafeDoorsOpen[3] 	:=  NOT INPUT.bSafetyDoor3   AND NOT GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass;	 
SafeDoorsOpen[4] 	:=  NOT INPUT.bSafetyDoor4   AND NOT GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass;
SafeDoorsOpen[5] 	:=  NOT INPUT.bSafetyDoor5   AND NOT GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass;	 
SafeDoorsOpen[6] 	:=  NOT INPUT.bSafetyDoor6   AND NOT GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass;	 
SafeDoorsOpen[7] 	:=  NOT INPUT.bSafetyDoor7   AND NOT GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass;	 
SafeDoorsOpen[8] 	:=  NOT INPUT.bSafetyDoor8   AND NOT GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass;	 
SafeDoorsOpen[9] 	:=  NOT INPUT.bSafetyDoor9   AND NOT GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass;	 
SafeDoorsOpen[10] 	:=  NOT INPUT.bSafetyDoor10   AND NOT GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass;	 
SafeDoorsOpen[11] 	:=  NOT INPUT.bSafetyDoor11   AND NOT GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass;	 
SafeDoorsOpen[12] 	:=  NOT INPUT.bSafetyDoor12   AND NOT GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass;	 
SafeDoorsOpen[13] 	:=  NOT INPUT.bSafetyDoor13   AND NOT GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass;	 
SafeDoorsOpen[14] 	:=  NOT INPUT.bSafetyDoor14   AND NOT GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass;	 
SafeDoorsOpen[15] 	:=  NOT INPUT.bAllocate_Electrical_Cabinet_SafetyDoor   AND NOT GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass;	 
SafeDoorsOpen[16] 	:=  NOT INPUT.bShippingRobot_ElectricalCabinet_SafetyDoor   AND NOT GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass;	 
IF NOT GVL_HMI.Setup.Mechanical.stSafetyByPass.SafeDoorByPass THEN
	RegisterAlarm(Trigger := SafeDoorsOpen[1],  ID := 401, value := E_Severity.Level2, Message := 'Safe door1  Opened',  Category := 1); 
	RegisterAlarm(Trigger := SafeDoorsOpen[2],  ID := 402, value := E_Severity.Level2, Message := 'Safe door2  Opened',  Category := 1); 
	RegisterAlarm(Trigger := SafeDoorsOpen[3],  ID := 403, value := E_Severity.Level2, Message := 'Safe door3  Opened',  Category := 1); 
	RegisterAlarm(Trigger := SafeDoorsOpen[4],  ID := 404, value := E_Severity.Level2, Message := 'Safe door4  Opened',  Category := 1); 
	RegisterAlarm(Trigger := SafeDoorsOpen[5],  ID := 405, value := E_Severity.Level2, Message := 'Safe door5  Opened',  Category := 1); 
	RegisterAlarm(Trigger := SafeDoorsOpen[6],  ID := 406, value := E_Severity.Level2, Message := 'Safe door6  Opened',  Category := 1); 
	RegisterAlarm(Trigger := SafeDoorsOpen[7],  ID := 407, value := E_Severity.Level2, Message := 'Safe door7  Opened',  Category := 1); 
	RegisterAlarm(Trigger := SafeDoorsOpen[8],  ID := 408, value := E_Severity.Level2, Message := 'Safe door8  Opened',  Category := 1); 
	RegisterAlarm(Trigger := SafeDoorsOpen[9],	ID := 409, value := E_Severity.Level2, Message := 'Safe door9  Opened',  Category := 1); 
	RegisterAlarm(Trigger := SafeDoorsOpen[10],	ID := 410, value := E_Severity.Level2, Message := 'Safe door10  Opened',  Category := 1); 
	RegisterAlarm(Trigger := SafeDoorsOpen[11],	ID := 411, value := E_Severity.Level2, Message := 'Safe door11  Opened',  Category := 1); 
	RegisterAlarm(Trigger := SafeDoorsOpen[12],	ID := 412, value := E_Severity.Level2, Message := 'Safe doo12  Opened',  Category := 1); 
	RegisterAlarm(Trigger := SafeDoorsOpen[13],	ID := 413, value := E_Severity.Level2, Message := 'Safe doo13  Opened',  Category := 1); 
	RegisterAlarm(Trigger := SafeDoorsOpen[14],	ID := 414, value := E_Severity.Level2, Message := 'Safe door14  Opened',  Category := 1); 
	RegisterAlarm(Trigger := SafeDoorsOpen[15],	ID := 415, value := E_Severity.Level2, Message := 'Allocate_Electrical_Cabinet_SafetyDoor  Opened',  Category := 1); 
	RegisterAlarm(Trigger := SafeDoorsOpen[16],	ID := 416, value := E_Severity.Level2, Message := 'bShippingRobot_ElectricalCabinet_SafetyDoor  Opened',  Category := 1); 
END_IF

M_General_AlarmRegister := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_GetCylinderError" Id="{10e6797e-0ae1-48b1-a1ef-c777dcfd9688}" FolderPath="Privite\">
      <Declaration><![CDATA[METHOD M_GetCylinderError : BOOL
VAR_INPUT
END_VAR
VAR
	udiCylinderIndex : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR udiCylinderIndex := 1 TO udiMax_CylinderNum DO
	IF Cylinder.arCylinder[udiCylinderIndex].xError THEN
		M_GetCylinderError := TRUE;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_HalfAuto_TableMove" Id="{83a60461-797f-41e8-a820-71275e852ddf}" FolderPath="Privite\HalfAuto\">
      <Declaration><![CDATA[METHOD M_HalfAuto_TableMove
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// TableMove service 
TableMove(
	xDone=> AllocateHalfAutoCommand.TableMove.Status.Done, 
	xBusy=> AllocateHalfAutoCommand.TableMove.Status.Busy, 
	xError=> AllocateHalfAutoCommand.TableMove.Status.Error, 
	xExecute:= AllocateHalfAutoCommand.TableMove.Ctrl.Execute, 
	xAbort:= AllocateHalfAutoCommand.TableMove.Ctrl.Abort,
	xReset :=  AllocateHalfAutoCommand.TableMove.Ctrl.Reset,
	Index:= AllocateHalfAutoCommand.TableMove.Ctrl.Index, 
	CurrentData:= CurrentData, 
	xAborted=> AllocateHalfAutoCommand.TableMove.Status.Aborted);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Held" Id="{420ce41a-bf89-41b1-a8c7-0faea8e9cb0a}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Held
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Holding" Id="{79dc20ca-afb0-4f06-82f1-0ce6b40186e7}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Holding
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Idle" Id="{6f8ed9f5-2f19-457b-9f22-1fe1866c0063}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Idle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eModeCurrent = E_UnitMode.Auto THEN
	GVL_Machine.PackTags[UnitNo.Storage].Command.UnitMode := E_UnitMode.Auto;
	GVL_Machine.PackTags[UnitNo.Allocate].Command.UnitMode := E_UnitMode.Auto;
	GVL_Machine.PackTags[UnitNo.Shipping].Command.UnitMode := E_UnitMode.Auto;
ELSIF eModeCurrent = E_UnitMode.Manual THEN
	GVL_Machine.PackTags[UnitNo.Storage].Command.UnitMode := E_UnitMode.Manual;
	GVL_Machine.PackTags[UnitNo.Allocate].Command.UnitMode := E_UnitMode.Manual;
	GVL_Machine.PackTags[UnitNo.Shipping].Command.UnitMode := E_UnitMode.Manual;
END_IF

M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_MachineHoming" Id="{6cd39fea-2cd0-47af-b417-30a765567e6c}" FolderPath="Privite\Manual\">
      <Declaration><![CDATA[METHOD M_MachineHoming : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbMachineHoming.xExecute :=   Service_Handshake.MachineHome.HandShake.Execute;
fbMachineHoming.xAbort := Machine_Stop;

Service_Handshake.MachineHome.HandShake.Done := fbMachineHoming.xDone;
Service_Handshake.MachineHome.HandShake.Busy := fbMachineHoming.xBusy;
Service_Handshake.MachineHome.HandShake.Error := fbMachineHoming.xError;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Manual_Axes" Id="{1febef1b-de19-40fb-b84d-01cddba8dd63}" FolderPath="Privite\Manual\">
      <Declaration><![CDATA[METHOD PRIVATE M_Manual_Axes
VAR_INPUT
END_VAR

VAR_INST
	AllowAllocateRobotMove : BOOL;
	AllowOutRobotMove : BOOL;
	AllowRoundBeltMove : BOOL;
	AllowTurnTable		:BOOL;
	AllowRackMotor		:BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Safe check
AllowAllocateRobotMove := Cylinder.List.fbAllocateRobot_LeftVert1.InRearPosition AND
    Cylinder.List.fbAllocateRobot_LeftVert2.InRearPosition AND
    Cylinder.List.fbAllocateRobot_RightVert1.InRearPosition AND
    Cylinder.List.fbAllocateRobot_RightVert2.InRearPosition;

AllowOutRobotMove := Cylinder.List.fbOutRobot_AsideVert.InRearPosition AND Cylinder.List.fbOutRobot_BsideVert.InRearPosition;
AllowRoundBeltMove := Cylinder.List.fbRoundBelt_ChargeZone_Plug.InRearPosition AND
    Cylinder.List.fbRoundBelt_TransmitCVZone_Plug.InRearPosition AND
    Cylinder.List.fbRoundBelt_WorkZone_Plug.InRearPosition AND
    Cylinder.List.fbRoundBelt_WorkZone_Press.InRearPosition AND
    AllowAllocateRobotMove AND
    AllowOutRobotMove 
	AND NOT FanucRobot.List.StorageRobot.BZoneInWork AND NOT FanucRobot.List.StorageRobot.Bzone_AllowWork;

AllowTurnTable := Cylinder.List.fbTurntable_Press.InRearPosition;
AllowRackMotor := Cylinder.List.fbStackPush.InRearPosition;

// Axis controll
{region "AllocateRobot AxisX"}

IF AllocateManualCommand.AllocatedRobot.AxisX.JOG.MoveFWD AND AllowAllocateRobotMove  THEN
    arAxisCtrl_gb[AxisNo.Allocate_X].VelMode.Acc := CurrentData.Axes.Allocate_X.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.Allocate_X].VelMode.Dec := CurrentData.Axes.Allocate_X.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.Allocate_X].VelMode.Jerk := CurrentData.Axes.Allocate_X.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.Allocate_X].VelMode.Velocity := CurrentData.Axes.Allocate_X.Manual.JogVelocity;
    arAxisCtrl_gb[AxisNo.Allocate_X].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.AllocatedRobot.AxisX.JOG.MoveBWD AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_X].VelMode.Acc := CurrentData.Axes.Allocate_X.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.Allocate_X].VelMode.Dec := CurrentData.Axes.Allocate_X.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.Allocate_X].VelMode.Jerk := CurrentData.Axes.Allocate_X.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.Allocate_X].VelMode.Velocity := CurrentData.Axes.Allocate_X.Manual.JogVelocity * -1;
    arAxisCtrl_gb[AxisNo.Allocate_X].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.AllocatedRobot.AxisX.PTP.Enable  AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_X].PosMode.Acc := CurrentData.Axes.Allocate_X.Manual.PtpAcceleration;
    arAxisCtrl_gb[AxisNo.Allocate_X].PosMode.Dec := CurrentData.Axes.Allocate_X.Manual.PtpDeceleration;
    arAxisCtrl_gb[AxisNo.Allocate_X].PosMode.Jerk := CurrentData.Axes.Allocate_X.Manual.PtpJerk;
    arAxisCtrl_gb[AxisNo.Allocate_X].PosMode.Velocity := CurrentData.Axes.Allocate_X.Manual.PtpVelocity;
    arAxisCtrl_gb[AxisNo.Allocate_X].PosMode.Position := CurrentData.Axes.Allocate_X.Manual.PtpPosition;
    arAxisCtrl_gb[AxisNo.Allocate_X].Admin._OpMode.en := ModePosAbs;
ELSIF (AllocateManualCommand.AllocatedRobot.AxisX.Homing.Execute OR  fbAllocateArea.fbAllocateHome.AxisHomingRequest)  AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_X].SetupMode.eHomingMode := E_HomingMode._17_Neg_LimitOutterRight;
    arAxisCtrl_gb[AxisNo.Allocate_X].SetupMode.FastVelo := CurrentData.Axes.Allocate_X.Homing.FastVelo;
    arAxisCtrl_gb[AxisNo.Allocate_X].SetupMode.SlowVelo := CurrentData.Axes.Allocate_X.Homing.SlowVelo;
    arAxisCtrl_gb[AxisNo.Allocate_X].SetupMode.lrOffset := CurrentData.Axes.Allocate_X.Homing.Offset;
    arAxisCtrl_gb[AxisNo.Allocate_X].SetupMode.lrSetPosition := CurrentData.Axes.Allocate_X.Homing.SetAbsolutePosition;
    arAxisCtrl_gb[AxisNo.Allocate_X].SetupMode.stPosBiasParameter.bSetPostionBias := TRUE;
    arAxisCtrl_gb[AxisNo.Allocate_X].Admin._OpMode.en := ModeHoming;
ELSIF TableMove.xBusy AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_X].Admin._OpMode.en := ModePosAbs;
ELSIF fbAllocateArea.fbAllocateRobotNeedlingMove.xBusy AND AllowAllocateRobotMove THEN
	arAxisCtrl_gb[AxisNo.Allocate_X].PosMode.Acc := CurrentData.Axes.Allocate_X.Manual.PtpAcceleration;
    arAxisCtrl_gb[AxisNo.Allocate_X].PosMode.Dec := CurrentData.Axes.Allocate_X.Manual.PtpDeceleration;
    arAxisCtrl_gb[AxisNo.Allocate_X].PosMode.Jerk := CurrentData.Axes.Allocate_X.Manual.PtpJerk;
    arAxisCtrl_gb[AxisNo.Allocate_X].PosMode.Velocity := CurrentData.Axes.Allocate_X.Manual.PtpVelocity;
    arAxisCtrl_gb[AxisNo.Allocate_X].Admin._OpMode.en := ModePosAbs;	
  
ELSIF fbAllocateArea.fb_AllocateBatchMode.Busy AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_X].Admin._OpMode.en := ModePosAbs;

					  
ELSE
    arAxisCtrl_gb[AxisNo.Allocate_X].Admin.StopDeceleration := 1000;
    arAxisCtrl_gb[AxisNo.Allocate_X].Admin._OpMode.en := E_AXIS_MODE.ModeAH;
		 
			 
END_IF
{endregion}

{region "AllocateRobot AxisY"}
IF AllocateManualCommand.AllocatedRobot.AxisY.JOG.MoveFWD AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_Y].VelMode.Acc := CurrentData.Axes.Allocate_Y.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.Allocate_Y].VelMode.Dec := CurrentData.Axes.Allocate_Y.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.Allocate_Y].VelMode.Jerk := CurrentData.Axes.Allocate_Y.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.Allocate_Y].VelMode.Velocity := CurrentData.Axes.Allocate_Y.Manual.JogVelocity;
    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.AllocatedRobot.AxisY.JOG.MoveBWD AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_Y].VelMode.Acc := CurrentData.Axes.Allocate_Y.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.Allocate_Y].VelMode.Dec := CurrentData.Axes.Allocate_Y.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.Allocate_Y].VelMode.Jerk := CurrentData.Axes.Allocate_Y.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.Allocate_Y].VelMode.Velocity := CurrentData.Axes.Allocate_Y.Manual.JogVelocity * -1;
    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.AllocatedRobot.AxisY.PTP.Enable  AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Acc := CurrentData.Axes.Allocate_Y.Manual.PtpAcceleration;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Dec := CurrentData.Axes.Allocate_Y.Manual.PtpDeceleration;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Jerk := CurrentData.Axes.Allocate_Y.Manual.PtpJerk;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Velocity := CurrentData.Axes.Allocate_Y.Manual.PtpVelocity;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Position := CurrentData.Axes.Allocate_Y.Manual.PtpPosition;
    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin._OpMode.en := ModePosAbs;
//ELSIF( AllocateManualCommand.AllocatedRobot.AxisY.Homing.Execute OR  fbAllocateArea.fbAllocateHome.AxisHomingRequest ) AND AllowAllocateRobotMove THEN
//    arAxisCtrl_gb[AxisNo.Allocate_Y].SetupMode.eHomingMode := E_HomingMode._36_MoveToAbsHomePoint;
//    arAxisCtrl_gb[AxisNo.Allocate_Y].SetupMode.FastVelo := CurrentData.Axes.Allocate_Y.Homing.FastVelo;
//    arAxisCtrl_gb[AxisNo.Allocate_Y].SetupMode.SlowVelo := CurrentData.Axes.Allocate_Y.Homing.SlowVelo;
//    arAxisCtrl_gb[AxisNo.Allocate_Y].SetupMode.lrOffset := CurrentData.Axes.Allocate_Y.Homing.Offset;
//    arAxisCtrl_gb[AxisNo.Allocate_Y].SetupMode.lrSetPosition := CurrentData.Axes.Allocate_Y.Homing.SetAbsolutePosition;
//    arAxisCtrl_gb[AxisNo.Allocate_Y].SetupMode.stPosBiasParameter.bSetPostionBias := FALSE;
//    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin._OpMode.en := ModeHoming;
ELSIF( AllocateManualCommand.AllocatedRobot.AxisY.Homing.Execute OR  fbAllocateArea.fbAllocateHome.AxisHomingRequest ) AND AllowAllocateRobotMove THEN
	GVL_Machine.AllocatYAxisHome := FALSE;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Acc := CurrentData.Axes.Allocate_Y.Homing.FastVelo.Acc;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Dec := CurrentData.Axes.Allocate_Y.Homing.FastVelo.Dec;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Jerk := CurrentData.Axes.Allocate_Y.Homing.FastVelo.Jerk;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Velocity := CurrentData.Axes.Allocate_Y.Homing.FastVelo.Velocity;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Position := CurrentData.Axes.Allocate_Y.Homing.Offset;
    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin._OpMode.en := ModePosAbs;
		 
    IF arAxisStatus_gb[AxisNo.Allocate_Y].Admin._OpModeAck = ModePosAbs AND arAxisStatus_gb[AxisNo.Allocate_Y].Admin.CmdDone THEN
        GVL_Machine.AllocatYAxisHome := TRUE;
    END_IF
ELSIF TableMove.xBusy AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin._OpMode.en := ModePosAbs;
ELSIF fbAllocateArea.fb_AllocateBatchMode.Busy AND AllowAllocateRobotMove THEN
    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin._OpMode.en := ModePosAbs;
ELSIF fbAllocateArea.fbAllocateRobotNeedlingMove.xBusy AND AllowAllocateRobotMove THEN
	arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Acc := CurrentData.Axes.Allocate_Y.Manual.PtpAcceleration;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Dec := CurrentData.Axes.Allocate_Y.Manual.PtpDeceleration;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Jerk := CurrentData.Axes.Allocate_Y.Manual.PtpJerk;
    arAxisCtrl_gb[AxisNo.Allocate_Y].PosMode.Velocity := CurrentData.Axes.Allocate_Y.Manual.PtpVelocity;
    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin._OpMode.en := ModePosAbs;
ELSE
    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin.StopDeceleration := 1000;
    arAxisCtrl_gb[AxisNo.Allocate_Y].Admin._OpMode.en := E_AXIS_MODE.ModeAH;
END_IF

{EndRegion}

{region "OutRobot AxisX"}
IF AllocateManualCommand.OutRobot.AxisX.JOG.MoveFWD AND AllowOutRobotMove THEN
    arAxisCtrl_gb[AxisNo.OutRobot_X].VelMode.Acc := CurrentData.Axes.OutRobot_X.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_X].VelMode.Dec := CurrentData.Axes.OutRobot_X.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_X].VelMode.Jerk := CurrentData.Axes.OutRobot_X.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.OutRobot_X].VelMode.Velocity := CurrentData.Axes.OutRobot_X.Manual.JogVelocity;
    arAxisCtrl_gb[AxisNo.OutRobot_X].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.OutRobot.AxisX.JOG.MoveBWD AND AllowOutRobotMove THEN
    arAxisCtrl_gb[AxisNo.OutRobot_X].VelMode.Acc := CurrentData.Axes.OutRobot_X.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_X].VelMode.Dec := CurrentData.Axes.OutRobot_X.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_X].VelMode.Jerk := CurrentData.Axes.OutRobot_X.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.OutRobot_X].VelMode.Velocity := CurrentData.Axes.OutRobot_X.Manual.JogVelocity * -1;
    arAxisCtrl_gb[AxisNo.OutRobot_X].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.OutRobot.AxisX.PTP.Enable AND AllowOutRobotMove THEN
    arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Acc := CurrentData.Axes.OutRobot_X.Manual.PtpAcceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Dec := CurrentData.Axes.OutRobot_X.Manual.PtpDeceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Jerk := CurrentData.Axes.OutRobot_X.Manual.PtpJerk;
    arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Velocity := CurrentData.Axes.OutRobot_X.Manual.PtpVelocity;
    arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Position := CurrentData.Axes.OutRobot_X.Manual.PtpPosition;
    arAxisCtrl_gb[AxisNo.OutRobot_X].Admin._OpMode.en := ModePosAbs;
ELSIF (AllocateManualCommand.OutRobot.AxisX.Homing.Execute OR  fbAllocateArea.fbAllocateHome.AxisHomingRequest ) AND AllowOutRobotMove THEN
    arAxisCtrl_gb[AxisNo.OutRobot_X].SetupMode.eHomingMode := E_HomingMode._28_Neg_HomeInnerRight_withLimit;
    arAxisCtrl_gb[AxisNo.OutRobot_X].SetupMode.FastVelo := CurrentData.Axes.OutRobot_X.Homing.FastVelo;
    arAxisCtrl_gb[AxisNo.OutRobot_X].SetupMode.SlowVelo := CurrentData.Axes.OutRobot_X.Homing.SlowVelo;
    arAxisCtrl_gb[AxisNo.OutRobot_X].SetupMode.lrOffset := CurrentData.Axes.OutRobot_X.Homing.Offset;
    arAxisCtrl_gb[AxisNo.OutRobot_X].SetupMode.lrSetPosition := CurrentData.Axes.OutRobot_X.Homing.SetAbsolutePosition;
    arAxisCtrl_gb[AxisNo.OutRobot_X].SetupMode.stPosBiasParameter.bSetPostionBias := TRUE;
    arAxisCtrl_gb[AxisNo.OutRobot_X].Admin._OpMode.en := ModeHoming;
ELSIF TableMove.xBusy AND AllowOutRobotMove THEN
	arAxisCtrl_gb[AxisNo.OutRobot_X].Admin._OpMode.en := ModePosAbs;
ELSIF (AllocateService.AutoMode_BoxMoveReverse.HandShake.Busy 
	  OR AllocateService.AutoMode_EmptyBoxMove.HandShake.Busy 
	  OR AllocateService.AutoMode_RareBoxMove.HandShake.Busy) AND AllowOutRobotMove THEN
	arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Acc := CurrentData.Axes.OutRobot_X.HalfAuto.Acceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Dec := CurrentData.Axes.OutRobot_X.HalfAuto.Deceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Jerk := CurrentData.Axes.OutRobot_X.HalfAuto.Jerk;
    arAxisCtrl_gb[AxisNo.OutRobot_X].PosMode.Velocity := CurrentData.Axes.OutRobot_X.HalfAuto.Velocity;		   
    arAxisCtrl_gb[AxisNo.OutRobot_X].Admin._OpMode.en := ModePosAbs;
ELSE
    arAxisCtrl_gb[AxisNo.OutRobot_X].Admin.StopDeceleration := 1000;
    arAxisCtrl_gb[AxisNo.OutRobot_X].Admin._OpMode.en := E_AXIS_MODE.ModeAH;
END_IF

{Endregion}

{region "OutRobot AxisY"}
IF AllocateManualCommand.OutRobot.AxisY.JOG.MoveFWD AND AllowOutRobotMove THEN
    arAxisCtrl_gb[AxisNo.OutRobot_Y].VelMode.Acc := CurrentData.Axes.OutRobot_Y.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].VelMode.Dec := CurrentData.Axes.OutRobot_Y.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].VelMode.Jerk := CurrentData.Axes.OutRobot_Y.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].VelMode.Velocity := CurrentData.Axes.OutRobot_Y.Manual.JogVelocity;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.OutRobot.AxisY.JOG.MoveBWD AND AllowOutRobotMove THEN
    arAxisCtrl_gb[AxisNo.OutRobot_Y].VelMode.Acc := CurrentData.Axes.OutRobot_Y.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].VelMode.Dec := CurrentData.Axes.OutRobot_Y.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].VelMode.Jerk := CurrentData.Axes.OutRobot_Y.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].VelMode.Velocity := CurrentData.Axes.OutRobot_Y.Manual.JogVelocity * -1;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.OutRobot.AxisY.PTP.Enable AND AllowOutRobotMove THEN
    arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Acc := CurrentData.Axes.OutRobot_Y.Manual.PtpAcceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Dec := CurrentData.Axes.OutRobot_Y.Manual.PtpDeceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Jerk := CurrentData.Axes.OutRobot_Y.Manual.PtpJerk;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Velocity := CurrentData.Axes.OutRobot_Y.Manual.PtpVelocity;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Position := CurrentData.Axes.OutRobot_Y.Manual.PtpPosition;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin._OpMode.en := ModePosAbs;
ELSIF (AllocateManualCommand.OutRobot.AxisY.Homing.Execute OR  fbAllocateArea.fbAllocateHome.AxisHomingRequest) AND AllowOutRobotMove THEN
    arAxisCtrl_gb[AxisNo.OutRobot_Y].SetupMode.eHomingMode := E_HomingMode._28_Neg_HomeInnerRight_withLimit;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].SetupMode.FastVelo := CurrentData.Axes.OutRobot_Y.Homing.FastVelo;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].SetupMode.SlowVelo := CurrentData.Axes.OutRobot_Y.Homing.SlowVelo;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].SetupMode.lrOffset := CurrentData.Axes.OutRobot_Y.Homing.Offset;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].SetupMode.lrSetPosition := CurrentData.Axes.OutRobot_Y.Homing.SetAbsolutePosition;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].SetupMode.stPosBiasParameter.bSetPostionBias := TRUE;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin._OpMode.en := ModeHoming;
ELSIF TableMove.xBusy AND AllowOutRobotMove THEN
	arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin._OpMode.en := ModePosAbs;
ELSIF (AllocateService.AutoMode_BoxMoveReverse.HandShake.Busy 
	  OR AllocateService.AutoMode_EmptyBoxMove.HandShake.Busy 
	  OR AllocateService.AutoMode_RareBoxMove.HandShake.Busy)AND AllowOutRobotMove THEN
	arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Acc := CurrentData.Axes.OutRobot_Y.HalfAuto.Acceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Dec := CurrentData.Axes.OutRobot_Y.HalfAuto.Deceleration;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Jerk := CurrentData.Axes.OutRobot_Y.HalfAuto.Jerk;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].PosMode.Velocity := CurrentData.Axes.OutRobot_Y.HalfAuto.Velocity;		   
    arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin._OpMode.en := ModePosAbs;
ELSE
    arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin.StopDeceleration := 1000;
    arAxisCtrl_gb[AxisNo.OutRobot_Y].Admin._OpMode.en := E_AXIS_MODE.ModeAH;
END_IF

{Endregion}

{region "RoundBelt Axis"}
IF AllocateManualCommand.RoundBelt.Axis.JOG.MoveFWD AND AllowRoundBeltMove THEN
    arAxisCtrl_gb[AxisNo.RoundBelt].VelMode.Acc := CurrentData.Axes.RoundBelt.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].VelMode.Dec := CurrentData.Axes.RoundBelt.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].VelMode.Jerk := CurrentData.Axes.RoundBelt.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.RoundBelt].VelMode.Velocity := CurrentData.Axes.RoundBelt.Manual.JogVelocity;
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.RoundBelt.Axis.JOG.MoveBWD AND AllowRoundBeltMove THEN
    arAxisCtrl_gb[AxisNo.RoundBelt].VelMode.Acc := CurrentData.Axes.RoundBelt.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].VelMode.Dec := CurrentData.Axes.RoundBelt.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].VelMode.Jerk := CurrentData.Axes.RoundBelt.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.RoundBelt].VelMode.Velocity := CurrentData.Axes.RoundBelt.Manual.JogVelocity * -1;
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.RoundBelt.Axis.PTP.Enable AND AllowRoundBeltMove THEN
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Acc := CurrentData.Axes.RoundBelt.Manual.PtpAcceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Dec := CurrentData.Axes.RoundBelt.Manual.PtpDeceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Jerk := CurrentData.Axes.RoundBelt.Manual.PtpJerk;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Velocity := CurrentData.Axes.RoundBelt.Manual.PtpVelocity;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Position := CurrentData.Axes.RoundBelt.Manual.PtpPosition;
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin._OpMode.en := ModePosAbs;
ELSIF (AllocateManualCommand.RoundBelt.Axis.Homing.Execute OR  fbAllocateArea.fbAllocateHome.AxisHomingRequest ) AND AllowRoundBeltMove THEN
    arAxisCtrl_gb[AxisNo.RoundBelt].SetupMode.eHomingMode := E_HomingMode._20_Pos_HomeInnerLeft;
    arAxisCtrl_gb[AxisNo.RoundBelt].SetupMode.FastVelo := CurrentData.Axes.RoundBelt.Homing.FastVelo;
    arAxisCtrl_gb[AxisNo.RoundBelt].SetupMode.SlowVelo := CurrentData.Axes.RoundBelt.Homing.SlowVelo;
    arAxisCtrl_gb[AxisNo.RoundBelt].SetupMode.lrOffset := CurrentData.Axes.RoundBelt.Homing.Offset;
    arAxisCtrl_gb[AxisNo.RoundBelt].SetupMode.lrSetPosition := CurrentData.Axes.RoundBelt.Homing.SetAbsolutePosition;
    arAxisCtrl_gb[AxisNo.RoundBelt].SetupMode.stPosBiasParameter.bSetPostionBias := TRUE;
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin._OpMode.en := ModeHoming;
ELSIF TableMove.xBusy AND AllowRoundBeltMove THEN
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin._OpMode.en := ModePosAbs;
ELSIF AllocateService.AllocateCircleMove.HandShake.Busy AND AllowRoundBeltMove THEN
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Acc := CurrentData.Axes.RoundBelt.HalfAuto.Acceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Dec := CurrentData.Axes.RoundBelt.HalfAuto.Deceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Jerk := CurrentData.Axes.RoundBelt.HalfAuto.Jerk;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Velocity := CurrentData.Axes.RoundBelt.HalfAuto.Velocity;
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin._OpMode.en := ModePosAbs;
ELSIF (AllocateService.AutoMode_AllocateBatchMode.HandShake.Busy OR StorageService.AutoMode_ReloadRoundBeltBoxWithRobot.Status.Busy) AND AllowRoundBeltMove THEN
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Acc := CurrentData.Axes.RoundBelt.HalfAuto.Acceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Dec := CurrentData.Axes.RoundBelt.HalfAuto.Deceleration;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Jerk := CurrentData.Axes.RoundBelt.HalfAuto.Jerk;
    arAxisCtrl_gb[AxisNo.RoundBelt].PosMode.Velocity := CurrentData.Axes.RoundBelt.HalfAuto.Velocity;
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin._OpMode.en := ModePosAbs;
ELSE
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin.StopDeceleration := 1000;
    arAxisCtrl_gb[AxisNo.RoundBelt].Admin._OpMode.en := E_AXIS_MODE.ModeAH;
END_IF

{endregion}

{region "TurnTable Axis"}
IF AllocateManualCommand.TurnTable.Axis.JOG.MoveFWD AND AllowTurnTable THEN
    arAxisCtrl_gb[AxisNo.TurnTable].VelMode.Acc := CurrentData.Axes.TurnTable.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].VelMode.Dec := CurrentData.Axes.TurnTable.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].VelMode.Jerk := CurrentData.Axes.TurnTable.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.TurnTable].VelMode.Velocity := CurrentData.Axes.TurnTable.Manual.JogVelocity;
    arAxisCtrl_gb[AxisNo.TurnTable].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.TurnTable.Axis.JOG.MoveBWD THEN
    arAxisCtrl_gb[AxisNo.TurnTable].VelMode.Acc := CurrentData.Axes.TurnTable.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].VelMode.Dec := CurrentData.Axes.TurnTable.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].VelMode.Jerk := CurrentData.Axes.TurnTable.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.TurnTable].VelMode.Velocity := CurrentData.Axes.TurnTable.Manual.JogVelocity * -1;
    arAxisCtrl_gb[AxisNo.TurnTable].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF AllocateManualCommand.TurnTable.Axis.PTP.Enable THEN
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Acc := CurrentData.Axes.TurnTable.Manual.PtpAcceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Dec := CurrentData.Axes.TurnTable.Manual.PtpDeceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Jerk := CurrentData.Axes.TurnTable.Manual.PtpJerk;
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Velocity := CurrentData.Axes.TurnTable.Manual.PtpVelocity;
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Position := CurrentData.Axes.TurnTable.Manual.PtpPosition;
    arAxisCtrl_gb[AxisNo.TurnTable].Admin._OpMode.en := ModePosAbs;
ELSIF (AllocateManualCommand.TurnTable.Axis.Homing.Execute OR  fbAllocateArea.fbAllocateHome.AxisHomingRequest) AND  AllowTurnTable THEN
    arAxisCtrl_gb[AxisNo.TurnTable].SetupMode.eHomingMode := E_HomingMode._22_Neg_HomeInnerRight;
    arAxisCtrl_gb[AxisNo.TurnTable].SetupMode.FastVelo := CurrentData.Axes.TurnTable.Homing.FastVelo;
    arAxisCtrl_gb[AxisNo.TurnTable].SetupMode.SlowVelo := CurrentData.Axes.TurnTable.Homing.SlowVelo;
    arAxisCtrl_gb[AxisNo.TurnTable].SetupMode.lrOffset := CurrentData.Axes.TurnTable.Homing.Offset;
    arAxisCtrl_gb[AxisNo.TurnTable].SetupMode.lrSetPosition := CurrentData.Axes.TurnTable.Homing.SetAbsolutePosition;
    arAxisCtrl_gb[AxisNo.TurnTable].SetupMode.stPosBiasParameter.bSetPostionBias := TRUE;
    arAxisCtrl_gb[AxisNo.TurnTable].Admin._OpMode.en := ModeHoming;
ELSIF TableMove.xBusy AND AllowTurnTable THEN
    arAxisCtrl_gb[AxisNo.TurnTable].Admin._OpMode.en := ModePosAbs;
ELSIF AllocateService.TurnTableMove.HandShake.Busy AND AllowTurnTable THEN
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Acc := CurrentData.Axes.TurnTable.HalfAuto.Acceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Dec := CurrentData.Axes.TurnTable.HalfAuto.Deceleration;
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Jerk := CurrentData.Axes.TurnTable.HalfAuto.Jerk;
    arAxisCtrl_gb[AxisNo.TurnTable].PosMode.Velocity := CurrentData.Axes.TurnTable.HalfAuto.Velocity;
    arAxisCtrl_gb[AxisNo.TurnTable].Admin._OpMode.en := ModePosAbs;
ELSE
    arAxisCtrl_gb[AxisNo.TurnTable].Admin.StopDeceleration := 1000;
    arAxisCtrl_gb[AxisNo.TurnTable].Admin._OpMode.en := E_AXIS_MODE.ModeAH;
END_IF

{endregion}

{region "Rack motor Axis"}
IF StorageManualCommand.RackMotor.Axis.JOG.MoveFWD AND AllowRackMotor THEN
    arAxisCtrl_gb[AxisNo.RackMotor].VelMode.Acc := CurrentData.Axes.RackMotor.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.RackMotor].VelMode.Dec := CurrentData.Axes.RackMotor.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.RackMotor].VelMode.Jerk := CurrentData.Axes.RackMotor.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.RackMotor].VelMode.Velocity := CurrentData.Axes.RackMotor.Manual.JogVelocity;
    arAxisCtrl_gb[AxisNo.RackMotor].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF StorageManualCommand.RackMotor.Axis.JOG.MoveBWD AND AllowRackMotor THEN
    arAxisCtrl_gb[AxisNo.RackMotor].VelMode.Acc := CurrentData.Axes.RackMotor.Manual.JogAcceleration;
    arAxisCtrl_gb[AxisNo.RackMotor].VelMode.Dec := CurrentData.Axes.RackMotor.Manual.JogDeceleration;
    arAxisCtrl_gb[AxisNo.RackMotor].VelMode.Jerk := CurrentData.Axes.RackMotor.Manual.JogJerk;
    arAxisCtrl_gb[AxisNo.RackMotor].VelMode.Velocity := CurrentData.Axes.RackMotor.Manual.JogVelocity * -1;
    arAxisCtrl_gb[AxisNo.RackMotor].Admin._OpMode.en := E_AXIS_MODE.ModeVel;
ELSIF StorageManualCommand.RackMotor.Axis.PTP.Enable AND AllowRackMotor THEN
    arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Acc := CurrentData.Axes.RackMotor.Manual.PtpAcceleration;
    arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Dec := CurrentData.Axes.RackMotor.Manual.PtpDeceleration;
    arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Jerk := CurrentData.Axes.RackMotor.Manual.PtpJerk;
    arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Velocity := CurrentData.Axes.RackMotor.Manual.PtpVelocity;
    arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Position := CurrentData.Axes.RackMotor.Manual.PtpPosition;
    arAxisCtrl_gb[AxisNo.RackMotor].Admin._OpMode.en := ModePosAbs;
ELSIF (StorageManualCommand.RackMotor.Axis.Homing.Execute OR fbStorageArea.fbStorageHoming.RackMotorHomeRequest) AND AllowRackMotor THEN
    arAxisCtrl_gb[AxisNo.RackMotor].SetupMode.eHomingMode := E_HomingMode._17_Neg_LimitOutterRight;
    arAxisCtrl_gb[AxisNo.RackMotor].SetupMode.FastVelo := CurrentData.Axes.RackMotor.Homing.FastVelo;
    arAxisCtrl_gb[AxisNo.RackMotor].SetupMode.SlowVelo := CurrentData.Axes.RackMotor.Homing.SlowVelo;
    arAxisCtrl_gb[AxisNo.RackMotor].SetupMode.lrOffset := CurrentData.Axes.RackMotor.Homing.Offset;
    arAxisCtrl_gb[AxisNo.RackMotor].SetupMode.lrSetPosition := CurrentData.Axes.RackMotor.Homing.SetAbsolutePosition;
    arAxisCtrl_gb[AxisNo.RackMotor].SetupMode.stPosBiasParameter.bSetPostionBias := TRUE;
    arAxisCtrl_gb[AxisNo.RackMotor].Admin._OpMode.en := ModeHoming;
ELSIF (TableMove.xBusy OR StorageService.AutoMode_AddBoxes.Status.Busy) AND AllowRackMotor THEN
    arAxisCtrl_gb[AxisNo.RackMotor].Admin._OpMode.en := ModePosAbs;
ELSIF fbStorageArea.fbBoxSupplyCtrl.Busy AND 
		fbStorageArea.fbBoxSupplyCtrl.AxisRackMotorBTNHomeRequest AND 
		AllowRackMotor THEN
	arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Acc := CurrentData.Axes.RackMotor.HalfAuto.Acceleration;
	arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Dec := CurrentData.Axes.RackMotor.HalfAuto.Deceleration;
	arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Jerk := CurrentData.Axes.RackMotor.HalfAuto.Jerk;
	arAxisCtrl_gb[AxisNo.RackMotor].PosMode.Velocity := CurrentData.Axes.RackMotor.HalfAuto.Velocity;
	arAxisCtrl_gb[AxisNo.RackMotor].Admin._OpMode.en := ModePosAbs;
			 
ELSE
    arAxisCtrl_gb[AxisNo.RackMotor].Admin.StopDeceleration := 1000;
    arAxisCtrl_gb[AxisNo.RackMotor].Admin._OpMode.en := E_AXIS_MODE.ModeAH;
END_IF

{endregion}
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Manual_Cylinder" Id="{cbaf563d-59fe-4de2-b76e-928a4c9b9648}" FolderPath="Privite\Manual\">
      <Declaration><![CDATA[METHOD PRIVATE M_Manual_Cylinder
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CylinderManualCtrl[1](bTrigger:=StorageManualCommand.UpCV.FeedInPress1.Exetend);
CylinderManualCtrl[2](bTrigger:=StorageManualCommand.UpCV.FeedInPress2.Exetend);
CylinderManualCtrl[3](bTrigger:=StorageManualCommand.UpCV.DiameterPress.Exetend);
CylinderManualCtrl[4](bTrigger:=StorageManualCommand.UpCV.CamaraPress1.Exetend);
CylinderManualCtrl[5](bTrigger:=StorageManualCommand.UpCV.CamaraPress2.Exetend);
CylinderManualCtrl[6](bTrigger:=StorageManualCommand.UpCV.CamaraPress3.Exetend);
CylinderManualCtrl[7](bTrigger:=StorageManualCommand.UpCV.CamaraPress4.Exetend);
CylinderManualCtrl[8](bTrigger:=StorageManualCommand.UpCV.Block1.Exetend);
CylinderManualCtrl[9](bTrigger:=StorageManualCommand.UpCV.Block2.Exetend);
CylinderManualCtrl[10](bTrigger:=StorageManualCommand.UpCV.Block3.Exetend);
CylinderManualCtrl[11](bTrigger:=StorageManualCommand.UpCV.DiameterHoriz.Exetend);
CylinderManualCtrl[12](bTrigger:=StorageManualCommand.UpCV.DiameterVert.Exetend);
CylinderManualCtrl[13](bTrigger:=StorageManualCommand.UpCV.DiameterClamp.Exetend);
CylinderManualCtrl[14](bTrigger:=StorageManualCommand.UpCV.StackPush.Exetend);
CylinderManualCtrl[15](bTrigger:=AllocateManualCommand.PullOutCV.AsidePress1.Exetend);
CylinderManualCtrl[16](bTrigger:=AllocateManualCommand.PullOutCV.AsidePress2.Exetend);
CylinderManualCtrl[17](bTrigger:=AllocateManualCommand.PullOutCV.AsideBlock.Exetend);
CylinderManualCtrl[18](bTrigger:=AllocateManualCommand.PullOutCV.BsidePress1.Exetend);
CylinderManualCtrl[19](bTrigger:=AllocateManualCommand.PullOutCV.BsidePress2.Exetend);
CylinderManualCtrl[20](bTrigger:=AllocateManualCommand. PullOutCV.BsideBlock.Exetend);
CylinderManualCtrl[21](bTrigger:=StorageManualCommand.LowCV.Press1.Exetend);
CylinderManualCtrl[22](bTrigger:=StorageManualCommand.LowCV.Press2.Exetend);
CylinderManualCtrl[23](bTrigger:=StorageManualCommand.LowCV.Press3.Exetend);
CylinderManualCtrl[24](bTrigger:=StorageManualCommand.LowCV.Press4.Exetend);
CylinderManualCtrl[25](bTrigger:=StorageManualCommand.LowCV.Block1.Exetend);
CylinderManualCtrl[26](bTrigger:=StorageManualCommand.LowCV.Block2.Exetend);
CylinderManualCtrl[27](bTrigger:=AllocateManualCommand.AllocatedRobot.LeftVert1.Exetend);
CylinderManualCtrl[28](bTrigger:=AllocateManualCommand.AllocatedRobot.LeftVert2.Exetend);
CylinderManualCtrl[29](bTrigger:=AllocateManualCommand.AllocatedRobot.RightVert1.Exetend);
CylinderManualCtrl[30](bTrigger:=AllocateManualCommand.AllocatedRobot.RightVert2.Exetend);
CylinderManualCtrl[31](bTrigger:=AllocateManualCommand.AllocatedRobot.LeftClamp1.Exetend);
CylinderManualCtrl[32](bTrigger:=AllocateManualCommand.AllocatedRobot.LeftClamp2.Exetend);
CylinderManualCtrl[33](bTrigger:=AllocateManualCommand.AllocatedRobot.RightClamp1.Exetend);
CylinderManualCtrl[34](bTrigger:=AllocateManualCommand.AllocatedRobot.RightClamp2.Exetend);
CylinderManualCtrl[35](bTrigger:=AllocateManualCommand.RoundBelt.WorkZone_Press.Exetend);
CylinderManualCtrl[36](bTrigger:=AllocateManualCommand.RoundBelt.WorkZone_Plug.Exetend);
CylinderManualCtrl[37](bTrigger:=AllocateManualCommand.RoundBelt.ChargeZone_Plug.Exetend);
CylinderManualCtrl[38](bTrigger:=AllocateManualCommand.RoundBelt.TransmitCVZone_Plug.Exetend);
CylinderManualCtrl[39](bTrigger:=AllocateManualCommand.OutRobot.AsideVert.Exetend);
CylinderManualCtrl[40](bTrigger:=AllocateManualCommand.OutRobot.BsideVert.Exetend);
CylinderManualCtrl[41](bTrigger:=AllocateManualCommand.OutRobot.AsideClamp.Exetend);
CylinderManualCtrl[42](bTrigger:=AllocateManualCommand.OutRobot.BsideClamp.Exetend);
CylinderManualCtrl[43](bTrigger:=AllocateManualCommand.TransCV.CamaraHoriz .Exetend);
CylinderManualCtrl[44](bTrigger:=AllocateManualCommand.TransCV.DifferentSizeCV_Press2.Exetend);
CylinderManualCtrl[45](bTrigger:=AllocateManualCommand.TransCV.DifferentSizeCV_Press1.Exetend);
CylinderManualCtrl[46](bTrigger:=AllocateManualCommand.TransCV.DifferentSizeCV_Block1.Exetend);
CylinderManualCtrl[47](bTrigger:=AllocateManualCommand.TransCV.SameSizeCV_Press4.Exetend);
CylinderManualCtrl[48](bTrigger:=AllocateManualCommand.TransCV.SameSizeCV_Press3.Exetend);
CylinderManualCtrl[49](bTrigger:=AllocateManualCommand.TransCV.SameSizeCV_Press2.Exetend);
CylinderManualCtrl[50](bTrigger:=AllocateManualCommand.TransCV.SameSizeCV_Press1.Exetend);
CylinderManualCtrl[51](bTrigger:=AllocateManualCommand.TransCV.SameSizeCV_Block2.Exetend);
CylinderManualCtrl[52](bTrigger:=AllocateManualCommand.TransCV.SameSizeCV_Block1 .Exetend);
CylinderManualCtrl[53](bTrigger:=AllocateManualCommand.TurnTable.Press.Exetend);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Manual_Motor" Id="{075b07e5-6665-4c9d-aa5b-ce8d0fed42d1}" FolderPath="Privite\Manual\">
      <Declaration><![CDATA[METHOD PRIVATE M_Manual_Motor
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[/////////////////////////   WareHous A
MotorManualCtrl[1](bForward	:=StorageManualCommand.WareHouseCV_01.Forward	);
MotorManualCtrl[2](bForward	:=StorageManualCommand.WareHouseCV_02.Forward	);
MotorManualCtrl[3](bForward	:=StorageManualCommand.WareHouseCV_03.Forward	);
MotorManualCtrl[4](bForward	:=StorageManualCommand.WareHouseCV_04.Forward	);
MotorManualCtrl[5](bForward	:=StorageManualCommand.WareHouseCV_05.Forward	);
MotorManualCtrl[6](bForward	:=StorageManualCommand.WareHouseCV_06.Forward	);
MotorManualCtrl[7](bForward	:=StorageManualCommand.WareHouseCV_07.Forward	);
MotorManualCtrl[8](bForward	:=StorageManualCommand.WareHouseCV_08.Forward	);
MotorManualCtrl[9](bForward	:=StorageManualCommand.WareHouseCV_09.Forward	);
MotorManualCtrl[10](bForward:=StorageManualCommand.WareHouseCV_10.Forward	);
MotorManualCtrl[11](bForward:=StorageManualCommand.WareHouseCV_11.Forward	);
MotorManualCtrl[12](bForward:=StorageManualCommand.WareHouseCV_12.Forward	);
MotorManualCtrl[13](bForward:=StorageManualCommand.WareHouseCV_13.Forward	);
MotorManualCtrl[14](bForward:=StorageManualCommand.WareHouseCV_14.Forward	);
MotorManualCtrl[15](bForward:=StorageManualCommand.WareHouseCV_15.Forward	);
MotorManualCtrl[16](bForward:=StorageManualCommand.WareHouseCV_16.Forward	);
MotorManualCtrl[17](bForward:=StorageManualCommand.WareHouseCV_17.Forward	);
MotorManualCtrl[18](bForward:=StorageManualCommand.WareHouseCV_18.Forward	);
MotorManualCtrl[19](bForward:=StorageManualCommand.WareHouseCV_19.Forward	);
MotorManualCtrl[20](bForward:=StorageManualCommand.WareHouseCV_20.Forward	);
MotorManualCtrl[21](bForward:=StorageManualCommand.UpCV.UpCV.Forward	);
MotorManualCtrl[22](bForward:=StorageManualCommand.LowCV.LowCV.Forward	);

MotorManualCtrl[23](bForward:=AllocateManualCommand.PullOutCV.PullOutCV_A.Forward);
MotorManualCtrl[24](bForward:=AllocateManualCommand.PullOutCV.PullOutCV_B.Forward);
MotorManualCtrl[25](bForward:=AllocateManualCommand.TransCV.TransmitSameSideCV.Forward);
MotorManualCtrl[26](bForward:=AllocateManualCommand.TransCV.TransmitDifferentSideCV.Forward);


MotorManualCtrl[1](bBackward	:=StorageManualCommand.WareHouseCV_10.Backward	);
MotorManualCtrl[2](bBackward	:=StorageManualCommand.WareHouseCV_09.Backward	);
MotorManualCtrl[3](bBackward	:=StorageManualCommand.WareHouseCV_08.Backward	);
MotorManualCtrl[4](bBackward	:=StorageManualCommand.WareHouseCV_07.Backward	);
MotorManualCtrl[5](bBackward	:=StorageManualCommand.WareHouseCV_06.Backward	);
MotorManualCtrl[6](bBackward	:=StorageManualCommand.WareHouseCV_05.Backward	);
MotorManualCtrl[7](bBackward	:=StorageManualCommand.WareHouseCV_04.Backward	);
MotorManualCtrl[8](bBackward	:=StorageManualCommand.WareHouseCV_03.Backward	);
MotorManualCtrl[9](bBackward	:=StorageManualCommand.WareHouseCV_02.Backward	);
MotorManualCtrl[10](bBackward:=StorageManualCommand.WareHouseCV_01.Backward	);
MotorManualCtrl[11](bBackward:=StorageManualCommand.WareHouseCV_20.Backward	);
MotorManualCtrl[12](bBackward:=StorageManualCommand.WareHouseCV_19.Backward	);
MotorManualCtrl[13](bBackward:=StorageManualCommand.WareHouseCV_18.Backward	);
MotorManualCtrl[14](bBackward:=StorageManualCommand.WareHouseCV_17.Backward	);
MotorManualCtrl[15](bBackward:=StorageManualCommand.WareHouseCV_16.Backward	);
MotorManualCtrl[16](bBackward:=StorageManualCommand.WareHouseCV_15.Backward	);
MotorManualCtrl[17](bBackward:=StorageManualCommand.WareHouseCV_14.Backward	);
MotorManualCtrl[18](bBackward:=StorageManualCommand.WareHouseCV_13.Backward	);
MotorManualCtrl[19](bBackward:=StorageManualCommand.WareHouseCV_12.Backward	);
MotorManualCtrl[20](bBackward:=StorageManualCommand.WareHouseCV_11.Backward	);
MotorManualCtrl[21](bBackward:=StorageManualCommand.UpCV.UpCV.Backward	);
MotorManualCtrl[22](bBackward:=StorageManualCommand.LowCV.LowCV.Backward	);

MotorManualCtrl[23](bBackward:=AllocateManualCommand.PullOutCV.PullOutCV_A.Backward);
MotorManualCtrl[24](bBackward:=AllocateManualCommand.PullOutCV.PullOutCV_B.Backward);
MotorManualCtrl[25](bBackward:=AllocateManualCommand.TransCV.TransmitSameSideCV.Backward);
MotorManualCtrl[26](bBackward:=AllocateManualCommand.TransCV.TransmitDifferentSideCV.Backward);

MotorManualCtrl[1](bStop	:=StorageManualCommand.WareHouseCV_10.Stopped	);
MotorManualCtrl[2](bStop	:=StorageManualCommand.WareHouseCV_09.Stopped	);
MotorManualCtrl[3](bStop	:=StorageManualCommand.WareHouseCV_08.Stopped	);
MotorManualCtrl[4](bStop	:=StorageManualCommand.WareHouseCV_07.Stopped	);
MotorManualCtrl[5](bStop	:=StorageManualCommand.WareHouseCV_06.Stopped	);
MotorManualCtrl[6](bStop	:=StorageManualCommand.WareHouseCV_05.Stopped	);
MotorManualCtrl[7](bStop	:=StorageManualCommand.WareHouseCV_04.Stopped	);
MotorManualCtrl[8](bStop	:=StorageManualCommand.WareHouseCV_03.Stopped	);
MotorManualCtrl[9](bStop	:=StorageManualCommand.WareHouseCV_02.Stopped	);
MotorManualCtrl[10](bStop:=StorageManualCommand.WareHouseCV_01.Stopped	);
MotorManualCtrl[11](bStop:=StorageManualCommand.WareHouseCV_20.Stopped	);
MotorManualCtrl[12](bStop:=StorageManualCommand.WareHouseCV_19.Stopped	);
MotorManualCtrl[13](bStop:=StorageManualCommand.WareHouseCV_18.Stopped	);
MotorManualCtrl[14](bStop:=StorageManualCommand.WareHouseCV_17.Stopped	);
MotorManualCtrl[15](bStop:=StorageManualCommand.WareHouseCV_16.Stopped	);
MotorManualCtrl[16](bStop:=StorageManualCommand.WareHouseCV_15.Stopped	);
MotorManualCtrl[17](bStop:=StorageManualCommand.WareHouseCV_14.Stopped	);
MotorManualCtrl[18](bStop:=StorageManualCommand.WareHouseCV_13.Stopped	);
MotorManualCtrl[19](bStop:=StorageManualCommand.WareHouseCV_12.Stopped	);
MotorManualCtrl[20](bStop:=StorageManualCommand.WareHouseCV_11.Stopped	);
MotorManualCtrl[21](bStop:=StorageManualCommand.UpCV.UpCV.Stopped	);
MotorManualCtrl[22](bStop:=StorageManualCommand.LowCV.LowCV.Stopped	);

MotorManualCtrl[23](bStop:=AllocateManualCommand.PullOutCV.PullOutCV_A.Stopped);
MotorManualCtrl[24](bStop:=AllocateManualCommand.PullOutCV.PullOutCV_B.Stopped);
MotorManualCtrl[25](bStop:=AllocateManualCommand.TransCV.TransmitSameSideCV.Stopped);
MotorManualCtrl[26](bStop:=AllocateManualCommand.TransCV.TransmitDifferentSideCV.Stopped);

(*IF StorageManualCommand.WareHouseCV_10.Forward THEN
    Motor.List.WareHouseCV_10.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_10.Backward THEN
    Motor.List.WareHouseCV_10.M_MoveBackward());
ELSIF
    StorageManualCommand.WareHouseCV_10.Stopped OR NOT (StorageManualCommand.WareHouseCV_10.Forward OR StorageManualCommand.WareHouseCV_10.Backward)
    THEN
    Motor.List.WareHouseCV_10.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_09.Forward THEN
    Motor.List.WareHouseCV_09.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_09.Backward THEN
    Motor.List.WareHouseCV_09.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_09.Stopped OR NOT (StorageManualCommand.WareHouseCV_09.Forward OR StorageManualCommand.WareHouseCV_09.Backward)
    THEN
    Motor.List.WareHouseCV_09.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_08.Forward THEN
    Motor.List.WareHouseCV_08.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_08.Backward THEN
    Motor.List.WareHouseCV_08.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_08.Stopped OR NOT (StorageManualCommand.WareHouseCV_08.Forward OR StorageManualCommand.WareHouseCV_08.Backward)
    THEN
    Motor.List.WareHouseCV_08.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_07.Forward THEN
    Motor.List.WareHouseCV_07.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_07.Backward THEN
    Motor.List.WareHouseCV_07.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_07.Stopped OR NOT (StorageManualCommand.WareHouseCV_07.Forward OR StorageManualCommand.WareHouseCV_07.Backward)
    THEN
    Motor.List.WareHouseCV_07.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_06.Forward THEN
    Motor.List.WareHouseCV_06.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_06.Backward THEN
    Motor.List.WareHouseCV_06.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_06.Stopped OR NOT (StorageManualCommand.WareHouseCV_06.Forward OR StorageManualCommand.WareHouseCV_06.Backward)
    THEN
    Motor.List.WareHouseCV_06.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_05.Forward THEN
    Motor.List.WareHouseCV_05.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_05.Backward THEN
    Motor.List.WareHouseCV_05.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_05.Stopped OR NOT (StorageManualCommand.WareHouseCV_05.Forward OR StorageManualCommand.WareHouseCV_05.Backward)
    THEN
    Motor.List.WareHouseCV_05.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_04.Forward THEN
    Motor.List.WareHouseCV_04.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_04.Backward THEN
    Motor.List.WareHouseCV_04.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_04.Stopped OR NOT (StorageManualCommand.WareHouseCV_04.Forward OR StorageManualCommand.WareHouseCV_04.Backward)
    THEN
    Motor.List.WareHouseCV_04.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_03.Forward THEN
    Motor.List.WareHouseCV_03.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_03.Backward THEN
    Motor.List.WareHouseCV_03.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_03.Stopped OR NOT (StorageManualCommand.WareHouseCV_03.Forward OR StorageManualCommand.WareHouseCV_03.Backward)
    THEN
    Motor.List.WareHouseCV_03.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_02.Forward THEN
    Motor.List.WareHouseCV_02.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_02.Backward THEN
    Motor.List.WareHouseCV_02.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_02.Stopped OR NOT (StorageManualCommand.WareHouseCV_02.Forward OR StorageManualCommand.WareHouseCV_02.Backward)
    THEN
    Motor.List.WareHouseCV_02.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_01.Forward THEN
    Motor.List.WareHouseCV_01.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_01.Backward THEN
    Motor.List.WareHouseCV_01.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_01.Stopped OR NOT (StorageManualCommand.WareHouseCV_01.Forward OR StorageManualCommand.WareHouseCV_01.Backward)
    THEN
    Motor.List.WareHouseCV_01.M_MotorStop());
END_IF

///////////////////////      Warehouse B
IF StorageManualCommand.WareHouseCV_11.Forward THEN
    Motor.List.WareHouseCV_11.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_11.Backward THEN
    Motor.List.WareHouseCV_11.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_11.Stopped OR NOT (StorageManualCommand.WareHouseCV_11.Forward OR StorageManualCommand.WareHouseCV_11.Backward)
    THEN
    Motor.List.WareHouseCV_11.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_12.Forward THEN
    Motor.List.WareHouseCV_12.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_12.Backward THEN
    Motor.List.WareHouseCV_12.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_12.Stopped OR NOT (StorageManualCommand.WareHouseCV_12.Forward OR StorageManualCommand.WareHouseCV_12.Backward)
    THEN
    Motor.List.WareHouseCV_12.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_13.Forward THEN
    Motor.List.WareHouseCV_13.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_13.Backward THEN
    Motor.List.WareHouseCV_13.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_13.Stopped OR NOT (StorageManualCommand.WareHouseCV_13.Forward OR StorageManualCommand.WareHouseCV_13.Backward)
    THEN
    Motor.List.WareHouseCV_13.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_14.Forward THEN
    Motor.List.WareHouseCV_14.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_14.Backward THEN
    Motor.List.WareHouseCV_14.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_14.Stopped OR NOT (StorageManualCommand.WareHouseCV_14.Forward OR StorageManualCommand.WareHouseCV_14.Backward)
    THEN
    Motor.List.WareHouseCV_14.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_15.Forward THEN
    Motor.List.WareHouseCV_15.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_15.Backward THEN
    Motor.List.WareHouseCV_15.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_15.Stopped OR NOT (StorageManualCommand.WareHouseCV_15.Forward OR StorageManualCommand.WareHouseCV_15.Backward)
    THEN
    Motor.List.WareHouseCV_15.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_16.Forward THEN
    Motor.List.WareHouseCV_16.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_16.Backward THEN
    Motor.List.WareHouseCV_16.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_16.Stopped OR NOT (StorageManualCommand.WareHouseCV_16.Forward OR StorageManualCommand.WareHouseCV_16.Backward)
    THEN
    Motor.List.WareHouseCV_16.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_17.Forward THEN
    Motor.List.WareHouseCV_17.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_17.Backward THEN
    Motor.List.WareHouseCV_17.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_17.Stopped OR NOT (StorageManualCommand.WareHouseCV_17.Forward OR StorageManualCommand.WareHouseCV_17.Backward)
    THEN
    Motor.List.WareHouseCV_17.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_18.Forward THEN
    Motor.List.WareHouseCV_18.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_18.Backward THEN
    Motor.List.WareHouseCV_18.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_18.Stopped OR NOT (StorageManualCommand.WareHouseCV_18.Forward OR StorageManualCommand.WareHouseCV_18.Backward)
    THEN
    Motor.List.WareHouseCV_18.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_19.Forward THEN
    Motor.List.WareHouseCV_19.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_19.Backward THEN
    Motor.List.WareHouseCV_19.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_19.Stopped OR NOT (StorageManualCommand.WareHouseCV_19.Forward OR StorageManualCommand.WareHouseCV_19.Backward)
    THEN
    Motor.List.WareHouseCV_19.M_MotorStop());
END_IF

IF StorageManualCommand.WareHouseCV_20.Forward THEN
    Motor.List.WareHouseCV_20.M_MoveForward());
ELSIF StorageManualCommand.WareHouseCV_20.Backward THEN
    Motor.List.WareHouseCV_20.M_MoveBackward());
ELSIF StorageManualCommand.WareHouseCV_20.Stopped OR NOT (StorageManualCommand.WareHouseCV_20.Forward OR StorageManualCommand.WareHouseCV_20.Backward)
    THEN
    Motor.List.WareHouseCV_20.M_MotorStop());
END_IF

///////////////////////////////////   TransCV
IF AllocateManualCommand.TransCV.TransmitSameSideCV.Forward THEN
    Motor.List.TransmitSameSideCV.M_MoveForward());
ELSIF AllocateManualCommand.TransCV.TransmitSameSideCV.Backward THEN
    Motor.List.TransmitSameSideCV.M_MoveBackward());
ELSIF AllocateManualCommand.TransCV.TransmitSameSideCV.Stopped OR NOT 
	(AllocateManualCommand.TransCV.TransmitSameSideCV.Forward OR AllocateManualCommand.TransCV.TransmitSameSideCV.Backward) THEN
    Motor.List.TransmitSameSideCV.M_MotorStop());
END_IF

IF AllocateManualCommand.TransCV.TransmitDifferentSideCV.Forward THEN
    Motor.List.TransmitDifferentSideCV.M_MoveForward());
ELSIF AllocateManualCommand.TransCV.TransmitDifferentSideCV.Backward THEN
    Motor.List.TransmitDifferentSideCV.M_MoveBackward());
ELSIF AllocateManualCommand.TransCV.TransmitDifferentSideCV.Stopped OR NOT 
	(AllocateManualCommand.TransCV.TransmitDifferentSideCV.Forward OR AllocateManualCommand.TransCV.TransmitDifferentSideCV.Backward) THEN
    Motor.List.TransmitDifferentSideCV.M_MotorStop());
END_IF

//////////////////////////////////////   PullOutCV
IF AllocateManualCommand.PullOutCV.PullOutCV_A.Forward THEN
    Motor.List.PullOutCV_A.M_MoveForward());
ELSIF AllocateManualCommand.PullOutCV.PullOutCV_A.Backward THEN
    Motor.List.PullOutCV_A.M_MoveBackward());
ELSIF AllocateManualCommand.PullOutCV.PullOutCV_A.Stopped OR NOT
	(AllocateManualCommand.PullOutCV.PullOutCV_A.Forward OR AllocateManualCommand.PullOutCV.PullOutCV_A.Backward) THEN
    Motor.List.PullOutCV_A.M_MotorStop());
END_IF

IF AllocateManualCommand.PullOutCV.PullOutCV_B.Forward THEN
    Motor.List.PullOutCV_B.M_MoveForward());
ELSIF AllocateManualCommand.PullOutCV.PullOutCV_B.Backward THEN
    Motor.List.PullOutCV_B.M_MoveBackward());
ELSIF AllocateManualCommand.PullOutCV.PullOutCV_B.Stopped OR NOT 
	(AllocateManualCommand.PullOutCV.PullOutCV_B.Forward OR AllocateManualCommand.PullOutCV.PullOutCV_B.Backward) THEN
    Motor.List.PullOutCV_B.M_MotorStop());
END_IF

////////////////////////////////////////    Upper & Lower CV
IF StorageManualCommand.UpCV.UpCV.Forward THEN
    Motor.List.UpCV.M_MoveForward());
ELSIF StorageManualCommand.UpCV.UpCV.Backward THEN
    Motor.List.UpCV.M_MoveBackward());
ELSIF StorageManualCommand.UpCV.UpCV.Stopped OR NOT 
	(StorageManualCommand.UpCV.UpCV.Forward OR StorageManualCommand.UpCV.UpCV.Backward) THEN
    Motor.List.UpCV.M_MotorStop());
END_IF

IF StorageManualCommand.LowCV.LowCV.Forward THEN
    Motor.List.LowCV.M_MoveForward());
ELSIF StorageManualCommand.LowCV.LowCV.Backward THEN
    Motor.List.LowCV.M_MoveBackward());
ELSIF StorageManualCommand.LowCV.LowCV.Stopped OR NOT 
	(StorageManualCommand.LowCV.LowCV.Forward OR StorageManualCommand.LowCV.LowCV.Backward) THEN
    Motor.List.LowCV.M_MotorStop());
END_IF
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ManualAllocateHoming" Id="{f1049744-2f7f-4913-b4df-5d6efedeb6f8}" FolderPath="Privite\Manual\">
      <Declaration><![CDATA[METHOD M_ManualAllocateHoming
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//fbAllocateArea.fbAllocateHome.xExecute := Service_Handshake.AllocationRegionHome.HandShake.Execute;
IF Service_Handshake.AllocationRegionHome.HandShake.Execute THEN
	fbAllocateArea.M_StartHoming();
END_IF
Service_Handshake.AllocationRegionHome.HandShake.Busy := fbAllocateArea.fbAllocateHome.xBusy;
Service_Handshake.AllocationRegionHome.HandShake.Done := fbAllocateArea.fbAllocateHome.xDone;
Service_Handshake.AllocationRegionHome.HandShake.Error := fbAllocateArea.fbAllocateHome.xError;
IF  NOT Service_Handshake.AllocationRegionHome.HandShake.Execute THEN
	fbAllocateArea.M_StopHoming();
END_IF

Service_Handshake.AllocationRegionHome.Homed := fbAllocateArea.Homed;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ManualMachineHome" Id="{0386eb3f-5698-4a4c-acd8-c29dc86a27dd}" FolderPath="Privite\Manual\">
      <Declaration><![CDATA[METHOD PRIVATE M_ManualMachineHome
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Service_Handshake.MachineHome.HandShake.Execute THEN
	M_StartHoming();
END_IF
Service_Handshake.MachineHome.HandShake.Busy := fbMachineHoming.xBusy;
Service_Handshake.MachineHome.HandShake.Done  := fbMachineHoming.xDone;
Service_Handshake.MachineHome.HandShake.Error := fbMachineHoming.xError;
IF NOT Service_Handshake.MachineHome.HandShake.Execute THEN
	M_StopHoming();
END_IF

Service_Handshake.MachineHome.Homed := MachineHomed;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ManualShippingHoming" Id="{a052a37b-f4cf-460d-8831-592148b0b1ab}" FolderPath="Privite\Manual\">
      <Declaration><![CDATA[METHOD M_ManualShippingHoming 
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//fbStorageArea.fbStoragehoming.xExecute := Service_Handshake.StorageRegionHome.HandShake.Execute;
IF Service_Handshake.FGARegionHome.HandShake.Execute THEN
	fbShippingArea.M_StartHoming();
END_IF
Service_Handshake.FGARegionHome.HandShake.Busy := fbShippingArea.fbshippinghoming.xBusy;
Service_Handshake.FGARegionHome.HandShake.Done := fbShippingArea.fbshippinghoming.xDone;
Service_Handshake.FGARegionHome.HandShake.Error := fbShippingArea.fbshippinghoming.xError;
IF NOT Service_Handshake.FGARegionHome.HandShake.Execute  THEN
	fbShippingArea.M_StopHoming();
END_IF

Service_Handshake.FGARegionHome.Homed := fbShippingArea.Homed;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ManualStorageHoming" Id="{59800549-b7c8-4847-b683-c0e8fab8b4be}" FolderPath="Privite\Manual\">
      <Declaration><![CDATA[METHOD M_ManualStorageHoming
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//fbStorageArea.fbStoragehoming.xExecute := Service_Handshake.StorageRegionHome.HandShake.Execute;
IF Service_Handshake.StorageRegionHome.HandShake.Execute THEN
	fbStorageArea.M_StartHoming();
END_IF
Service_Handshake.StorageRegionHome.HandShake.Busy := fbStorageArea.fbStoragehoming.xBusy;
Service_Handshake.StorageRegionHome.HandShake.Done := fbStorageArea.fbStoragehoming.xDone;
Service_Handshake.StorageRegionHome.HandShake.Error := fbStorageArea.fbStoragehoming.xError;
IF  NOT Service_Handshake.StorageRegionHome.HandShake.Execute THEN
	fbStorageArea.M_StopHoming();
END_IF

Service_Handshake.StorageRegionHome.Homed := fbStorageArea.Homed;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Resetting" Id="{8a313413-a9db-4d95-862c-f955afe04d5f}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Resetting
VAR
	CylinderIndex : INT;
	MotorIndex : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR CylinderIndex := 1 TO 53 DO
	fbAllocateArea.M_TransCVCameraPress_ManualMode();
    Cylinder.arCylinder[CylinderIndex].xEnable := TRUE;
	CylinderManualCtrl[CylinderIndex].Cylinder REF= Cylinder.arCylinder[CylinderIndex];
END_FOR

FOR CylinderIndex := 1 TO 53 DO
    Cylinder.arCylinder[CylinderIndex].EnableSimulation := EnableSimulation;
END_FOR

FOR MotorIndex := 1 TO 26 DO
    Motor.arMotor[MotorIndex].xEnable := TRUE;
	MotorManualCtrl[MotorIndex].Motor REF= Motor.arMotor[MotorIndex];
END_FOR

// Reference 
ReferenceHMI();
RefStorageService();
RefAllocateService();
RefShippingService();

// State control
GVL_Machine.PackTags[UnitNo.Allocate].Command.CntrlCmd := ePMLCommand_Reset;
GVL_Machine.PackTags[UnitNo.Storage].Command.CntrlCmd := ePMLCommand_Reset;
GVL_Machine.PackTags[UnitNo.Shipping].Command.CntrlCmd := ePMLCommand_Reset;
arAxisCtrl_gb[AxisNo.RoundBelt].Admin.PositionType := E_PositionType.Modulo;
arAxisCtrl_gb[AxisNo.TurnTable].Admin.PositionType := E_PositionType.Modulo;

CASE eModeCurrent OF
    E_UnitMode.Manual:
        IF GVL_Machine.PackTags[UnitNo.Allocate].Status.StateCurrent = ePMLState_Idle AND
            GVL_Machine.PackTags[UnitNo.Storage].Status.StateCurrent = ePMLState_Idle AND
            GVL_Machine.PackTags[UnitNo.Shipping].Status.StateCurrent = ePMLState_Idle //
			 THEN
            M_StateComplete();
        END_IF
		IF ErrorTableInitDone THEN
			M_General_AlarmRegister();
		END_IF
    E_UnitMode.Auto:
        IF GVL_Machine.PackTags[UnitNo.Allocate].Status.StateCurrent = ePMLState_Idle AND
            GVL_Machine.PackTags[UnitNo.Storage].Status.StateCurrent = ePMLState_Idle AND
            GVL_Machine.PackTags[UnitNo.Shipping].Status.StateCurrent = ePMLState_Idle //AND
             THEN
            M_StateComplete();
        END_IF
		IF ErrorTableInitDone THEN
			M_General_AlarmRegister();
		END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StartHoming" Id="{1cfc2ec4-8978-47d1-a618-ea9ffb09495f}" FolderPath="Service\">
      <Declaration><![CDATA[METHOD M_StartHoming
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbMachineHoming.xExecute := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Starting" Id="{6b0ffb98-6d92-4abc-97da-1afb9c25afa1}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Starting
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// State control
GVL_Machine.PackTags[UnitNo.Allocate].Command.CntrlCmd := ePMLCommand_Start;
GVL_Machine.PackTags[UnitNo.Storage].Command.CntrlCmd := ePMLCommand_Start;
GVL_Machine.PackTags[UnitNo.Shipping].Command.CntrlCmd := ePMLCommand_Start;

CASE eModeCurrent OF
    E_UnitMode.Manual, E_UnitMode.Auto:
        IF GVL_Machine.PackTags[UnitNo.Allocate].Status.StateCurrent = ePMLState_Execute AND
            GVL_Machine.PackTags[UnitNo.Allocate].Status.StateCurrent = ePMLState_Execute AND
            GVL_Machine.PackTags[UnitNo.Allocate].Status.StateCurrent = ePMLState_Execute THEN
            M_StateComplete();
        END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StopHoming" Id="{bda1385e-b549-4a20-9f6b-8090d194cc8f}" FolderPath="Service\">
      <Declaration><![CDATA[METHOD M_StopHoming
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbMachineHoming.xExecute := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopped" Id="{cd99af5a-54e9-48b9-8604-5ab42447d75f}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Stopped
VAR
	CylinderIndex : INT;
	MotorIndex : INT;
	ServoIndex : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR ServoIndex := 1 TO 7 DO
	IF arAxisCtrl_gb[ServoIndex].Admin.Axis.Status.Error THEN
		arAxisCtrl_gb[ServoIndex].Admin.ClearError := FALSE;
	END_IF
END_FOR

IF eModeCurrent = E_UnitMode.Auto THEN
	GVL_Machine.PackTags[UnitNo.Storage].Command.UnitMode := E_UnitMode.Auto;
	GVL_Machine.PackTags[UnitNo.Allocate].Command.UnitMode := E_UnitMode.Auto;
	GVL_Machine.PackTags[UnitNo.Shipping].Command.UnitMode := E_UnitMode.Auto;
ELSIF eModeCurrent = E_UnitMode.Manual THEN
	GVL_Machine.PackTags[UnitNo.Storage].Command.UnitMode := E_UnitMode.Manual;
	GVL_Machine.PackTags[UnitNo.Allocate].Command.UnitMode := E_UnitMode.Manual;
	GVL_Machine.PackTags[UnitNo.Shipping].Command.UnitMode := E_UnitMode.Manual;
END_IF

CASE eModeCurrent OF
	E_UnitMode.Manual:
		IF GVL_Machine.PackTags[UnitNo.Allocate].Status.UnitModeCurrent = E_UnitMode.Manual AND 
			GVL_Machine.PackTags[UnitNo.Allocate].Status.StateCurrent = ePMLState_Stopped AND
			GVL_Machine.PackTags[UnitNo.Storage].Status.UnitModeCurrent = E_UnitMode.Manual AND 
			GVL_Machine.PackTags[UnitNo.Storage].Status.StateCurrent = ePMLState_Stopped AND
			GVL_Machine.PackTags[UnitNo.Shipping].Status.UnitModeCurrent = E_UnitMode.Manual AND 
			GVL_Machine.PackTags[UnitNo.Shipping].Status.StateCurrent = ePMLState_Stopped THEN
			M_StateComplete();
		END_IF
	E_UnitMode.Auto:
		IF GVL_Machine.PackTags[UnitNo.Allocate].Status.UnitModeCurrent = E_UnitMode.Auto AND 
			GVL_Machine.PackTags[UnitNo.Allocate].Status.StateCurrent = ePMLState_Stopped AND
			GVL_Machine.PackTags[UnitNo.Storage].Status.UnitModeCurrent = E_UnitMode.Auto AND 
			GVL_Machine.PackTags[UnitNo.Storage].Status.StateCurrent = ePMLState_Stopped AND
			GVL_Machine.PackTags[UnitNo.Shipping].Status.UnitModeCurrent = E_UnitMode.Auto AND 
			GVL_Machine.PackTags[UnitNo.Shipping].Status.StateCurrent = ePMLState_Stopped THEN
			M_StateComplete();
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopping" Id="{13bedb0a-797e-46e7-b980-19fbd19b81d3}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Stopping
VAR
	CylinderIndex :INT;
	MotorIndex : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eModeCurrent OF
    E_UnitMode.Manual:
        GVL_Machine.PackTags[UnitNo.Allocate].Command.UnitMode := E_UnitMode.Manual;
        GVL_Machine.PackTags[UnitNo.Allocate].Command.CntrlCmd := ePMLCommand_Stop;
        GVL_Machine.PackTags[UnitNo.Storage].Command.UnitMode  := E_UnitMode.Manual;
        GVL_Machine.PackTags[UnitNo.Storage].Command.CntrlCmd  := ePMLCommand_Stop;
        GVL_Machine.PackTags[UnitNo.Shipping].Command.UnitMode := E_UnitMode.Manual;
        GVL_Machine.PackTags[UnitNo.Shipping].Command.CntrlCmd := ePMLCommand_Stop;
		FOR CylinderIndex := 1 TO 53 DO
			Cylinder.arCylinder[CylinderIndex].xEnable := FALSE;
		END_FOR
		FOR MotorIndex := 1 TO 26 DO
			Motor.arMotor[MotorIndex].xEnable := FALSE;
		END_FOR
		TableMove.xExecute := FALSE;
        IF GVL_Machine.PackTags[UnitNo.Allocate].Status.UnitModeCurrent = E_UnitMode.Manual AND
           GVL_Machine.PackTags[UnitNo.Allocate].Status.StateCurrent = ePMLState_Stopped AND
           GVL_Machine.PackTags[UnitNo.Storage].Status.UnitModeCurrent = E_UnitMode.Manual AND
           GVL_Machine.PackTags[UnitNo.Storage].Status.StateCurrent = ePMLState_Stopped AND
           GVL_Machine.PackTags[UnitNo.Shipping].Status.UnitModeCurrent = E_UnitMode.Manual AND
           GVL_Machine.PackTags[UnitNo.Shipping].Status.StateCurrent = ePMLState_Stopped AND NOT
		   TableMove.xError
            THEN
            M_StateComplete();
        END_IF
	E_UnitMode.Auto:
        GVL_Machine.PackTags[UnitNo.Allocate].Command.UnitMode := E_UnitMode.Auto;
        GVL_Machine.PackTags[UnitNo.Allocate].Command.CntrlCmd := ePMLCommand_Stop;
        GVL_Machine.PackTags[UnitNo.Storage].Command.UnitMode  := E_UnitMode.Auto;
        GVL_Machine.PackTags[UnitNo.Storage].Command.CntrlCmd  := ePMLCommand_Stop;
        GVL_Machine.PackTags[UnitNo.Shipping].Command.UnitMode := E_UnitMode.Auto;
        GVL_Machine.PackTags[UnitNo.Shipping].Command.CntrlCmd := ePMLCommand_Stop;
		FOR CylinderIndex := 1 TO 53 DO
			Cylinder.arCylinder[CylinderIndex].xEnable := FALSE;
		END_FOR
		FOR MotorIndex := 1 TO 26 DO
			Motor.arMotor[MotorIndex].xEnable := FALSE;
		END_FOR
		TableMove.xExecute := FALSE;
        IF GVL_Machine.PackTags[UnitNo.Allocate].Status.UnitModeCurrent = E_UnitMode.Auto AND
           GVL_Machine.PackTags[UnitNo.Allocate].Status.StateCurrent = ePMLState_Stopped AND
           GVL_Machine.PackTags[UnitNo.Storage].Status.UnitModeCurrent = E_UnitMode.Auto AND
           GVL_Machine.PackTags[UnitNo.Storage].Status.StateCurrent = ePMLState_Stopped AND
           GVL_Machine.PackTags[UnitNo.Shipping].Status.UnitModeCurrent = E_UnitMode.Auto AND
           GVL_Machine.PackTags[UnitNo.Shipping].Status.StateCurrent = ePMLState_Stopped AND NOT
		   TableMove.xError
            THEN
            M_StateComplete();
        END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StroageRobotSafeCheck" Id="{47e1cb93-7251-463c-9d1e-e7a9c6d5d136}" FolderPath="Privite\Manual\">
      <Declaration><![CDATA[METHOD PRIVATE M_StroageRobotSafeCheck : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF FanucRobot.List.StorageRobot._DI12.BzoneWaitAllow THEN
	IF NOT arAxisCtrl_gb[AxisNo.RoundBelt].Admin.Axis.Status.Moving
	    AND NOT fbAllocateArea.RoundBeltControl.xBusy
		AND NOT fbAllocateArea.RoundBeltControl.xError
		AND NOT fbAllocateArea.RoundBeltControl.xDone THEN
			FanucRobot.List.StorageRobot.Bzone_AllowWork := TRUE;
	END_IF
END_IF

IF NOT FanucRobot.List.StorageRobot._DI12.BzoneInWork 
	AND NOT FanucRobot.List.StorageRobot._DI12.BzoneWaitAllow THEN
	FanucRobot.List.StorageRobot.Bzone_AllowWork := FALSE	;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Suspended" Id="{7615c7fb-fc07-40e0-962d-50cdae246718}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Suspended
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Suspending" Id="{08514eda-eb99-46b5-a548-80121dc964e9}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Suspending
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Undefined" Id="{ebe3ecb5-5439-46a1-8ace-e8495c074189}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Undefined
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eModeCurrent OF
    E_UnitMode.Undefined:
		PackTag.Command.UnitMode := E_UnitMode.Manual;
		PackTag.Command.CntrlCmd := ePMLCommand_Abort;
		M_StateComplete();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Unholding" Id="{64e7d9e3-bbb6-44d4-85b6-aa16778f4162}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Unholding
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Unsuspending" Id="{90314e7c-5afc-42b9-bfd4-0393ed17b222}" FolderPath="States\">
      <Declaration><![CDATA[METHOD M_Unsuspending
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="RefAllocateService" Id="{7e2d0ea7-efb8-45f5-8e87-93fdf1e313ed}" FolderPath="Privite\HMI_Handshake\">
      <Declaration><![CDATA[METHOD PRIVATE RefAllocateService
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AllocateService.AllocateMoveStructure 				REF= Service_Handshake.AllocateMoveStructure;
AllocateService.AllocateCircleMove 					REF= Service_Handshake.AllocateCircleMove;
AllocateService.TurnTableMove 						REF= Service_Handshake.TurnTableMove;

// Allocating
AllocateService.AutoMode_AllocateBatchMode 			REF= Service_Handshake.AutoMode_AllocateBatchMode;
AllocateService.AutoMode_SimpleAllocation_Batch 	REF= Service_Handshake.AutoMode_SimpleAllocation_Batch;
AllocateService.AutoMode_AllocateBatchMode_Reverse  REF= Service_Handshake.AutoMode_AllocateBatchMode_Reverse;

//OutRobot
AllocateService.AutoMode_RareBoxMove 				REF= Service_Handshake.AutoMode_RareBoxMove;
AllocateService.AutoMode_EmptyBoxMove 				REF= Service_Handshake.AutoMode_EmptyBoxMove;
AllocateService.AutoMode_BoxMoveReverse 			REF= Service_Handshake.AutoMode_BoxMoveReverse;

//TransCV camera 
AllocateService.AutoMode_SameSizeCVCamera 			REF= Service_Handshake.AutoMode_SameSizeCVCamera;
AllocateService.AutoMode_DifferentCVCamera 			REF= Service_Handshake.AutoMode_DifferentCVCamera;

//AllocateArea Home
AllocateService.AllocateRegionHome					REF= Service_Handshake.AllocationRegionHome;

// Pullout 
AllocateService.AutoMode_PullOutConveyor 			REF= Service_Handshake.AutoMode_PullOutConveyor;

//AutoModeUse*-------自動模式圓帶單動
   AllocateService.AutoMode_AllocateCircleMove 		 REF= Service_Handshake.AutoMode_AllocateCircleMove;

 //AutoModeUse*-------圓盤移動
    AllocateService.AutoMode_TurnTableMOve  		REF= Service_Handshake.AutoMode_TurnTableMOve;
	
//Allocate robot move
AllocateService.AllocateRobotNeedlingMove 			REF= Service_Handshake.AllocationRobotNeedlingMove;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReferenceHMI" Id="{f6889bed-a428-4faa-8d67-c5add5d80ffa}" FolderPath="Privite\HMI_Handshake\">
      <Declaration><![CDATA[METHOD PRIVATE ReferenceHMI
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Service_Handshake.AllocateMoveStructure REF= GVL_ADS.AllocateMoveStructure;
Service_Handshake.AllocateMoveStructure_Reverse REF= GVL_ADS.AllocateMoveStructure_Reverse;
Service_Handshake.EmptyRobotToTurnTableMove REF= GVL_ADS.EmptyRobotToTurnTableMove;
Service_Handshake.AllocateCircleMove REF= GVL_ADS.AllocateCircleMove;
Service_Handshake.TurnTableMove REF= GVL_ADS.TurnTableMove;
//Service_Handshake.AxesControl REF= GVL_ADS.AxesControl;
Service_Handshake.MachineReset REF= GVL_ADS.MachineReset;
Service_Handshake.RareFullBoxPush REF= GVL_ADS.RareFullBoxPush;
Service_Handshake.AutoMode_AllocateCircleMove REF= GVL_ADS.AutoMode_AllocateCircleMove;
Service_Handshake.AutoMode_RobotWarehouseMove REF= GVL_ADS.AutoMode_RobotWarehouseMove;
Service_Handshake.AutoMode_RobotAbsMove REF= GVL_ADS.AutoMode_RobotAbsMove;
Service_Handshake.AutoMode_EmptyBoxMove REF= GVL_ADS.AutoMode_EmptyBoxMove;
Service_Handshake.AutoMode_TurnTableMOve REF= GVL_ADS.AutoMode_TurnTableMOve;
Service_Handshake.AutoMode_AllocateMove REF= GVL_ADS.AutoMode_AllocateMove;
Service_Handshake.AutoMode_AllocateMove_Reverse REF= GVL_ADS.AutoMode_AllocateMove_Reverse;
Service_Handshake.AutoMode_AllocateBatchMode REF= GVL_ADS.AutoMode_AllocateBatchMode;
Service_Handshake.AutoMode_AllocateBatchMode_Reverse REF= GVL_ADS.AutoMode_AllocateBatchMode_Reverse;
Service_Handshake.AutoMode_SimpleAllocation_Batch REF= GVL_ADS.AutoMode_SimpleAllocation_Batch;
Service_Handshake.AutoMode_RareBoxMove REF= GVL_ADS.AutoMode_RareBoxMove;
Service_Handshake.AutoMode_OutBoxMove REF= GVL_ADS.AutoMode_OutBoxMove;
Service_Handshake.AutoMode_BoxMoveReverse REF= GVL_ADS.AutoMode_BoxMoveReverse;
Service_Handshake.AutoMode_WarehouseMove REF= GVL_ADS.AutoMode_WarehouseMove;
Service_Handshake.AutoMode_ErrorHandle REF= GVL_ADS.AutoMode_ErrorHandle;
Service_Handshake.AlarmAllocation REF= GVL_ADS.AlarmAllocation;
Service_Handshake.AutoMode_MoveConveyorJob REF= GVL_ADS.AutoMode_MoveConveyorJob;
Service_Handshake.AutoMode_WarehouseMotoWithRobotMove REF= GVL_ADS.AutoMode_WarehouseMotoWithRobotMove;
Service_Handshake.AutoMode_SimpleAllocate REF= GVL_ADS.AutoMode_SimpleAllocate;
Service_Handshake.AutoMode_PullOutConveyor REF= GVL_ADS.AutoMode_PullOutConveyor;
Service_Handshake.AutoMode_AddBoxes REF= GVL_ADS.AutoMode_AddBoxes;
Service_Handshake.MachineHome REF= GVL_ADS.MachineHome;
Service_Handshake.StorageRegionHome REF= GVL_ADS.StorageRegionHome;
Service_Handshake.AllocationRegionHome REF= GVL_ADS.AllocationRegionHome;
Service_Handshake.FGARegionHome REF= GVL_ADS.FGARegionHome;
Service_Handshake.StorageRegionMode REF= GVL_ADS.StorageRegionMode;
Service_Handshake.AllocationRegion REF= GVL_ADS.AllocationRegion;
Service_Handshake.FGARegionMode REF= GVL_ADS.FGARegionMode;
Service_Handshake.MachineMode REF= GVL_ADS.MachineMode;
Service_Handshake.OpPannel_Status REF= GVL_ADS.OpPannel_Status;
Service_Handshake.OpPannel_Ctrl REF= GVL_ADS.OpPannel_Ctrl;
Service_Handshake.FanucRobot_General REF= GVL_ADS.FanucRobot_General;
Service_Handshake.AutoMode_FeedInEmptyBoxWithRobot REF= GVL_ADS.AutoMode_FeedInEmptyBoxWithRobot;
Service_Handshake.AutoMode_ReloadRoundBeltBoxWithRobot REF= GVL_ADS.AutoMode_ReloadRoundBeltBoxWithRobot;
Service_Handshake.AutoMode_UpperFeedInConveyor REF= GVL_ADS.AutoMode_UpperFeedInConveyor;
//Service_Handshake.MachineState REF= GVL_ADS.MachineState;
Service_Handshake.AutoMode_RobotRegionMove_FeedInConveyor REF= GVL_ADS.AutoMode_RobotRegionMove_FeedInConveyor;
Service_Handshake.AutoMode_RobotRegionMove_AllocatedConveyor REF= GVL_ADS.AutoMode_RobotRegionMove_AllocatedConveyor;
Service_Handshake.AutoMode_RobotRegionMove_PullOutConveyor REF= GVL_ADS.AutoMode_RobotRegionMove_PullOutConveyor;
Service_Handshake.AutoMode_RobotRegionMove_BufferArea REF= GVL_ADS.AutoMode_RobotRegionMove_BufferArea;
Service_Handshake.AutoMode_RobotRegionMove_RoundBelt REF= GVL_ADS.AutoMode_RobotRegionMove_RoundBelt;
Service_Handshake.AutoMode_ShippingRobot_Left REF= GVL_ADS.AutoMode_ShippingRobot_Left;
Service_Handshake.AutoMode_ShippingRobot_Right REF= GVL_ADS.AutoMode_ShippingRobot_Right;
Service_Handshake.AutoMode_ShippingRobot_TransmitCVEnd REF= GVL_ADS.AutoMode_ShippingRobot_TransmitCVEnd;
Service_Handshake.AutoMode_SameSizeCVCamera REF= GVL_ADS.AutoMode_SameSizeCVCamera;
Service_Handshake.AutoMode_DifferentCVCamera REF= GVL_ADS.AutoMode_DifferentCVCamera;

Service_Handshake.AllocationRobotNeedlingMove REF= GVL_ADS.AllocationRobotNeedlingMove;





]]></ST>
      </Implementation>
    </Method>
    <Method Name="RefShippingService" Id="{dcbecbba-f47d-4888-8ded-1da584981d0d}" FolderPath="Privite\HMI_Handshake\">
      <Declaration><![CDATA[METHOD RefShippingService
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ShippingService.AutoMode_ShippingRobot_Left REF= Service_Handshake.AutoMode_ShippingRobot_Left;
ShippingService.AutoMode_ShippingRobot_Right REF= Service_Handshake.AutoMode_ShippingRobot_Right;
ShippingService.AutoMode_ShippingRobot_TransmitCVEnd REF= Service_Handshake.AutoMode_ShippingRobot_TransmitCVEnd;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RefStorageService" Id="{1a766cf2-e5ed-4657-8a78-f09a69ade618}" FolderPath="Privite\HMI_Handshake\">
      <Declaration><![CDATA[METHOD PRIVATE RefStorageService
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StorageService.AutoMode_ReloadRoundBeltBoxWithRobot	REF= Service_Handshake.AutoMode_ReloadRoundBeltBoxWithRobot;
StorageService.AutoMode_FeedInEmptyBoxWithRobot REF= Service_Handshake.AutoMode_FeedInEmptyBoxWithRobot;
StorageService.AutoMode_RobotRegionMove_FeedInConveyor REF= Service_Handshake.AutoMode_RobotRegionMove_FeedInConveyor;
StorageService.AutoMode_RobotRegionMove_AllocatedConveyor REF= Service_Handshake.AutoMode_RobotRegionMove_AllocatedConveyor;
StorageService.AutoMode_RobotRegionMove_PullOutConveyor REF= Service_Handshake.AutoMode_RobotRegionMove_PullOutConveyor;
StorageService.AutoMode_RobotRegionMove_BufferArea REF= Service_Handshake.AutoMode_RobotRegionMove_BufferArea;
StorageService.AutoMode_RobotRegionMove_RoundBelt REF= Service_Handshake.AutoMode_RobotRegionMove_RoundBelt;
StorageService.AutoMode_UpperFeedInConveyor REF=  Service_Handshake.AutoMode_UpperFeedInConveyor;
StorageService.AutoMode_AddBoxes REF= Service_Handshake.AutoMode_AddBoxes;
StorageService.AutoMode_PullOutConveyor REF= Service_Handshake.AutoMode_PullOutConveyor;
StorageService.AutoMode_RobotAbsMove REF=  Service_Handshake.AutoMode_RobotAbsMove;
StorageService.AutoMode_WarehouseMotoWithRobotMove REF= Service_Handshake.AutoMode_WarehouseMotoWithRobotMove;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_MachineControl">
      <LineId Id="689" Count="1" />
      <LineId Id="1150" Count="0" />
      <LineId Id="692" Count="2" />
      <LineId Id="758" Count="0" />
      <LineId Id="894" Count="0" />
      <LineId Id="1057" Count="0" />
      <LineId Id="1152" Count="1" />
      <LineId Id="695" Count="6" />
      <LineId Id="819" Count="1" />
      <LineId Id="702" Count="9" />
      <LineId Id="969" Count="5" />
      <LineId Id="1058" Count="0" />
      <LineId Id="975" Count="1" />
      <LineId Id="510" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.A00_BaseUnits">
      <LineId Id="48" Count="1" />
      <LineId Id="79" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="87" Count="2" />
      <LineId Id="141" Count="1" />
      <LineId Id="152" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="81" Count="0" />
      <LineId Id="52" Count="3" />
      <LineId Id="75" Count="2" />
      <LineId Id="86" Count="0" />
      <LineId Id="144" Count="1" />
      <LineId Id="151" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="57" Count="4" />
      <LineId Id="78" Count="0" />
      <LineId Id="124" Count="1" />
      <LineId Id="147" Count="1" />
      <LineId Id="153" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="63" Count="1" />
      <LineId Id="95" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="108" Count="15" />
      <LineId Id="73" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="128" Count="4" />
      <LineId Id="139" Count="0" />
      <LineId Id="133" Count="2" />
      <LineId Id="140" Count="0" />
      <LineId Id="136" Count="2" />
      <LineId Id="127" Count="0" />
      <LineId Id="149" Count="1" />
      <LineId Id="155" Count="0" />
      <LineId Id="154" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.A01_Cylinder">
      <LineId Id="7180" Count="78" />
      <LineId Id="7868" Count="0" />
      <LineId Id="7260" Count="23" />
      <LineId Id="7869" Count="0" />
      <LineId Id="7284" Count="12" />
      <LineId Id="7870" Count="0" />
      <LineId Id="7297" Count="12" />
      <LineId Id="7871" Count="0" />
      <LineId Id="7310" Count="12" />
      <LineId Id="7872" Count="0" />
      <LineId Id="7323" Count="25" />
      <LineId Id="7873" Count="0" />
      <LineId Id="7349" Count="155" />
      <LineId Id="7874" Count="0" />
      <LineId Id="7505" Count="12" />
      <LineId Id="7875" Count="0" />
      <LineId Id="7518" Count="64" />
      <LineId Id="7876" Count="0" />
      <LineId Id="7583" Count="12" />
      <LineId Id="7877" Count="0" />
      <LineId Id="7596" Count="12" />
      <LineId Id="7878" Count="0" />
      <LineId Id="7609" Count="12" />
      <LineId Id="7879" Count="0" />
      <LineId Id="7622" Count="90" />
      <LineId Id="7880" Count="0" />
      <LineId Id="7713" Count="12" />
      <LineId Id="7881" Count="0" />
      <LineId Id="7726" Count="12" />
      <LineId Id="7882" Count="0" />
      <LineId Id="7739" Count="128" />
      <LineId Id="957" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.A02_Motor">
      <LineId Id="1595" Count="29" />
      <LineId Id="1907" Count="3" />
      <LineId Id="1629" Count="7" />
      <LineId Id="1911" Count="3" />
      <LineId Id="1641" Count="1" />
      <LineId Id="1915" Count="9" />
      <LineId Id="1653" Count="1" />
      <LineId Id="1925" Count="9" />
      <LineId Id="1665" Count="1" />
      <LineId Id="1935" Count="9" />
      <LineId Id="1677" Count="1" />
      <LineId Id="1945" Count="9" />
      <LineId Id="1689" Count="1" />
      <LineId Id="1955" Count="9" />
      <LineId Id="1701" Count="1" />
      <LineId Id="1965" Count="9" />
      <LineId Id="1713" Count="1" />
      <LineId Id="1975" Count="9" />
      <LineId Id="1725" Count="1" />
      <LineId Id="1985" Count="9" />
      <LineId Id="1737" Count="1" />
      <LineId Id="1995" Count="9" />
      <LineId Id="1749" Count="1" />
      <LineId Id="2005" Count="9" />
      <LineId Id="1761" Count="1" />
      <LineId Id="2015" Count="9" />
      <LineId Id="1773" Count="1" />
      <LineId Id="2025" Count="9" />
      <LineId Id="1785" Count="1" />
      <LineId Id="2035" Count="9" />
      <LineId Id="1797" Count="1" />
      <LineId Id="2045" Count="9" />
      <LineId Id="1809" Count="1" />
      <LineId Id="2055" Count="9" />
      <LineId Id="1821" Count="1" />
      <LineId Id="2065" Count="9" />
      <LineId Id="1833" Count="13" />
      <LineId Id="2095" Count="9" />
      <LineId Id="1857" Count="1" />
      <LineId Id="2105" Count="9" />
      <LineId Id="1869" Count="1" />
      <LineId Id="2115" Count="9" />
      <LineId Id="1881" Count="1" />
      <LineId Id="2125" Count="9" />
      <LineId Id="1893" Count="1" />
      <LineId Id="2135" Count="9" />
      <LineId Id="1905" Count="0" />
      <LineId Id="1262" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.A03_FanucRobot">
      <LineId Id="2" Count="5" />
      <LineId Id="31" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="1" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="14" Count="5" />
      <LineId Id="28" Count="0" />
      <LineId Id="20" Count="4" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.A04_OpPannel">
      <LineId Id="122" Count="5" />
      <LineId Id="225" Count="0" />
      <LineId Id="128" Count="16" />
      <LineId Id="227" Count="1" />
      <LineId Id="247" Count="0" />
      <LineId Id="148" Count="9" />
      <LineId Id="226" Count="0" />
      <LineId Id="159" Count="12" />
      <LineId Id="179" Count="1" />
      <LineId Id="172" Count="2" />
      <LineId Id="182" Count="1" />
      <LineId Id="175" Count="2" />
      <LineId Id="185" Count="1" />
      <LineId Id="184" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="209" Count="7" />
      <LineId Id="218" Count="3" />
      <LineId Id="223" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="236" Count="10" />
      <LineId Id="231" Count="1" />
      <LineId Id="229" Count="0" />
      <LineId Id="188" Count="9" />
      <LineId Id="1" Count="0" />
      <LineId Id="198" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.A05_Light">
      <LineId Id="6" Count="0" />
      <LineId Id="1" Count="2" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.A10_ErrorHandler">
      <LineId Id="208" Count="0" />
      <LineId Id="228" Count="1" />
      <LineId Id="610" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="239" Count="2" />
      <LineId Id="212" Count="0" />
      <LineId Id="611" Count="9" />
      <LineId Id="213" Count="6" />
      <LineId Id="230" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="234" Count="2" />
      <LineId Id="232" Count="0" />
      <LineId Id="237" Count="1" />
      <LineId Id="285" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="248" Count="17" />
      <LineId Id="287" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="506" Count="0" />
      <LineId Id="509" Count="0" />
      <LineId Id="291" Count="1" />
      <LineId Id="290" Count="0" />
      <LineId Id="294" Count="1" />
      <LineId Id="293" Count="0" />
      <LineId Id="297" Count="1" />
      <LineId Id="296" Count="0" />
      <LineId Id="299" Count="8" />
      <LineId Id="309" Count="2" />
      <LineId Id="313" Count="68" />
      <LineId Id="440" Count="1" />
      <LineId Id="439" Count="0" />
      <LineId Id="382" Count="56" />
      <LineId Id="442" Count="8" />
      <LineId Id="312" Count="0" />
      <LineId Id="308" Count="0" />
      <LineId Id="574" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="512" Count="0" />
      <LineId Id="517" Count="53" />
      <LineId Id="576" Count="8" />
      <LineId Id="572" Count="1" />
      <LineId Id="516" Count="0" />
      <LineId Id="598" Count="10" />
      <LineId Id="597" Count="0" />
      <LineId Id="515" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="575" Count="0" />
      <LineId Id="609" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Aborted">
      <LineId Id="52" Count="36" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Aborting">
      <LineId Id="100" Count="7" />
      <LineId Id="172" Count="0" />
      <LineId Id="175" Count="1" />
      <LineId Id="180" Count="0" />
      <LineId Id="183" Count="1" />
      <LineId Id="161" Count="6" />
      <LineId Id="185" Count="0" />
      <LineId Id="168" Count="2" />
      <LineId Id="190" Count="0" />
      <LineId Id="192" Count="22" />
      <LineId Id="171" Count="0" />
      <LineId Id="221" Count="2" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Auto_Axes">
      <LineId Id="1353" Count="51" />
      <LineId Id="1699" Count="0" />
      <LineId Id="1405" Count="2" />
      <LineId Id="1698" Count="0" />
      <LineId Id="1408" Count="175" />
      <LineId Id="1731" Count="2" />
      <LineId Id="1584" Count="6" />
      <LineId Id="1729" Count="1" />
      <LineId Id="1591" Count="90" />
      <LineId Id="1712" Count="6" />
      <LineId Id="1711" Count="0" />
      <LineId Id="1682" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Clearing">
      <LineId Id="396" Count="24" />
      <LineId Id="464" Count="0" />
      <LineId Id="421" Count="0" />
      <LineId Id="465" Count="0" />
      <LineId Id="467" Count="1" />
      <LineId Id="466" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="471" Count="5" />
      <LineId Id="422" Count="32" />
      <LineId Id="86" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_ClearOutput">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Complete">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Completing">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Execute">
      <LineId Id="19274" Count="4" />
      <LineId Id="19280" Count="1" />
      <LineId Id="19299" Count="0" />
      <LineId Id="19293" Count="2" />
      <LineId Id="19300" Count="0" />
      <LineId Id="19288" Count="0" />
      <LineId Id="19302" Count="0" />
      <LineId Id="19282" Count="0" />
      <LineId Id="19297" Count="0" />
      <LineId Id="19283" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="19286" Count="0" />
      <LineId Id="19303" Count="0" />
      <LineId Id="19308" Count="1" />
      <LineId Id="19307" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_General_AlarmRegister">
      <LineId Id="2767" Count="6" />
      <LineId Id="2941" Count="0" />
      <LineId Id="2940" Count="0" />
      <LineId Id="2923" Count="0" />
      <LineId Id="2922" Count="0" />
      <LineId Id="2920" Count="1" />
      <LineId Id="2774" Count="22" />
      <LineId Id="2906" Count="2" />
      <LineId Id="2912" Count="0" />
      <LineId Id="2797" Count="76" />
      <LineId Id="2880" Count="0" />
      <LineId Id="2935" Count="0" />
      <LineId Id="2937" Count="2" />
      <LineId Id="2936" Count="0" />
      <LineId Id="2879" Count="0" />
      <LineId Id="2881" Count="5" />
      <LineId Id="2874" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="2931" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="2895" Count="3" />
      <LineId Id="2951" Count="19" />
      <LineId Id="2972" Count="15" />
      <LineId Id="2894" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_GetCylinderError">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_HalfAuto_TableMove">
      <LineId Id="13" Count="6" />
      <LineId Id="26" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Held">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Holding">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Idle">
      <LineId Id="7" Count="8" />
      <LineId Id="6" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_MachineHoming">
      <LineId Id="5" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Manual_Axes">
      <LineId Id="776" Count="12" />
      <LineId Id="1224" Count="0" />
      <LineId Id="789" Count="1" />
      <LineId Id="1086" Count="0" />
      <LineId Id="1085" Count="0" />
      <LineId Id="791" Count="2" />
      <LineId Id="1078" Count="0" />
      <LineId Id="1077" Count="0" />
      <LineId Id="795" Count="26" />
      <LineId Id="1240" Count="0" />
      <LineId Id="1242" Count="3" />
      <LineId Id="1241" Count="0" />
      <LineId Id="1246" Count="0" />
      <LineId Id="822" Count="1" />
      <LineId Id="1239" Count="0" />
      <LineId Id="1238" Count="0" />
      <LineId Id="824" Count="2" />
      <LineId Id="1235" Count="1" />
      <LineId Id="827" Count="1" />
      <LineId Id="830" Count="21" />
      <LineId Id="1174" Count="6" />
      <LineId Id="1201" Count="0" />
      <LineId Id="1296" Count="0" />
      <LineId Id="1208" Count="4" />
      <LineId Id="1192" Count="0" />
      <LineId Id="1213" Count="0" />
      <LineId Id="859" Count="6" />
      <LineId Id="1248" Count="4" />
      <LineId Id="1247" Count="0" />
      <LineId Id="866" Count="34" />
      <LineId Id="1263" Count="1" />
      <LineId Id="1133" Count="1" />
      <LineId Id="901" Count="0" />
      <LineId Id="1138" Count="3" />
      <LineId Id="902" Count="35" />
      <LineId Id="1265" Count="1" />
      <LineId Id="1147" Count="2" />
      <LineId Id="1143" Count="3" />
      <LineId Id="1142" Count="0" />
      <LineId Id="941" Count="37" />
      <LineId Id="1060" Count="0" />
      <LineId Id="1063" Count="3" />
      <LineId Id="1097" Count="0" />
      <LineId Id="1099" Count="4" />
      <LineId Id="1061" Count="0" />
      <LineId Id="980" Count="36" />
      <LineId Id="1080" Count="4" />
      <LineId Id="1079" Count="0" />
      <LineId Id="1017" Count="35" />
      <LineId Id="1277" Count="1" />
      <LineId Id="1280" Count="0" />
      <LineId Id="1282" Count="3" />
      <LineId Id="1281" Count="0" />
      <LineId Id="1279" Count="0" />
      <LineId Id="1163" Count="0" />
      <LineId Id="1053" Count="5" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Manual_Cylinder">
      <LineId Id="919" Count="0" />
      <LineId Id="921" Count="51" />
      <LineId Id="865" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Manual_Motor">
      <LineId Id="321" Count="0" />
      <LineId Id="611" Count="19" />
      <LineId Id="635" Count="6" />
      <LineId Id="634" Count="0" />
      <LineId Id="610" Count="0" />
      <LineId Id="642" Count="25" />
      <LineId Id="608" Count="0" />
      <LineId Id="669" Count="26" />
      <LineId Id="668" Count="0" />
      <LineId Id="696" Count="0" />
      <LineId Id="322" Count="13" />
      <LineId Id="540" Count="0" />
      <LineId Id="542" Count="1" />
      <LineId Id="338" Count="5" />
      <LineId Id="544" Count="0" />
      <LineId Id="546" Count="1" />
      <LineId Id="346" Count="5" />
      <LineId Id="548" Count="2" />
      <LineId Id="354" Count="5" />
      <LineId Id="551" Count="2" />
      <LineId Id="362" Count="5" />
      <LineId Id="554" Count="2" />
      <LineId Id="370" Count="5" />
      <LineId Id="557" Count="2" />
      <LineId Id="378" Count="5" />
      <LineId Id="560" Count="2" />
      <LineId Id="386" Count="5" />
      <LineId Id="563" Count="2" />
      <LineId Id="394" Count="5" />
      <LineId Id="566" Count="2" />
      <LineId Id="402" Count="6" />
      <LineId Id="569" Count="2" />
      <LineId Id="411" Count="5" />
      <LineId Id="572" Count="2" />
      <LineId Id="419" Count="5" />
      <LineId Id="575" Count="2" />
      <LineId Id="427" Count="5" />
      <LineId Id="578" Count="2" />
      <LineId Id="435" Count="5" />
      <LineId Id="581" Count="2" />
      <LineId Id="443" Count="5" />
      <LineId Id="584" Count="2" />
      <LineId Id="451" Count="5" />
      <LineId Id="587" Count="2" />
      <LineId Id="459" Count="5" />
      <LineId Id="590" Count="2" />
      <LineId Id="467" Count="5" />
      <LineId Id="593" Count="2" />
      <LineId Id="475" Count="5" />
      <LineId Id="596" Count="2" />
      <LineId Id="483" Count="7" />
      <LineId Id="599" Count="0" />
      <LineId Id="491" Count="7" />
      <LineId Id="600" Count="0" />
      <LineId Id="499" Count="8" />
      <LineId Id="601" Count="0" />
      <LineId Id="508" Count="7" />
      <LineId Id="602" Count="0" />
      <LineId Id="516" Count="8" />
      <LineId Id="603" Count="0" />
      <LineId Id="525" Count="7" />
      <LineId Id="604" Count="0" />
      <LineId Id="533" Count="1" />
      <LineId Id="152" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_ManualAllocateHoming">
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="9" Count="2" />
      <LineId Id="13" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_ManualMachineHome">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="2" />
      <LineId Id="14" Count="1" />
      <LineId Id="17" Count="3" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_ManualShippingHoming">
      <LineId Id="9" Count="8" />
      <LineId Id="5" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_ManualStorageHoming">
      <LineId Id="9" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="14" Count="2" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Resetting">
      <LineId Id="314" Count="0" />
      <LineId Id="379" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="316" Count="7" />
      <LineId Id="368" Count="0" />
      <LineId Id="324" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="325" Count="8" />
      <LineId Id="362" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="335" Count="5" />
      <LineId Id="390" Count="0" />
      <LineId Id="342" Count="1" />
      <LineId Id="388" Count="1" />
      <LineId Id="387" Count="0" />
      <LineId Id="344" Count="3" />
      <LineId Id="349" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="384" Count="2" />
      <LineId Id="45" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_StartHoming">
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Starting">
      <LineId Id="34" Count="12" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_StopHoming">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Stopped">
      <LineId Id="7" Count="4" />
      <LineId Id="36" Count="2" />
      <LineId Id="41" Count="2" />
      <LineId Id="45" Count="2" />
      <LineId Id="39" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="17" Count="18" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Stopping">
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="23" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="22" />
      <LineId Id="8" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_StroageRobotSafeCheck">
      <LineId Id="5" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="9" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Suspended">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Suspending">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Undefined">
      <LineId Id="20" Count="4" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Unholding">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.M_Unsuspending">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.RefAllocateService">
      <LineId Id="5" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="21" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="57" Count="4" />
      <LineId Id="56" Count="0" />
      <LineId Id="65" Count="2" />
    </LineIds>
    <LineIds Name="FB_MachineControl.ReferenceHMI">
      <LineId Id="5" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="11" Count="4" />
      <LineId Id="22" Count="9" />
      <LineId Id="19" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="35" Count="3" />
      <LineId Id="40" Count="0" />
      <LineId Id="46" Count="5" />
      <LineId Id="44" Count="0" />
      <LineId Id="52" Count="8" />
      <LineId Id="62" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="84" Count="1" />
      <LineId Id="90" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="77" Count="1" />
      <LineId Id="76" Count="0" />
      <LineId Id="75" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.RefShippingService">
      <LineId Id="17" Count="2" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_MachineControl.RefStorageService">
      <LineId Id="5" Count="6" />
      <LineId Id="15" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="27" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>